
c:/Users/martr/OneDrive/Documents/marlene/studentprojects-martru/saw_code_no_hall/target/1.5.0/argon/saw_code_no_hall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003720  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7740  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003e338  000d7744  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000043c  2003e3b4  2003e3b4  0002e3b4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d77c0  000d77c0  000277c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d77e8  000d77e8  000277e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c4516  00000000  00000000  000277ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f924  00000000  00000000  000ebd02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001988f  00000000  00000000  000fb626  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002178  00000000  00000000  00114eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003e80  00000000  00000000  0011702d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033b40  00000000  00000000  0011aead  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025b99  00000000  00000000  0014e9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff4d0  00000000  00000000  00174586  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c420  00000000  00000000  00273a58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f97f 	bl	d7334 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f984 	bl	d734a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e338 	.word	0x2003e338
   d404c:	000d7744 	.word	0x000d7744
   d4050:	2003e3b4 	.word	0x2003e3b4
   d4054:	2003e3b4 	.word	0x2003e3b4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fd7f 	bl	d4b60 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7738 	.word	0x000d7738
   d4084:	000d76fc 	.word	0x000d76fc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b814 	b.w	d40b4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f833 	bl	d40f8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bd25 	b.w	d4ae4 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 badd 	b.w	d4658 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 badb 	b.w	d4658 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
unsigned long lowpulseoccupancy = 0;
float ratio = 0;
float concentration = 0;


void setup() {
   d40b4:	b508      	push	{r3, lr}

Serial.begin(9600);
   d40b6:	f000 fe53 	bl	d4d60 <_Z16_fetch_usbserialv>
   d40ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40be:	f000 fe43 	bl	d4d48 <_ZN9USBSerial5beginEl>
    pinMode(D4, OUTPUT);
   d40c2:	2101      	movs	r1, #1
   d40c4:	2004      	movs	r0, #4
   d40c6:	f001 f8f7 	bl	d52b8 <pinMode>
    pinMode(airPin,INPUT);
   d40ca:	4b07      	ldr	r3, [pc, #28]	; (d40e8 <setup+0x34>)
   d40cc:	2100      	movs	r1, #0
   d40ce:	8818      	ldrh	r0, [r3, #0]
   d40d0:	f001 f8f2 	bl	d52b8 <pinMode>
    pinMode(piezoPin, INPUT);
   d40d4:	4b05      	ldr	r3, [pc, #20]	; (d40ec <setup+0x38>)
   d40d6:	2100      	movs	r1, #0
   d40d8:	8818      	ldrh	r0, [r3, #0]
   d40da:	f001 f8ed 	bl	d52b8 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40de:	f000 f957 	bl	d4390 <HAL_Timer_Get_Milli_Seconds>

    starttime = millis();//get the current time;
   d40e2:	4b03      	ldr	r3, [pc, #12]	; (d40f0 <setup+0x3c>)
   d40e4:	6018      	str	r0, [r3, #0]
   d40e6:	bd08      	pop	{r3, pc}
   d40e8:	2003e338 	.word	0x2003e338
   d40ec:	2003e340 	.word	0x2003e340
   d40f0:	2003e3c8 	.word	0x2003e3c8
   d40f4:	00000000 	.word	0x00000000

000d40f8 <loop>:
}

void loop() {
   d40f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d40fc:	ed2d 8b02 	vpush	{d8}
//digitalWrite(switchPin, HIGH);
//delay(10000);
//digitalWrite(switchPin, LOW);
//delay(10000);

    duration = pulseIn(airPin, LOW);
   d4100:	4b6b      	ldr	r3, [pc, #428]	; (d42b0 <loop+0x1b8>)
    lowpulseoccupancy = lowpulseoccupancy+duration;
   d4102:	4c6c      	ldr	r4, [pc, #432]	; (d42b4 <loop+0x1bc>)
//digitalWrite(switchPin, HIGH);
//delay(10000);
//digitalWrite(switchPin, LOW);
//delay(10000);

    duration = pulseIn(airPin, LOW);
   d4104:	8818      	ldrh	r0, [r3, #0]
    lowpulseoccupancy = lowpulseoccupancy+duration;

    if ((millis()-starttime) > sampletime_ms)//if the sample time == 30s
   d4106:	4f6c      	ldr	r7, [pc, #432]	; (d42b8 <loop+0x1c0>)
   d4108:	4d6c      	ldr	r5, [pc, #432]	; (d42bc <loop+0x1c4>)
    pinMode(piezoPin, INPUT);

    starttime = millis();//get the current time;
}

void loop() {
   d410a:	b083      	sub	sp, #12
//digitalWrite(switchPin, HIGH);
//delay(10000);
//digitalWrite(switchPin, LOW);
//delay(10000);

    duration = pulseIn(airPin, LOW);
   d410c:	2100      	movs	r1, #0
   d410e:	f001 f8fd 	bl	d530c <pulseIn>
   d4112:	4b6b      	ldr	r3, [pc, #428]	; (d42c0 <loop+0x1c8>)
   d4114:	6018      	str	r0, [r3, #0]
    lowpulseoccupancy = lowpulseoccupancy+duration;
   d4116:	6823      	ldr	r3, [r4, #0]
   d4118:	4418      	add	r0, r3
   d411a:	6020      	str	r0, [r4, #0]
   d411c:	f000 f938 	bl	d4390 <HAL_Timer_Get_Milli_Seconds>

    if ((millis()-starttime) > sampletime_ms)//if the sample time == 30s
   d4120:	4b68      	ldr	r3, [pc, #416]	; (d42c4 <loop+0x1cc>)
   d4122:	681e      	ldr	r6, [r3, #0]
   d4124:	683b      	ldr	r3, [r7, #0]
   d4126:	1ac0      	subs	r0, r0, r3
   d4128:	42b0      	cmp	r0, r6
   d412a:	d97e      	bls.n	d422a <loop+0x132>
    {
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   d412c:	6820      	ldr	r0, [r4, #0]
   d412e:	f002 fd35 	bl	d6b9c <__aeabi_ui2d>
   d4132:	4680      	mov	r8, r0
   d4134:	4630      	mov	r0, r6
   d4136:	4689      	mov	r9, r1
   d4138:	f002 fd30 	bl	d6b9c <__aeabi_ui2d>
   d413c:	2200      	movs	r2, #0
   d413e:	4b62      	ldr	r3, [pc, #392]	; (d42c8 <loop+0x1d0>)
   d4140:	4e62      	ldr	r6, [pc, #392]	; (d42cc <loop+0x1d4>)
   d4142:	f002 fda1 	bl	d6c88 <__aeabi_dmul>
   d4146:	4602      	mov	r2, r0
   d4148:	460b      	mov	r3, r1
   d414a:	4640      	mov	r0, r8
   d414c:	4649      	mov	r1, r9
   d414e:	f002 fec5 	bl	d6edc <__aeabi_ddiv>
   d4152:	f003 f891 	bl	d7278 <__aeabi_d2f>
   d4156:	6030      	str	r0, [r6, #0]
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   d4158:	f002 fd42 	bl	d6be0 <__aeabi_f2d>
   d415c:	ed9f 1b4c 	vldr	d1, [pc, #304]	; d4290 <loop+0x198>
   d4160:	ec41 0b10 	vmov	d0, r0, r1
   d4164:	f001 faa0 	bl	d56a8 <pow>
   d4168:	ed96 8a00 	vldr	s16, [r6]
   d416c:	ee18 0a10 	vmov	r0, s16
   d4170:	ed8d 0b00 	vstr	d0, [sp]
   d4174:	f002 fd34 	bl	d6be0 <__aeabi_f2d>
   d4178:	ed9d 0b00 	vldr	d0, [sp]
   d417c:	4682      	mov	sl, r0
   d417e:	468b      	mov	fp, r1
   d4180:	a345      	add	r3, pc, #276	; (adr r3, d4298 <loop+0x1a0>)
   d4182:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4186:	ec51 0b10 	vmov	r0, r1, d0
   d418a:	f002 fd7d 	bl	d6c88 <__aeabi_dmul>
   d418e:	4652      	mov	r2, sl
   d4190:	4680      	mov	r8, r0
   d4192:	4689      	mov	r9, r1
   d4194:	465b      	mov	r3, fp
   d4196:	4650      	mov	r0, sl
   d4198:	4659      	mov	r1, fp
   d419a:	f002 fd75 	bl	d6c88 <__aeabi_dmul>
   d419e:	a340      	add	r3, pc, #256	; (adr r3, d42a0 <loop+0x1a8>)
   d41a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41a4:	f002 fd70 	bl	d6c88 <__aeabi_dmul>
   d41a8:	4602      	mov	r2, r0
   d41aa:	460b      	mov	r3, r1
   d41ac:	4640      	mov	r0, r8
   d41ae:	4649      	mov	r1, r9
   d41b0:	f002 fbb6 	bl	d6920 <__aeabi_dsub>
   d41b4:	eddf 7a46 	vldr	s15, [pc, #280]	; d42d0 <loop+0x1d8>
   d41b8:	ee68 7a27 	vmul.f32	s15, s16, s15
   d41bc:	4680      	mov	r8, r0
   d41be:	ee17 0a90 	vmov	r0, s15
   d41c2:	4689      	mov	r9, r1
   d41c4:	f002 fd0c 	bl	d6be0 <__aeabi_f2d>
   d41c8:	4602      	mov	r2, r0
   d41ca:	460b      	mov	r3, r1
   d41cc:	4640      	mov	r0, r8
   d41ce:	4649      	mov	r1, r9
   d41d0:	f002 fba8 	bl	d6924 <__adddf3>
   d41d4:	a334      	add	r3, pc, #208	; (adr r3, d42a8 <loop+0x1b0>)
   d41d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41da:	f002 fba3 	bl	d6924 <__adddf3>
   d41de:	f003 f84b 	bl	d7278 <__aeabi_d2f>
   d41e2:	6028      	str	r0, [r5, #0]
        Serial.print(lowpulseoccupancy);
   d41e4:	f000 fdbc 	bl	d4d60 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d41e8:	220a      	movs	r2, #10
   d41ea:	6821      	ldr	r1, [r4, #0]
   d41ec:	f000 fb23 	bl	d4836 <_ZN5Print11printNumberEmh>
        Serial.print(",");
   d41f0:	f000 fdb6 	bl	d4d60 <_Z16_fetch_usbserialv>
   d41f4:	4937      	ldr	r1, [pc, #220]	; (d42d4 <loop+0x1dc>)
   d41f6:	f000 fb01 	bl	d47fc <_ZN5Print5printEPKc>
        Serial.print(ratio);
   d41fa:	f000 fdb1 	bl	d4d60 <_Z16_fetch_usbserialv>
   d41fe:	ed96 0a00 	vldr	s0, [r6]
   d4202:	2102      	movs	r1, #2
   d4204:	f000 fbf6 	bl	d49f4 <_ZN5Print5printEfi>
        Serial.print(",");
   d4208:	f000 fdaa 	bl	d4d60 <_Z16_fetch_usbserialv>
   d420c:	4931      	ldr	r1, [pc, #196]	; (d42d4 <loop+0x1dc>)
   d420e:	f000 faf5 	bl	d47fc <_ZN5Print5printEPKc>
        Serial.println(concentration);
   d4212:	f000 fda5 	bl	d4d60 <_Z16_fetch_usbserialv>
   d4216:	2102      	movs	r1, #2
   d4218:	ed95 0a00 	vldr	s0, [r5]
   d421c:	f000 fc04 	bl	d4a28 <_ZN5Print7printlnEfi>
        lowpulseoccupancy = 0;
   d4220:	2300      	movs	r3, #0
   d4222:	6023      	str	r3, [r4, #0]
   d4224:	f000 f8b4 	bl	d4390 <HAL_Timer_Get_Milli_Seconds>
        starttime = millis();
   d4228:	6038      	str	r0, [r7, #0]
    }
    //analogRead(concentration);
   if (concentration >19000){
   d422a:	eddf 7a2b 	vldr	s15, [pc, #172]	; d42d8 <loop+0x1e0>
   d422e:	ed95 7a00 	vldr	s14, [r5]
   d4232:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d423a:	eeb0 8a67 	vmov.f32	s16, s15
   d423e:	dd09      	ble.n	d4254 <loop+0x15c>
    digitalWrite(switchPin, HIGH);
   d4240:	4b26      	ldr	r3, [pc, #152]	; (d42dc <loop+0x1e4>)
   d4242:	2101      	movs	r1, #1
   d4244:	8818      	ldrh	r0, [r3, #0]
   d4246:	f001 f848 	bl	d52da <digitalWrite>
    Serial.println("vacuum on");
   d424a:	f000 fd89 	bl	d4d60 <_Z16_fetch_usbserialv>
   d424e:	4924      	ldr	r1, [pc, #144]	; (d42e0 <loop+0x1e8>)
   d4250:	f000 fae7 	bl	d4822 <_ZN5Print7printlnEPKc>
   }
    if (concentration<19000){
   d4254:	edd5 7a00 	vldr	s15, [r5]
   d4258:	eef4 7ac8 	vcmpe.f32	s15, s16
   d425c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4260:	d50e      	bpl.n	d4280 <loop+0x188>
        digitalWrite(switchPin,LOW);
   d4262:	4b1e      	ldr	r3, [pc, #120]	; (d42dc <loop+0x1e4>)
   d4264:	2100      	movs	r1, #0
   d4266:	8818      	ldrh	r0, [r3, #0]
   d4268:	f001 f837 	bl	d52da <digitalWrite>
        Serial.println("vacuum off");
   d426c:	f000 fd78 	bl	d4d60 <_Z16_fetch_usbserialv>
   d4270:	491c      	ldr	r1, [pc, #112]	; (d42e4 <loop+0x1ec>)
    }
  
}
   d4272:	b003      	add	sp, #12
   d4274:	ecbd 8b02 	vpop	{d8}
   d4278:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    digitalWrite(switchPin, HIGH);
    Serial.println("vacuum on");
   }
    if (concentration<19000){
        digitalWrite(switchPin,LOW);
        Serial.println("vacuum off");
   d427c:	f000 bad1 	b.w	d4822 <_ZN5Print7printlnEPKc>
    }
  
}
   d4280:	b003      	add	sp, #12
   d4282:	ecbd 8b02 	vpop	{d8}
   d4286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d428a:	bf00      	nop
   d428c:	f3af 8000 	nop.w
   d4290:	00000000 	.word	0x00000000
   d4294:	40080000 	.word	0x40080000
   d4298:	9999999a 	.word	0x9999999a
   d429c:	3ff19999 	.word	0x3ff19999
   d42a0:	66666666 	.word	0x66666666
   d42a4:	400e6666 	.word	0x400e6666
   d42a8:	3d70a3d7 	.word	0x3d70a3d7
   d42ac:	3fe3d70a 	.word	0x3fe3d70a
   d42b0:	2003e338 	.word	0x2003e338
   d42b4:	2003e3c4 	.word	0x2003e3c4
   d42b8:	2003e3c8 	.word	0x2003e3c8
   d42bc:	2003e3b8 	.word	0x2003e3b8
   d42c0:	2003e3bc 	.word	0x2003e3bc
   d42c4:	2003e33c 	.word	0x2003e33c
   d42c8:	40240000 	.word	0x40240000
   d42cc:	2003e3c0 	.word	0x2003e3c0
   d42d0:	44020000 	.word	0x44020000
   d42d4:	000d73d0 	.word	0x000d73d0
   d42d8:	46947000 	.word	0x46947000
   d42dc:	2003e344 	.word	0x2003e344
   d42e0:	000d73d2 	.word	0x000d73d2
   d42e4:	000d73dc 	.word	0x000d73dc

000d42e8 <_GLOBAL__sub_I_switchPin>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42e8:	f000 b812 	b.w	d4310 <HAL_Pin_Map>

000d42ec <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d42ec:	f000 b810 	b.w	d4310 <HAL_Pin_Map>

000d42f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <netdb_freeaddrinfo+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	689b      	ldr	r3, [r3, #8]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030268 	.word	0x00030268

000d4300 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <netdb_getaddrinfo+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	68db      	ldr	r3, [r3, #12]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030268 	.word	0x00030268

000d4310 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_Pin_Map+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	681b      	ldr	r3, [r3, #0]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	0003022c 	.word	0x0003022c

000d4320 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_Pin_Mode+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	689b      	ldr	r3, [r3, #8]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003022c 	.word	0x0003022c

000d4330 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_Get_Pin_Mode+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	68db      	ldr	r3, [r3, #12]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003022c 	.word	0x0003022c

000d4340 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_GPIO_Write+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	691b      	ldr	r3, [r3, #16]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003022c 	.word	0x0003022c

000d4350 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_Pulse_In+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003022c 	.word	0x0003022c

000d4360 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_SPI_Init+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	69db      	ldr	r3, [r3, #28]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030230 	.word	0x00030230

000d4370 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_SPI_Is_Enabled+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	6a1b      	ldr	r3, [r3, #32]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	00030230 	.word	0x00030230

000d4380 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_RNG_GetRandomNumber+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	685b      	ldr	r3, [r3, #4]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030218 	.word	0x00030218

000d4390 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	695b      	ldr	r3, [r3, #20]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030218 	.word	0x00030218

000d43a0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <os_thread_is_current+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	689b      	ldr	r3, [r3, #8]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030248 	.word	0x00030248

000d43b0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <os_thread_join+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	691b      	ldr	r3, [r3, #16]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030248 	.word	0x00030248

000d43c0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <os_thread_cleanup+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	695b      	ldr	r3, [r3, #20]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030248 	.word	0x00030248

000d43d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <os_mutex_recursive_create+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030248 	.word	0x00030248

000d43e0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <os_mutex_recursive_destroy+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030248 	.word	0x00030248

000d43f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <inet_inet_ntop+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	695b      	ldr	r3, [r3, #20]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030264 	.word	0x00030264

000d4400 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_USART_Init+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	681b      	ldr	r3, [r3, #0]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	0003023c 	.word	0x0003023c

000d4410 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_USART_Write_Data+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	68db      	ldr	r3, [r3, #12]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	0003023c 	.word	0x0003023c

000d4420 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_USART_Available_Data+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	691b      	ldr	r3, [r3, #16]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	0003023c 	.word	0x0003023c

000d4430 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_USART_Read_Data+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	695b      	ldr	r3, [r3, #20]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003023c 	.word	0x0003023c

000d4440 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_USART_Peek_Data+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	699b      	ldr	r3, [r3, #24]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003023c 	.word	0x0003023c

000d4450 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_USART_Flush_Data+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	69db      	ldr	r3, [r3, #28]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003023c 	.word	0x0003023c

000d4460 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_USART_Is_Enabled+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	6a1b      	ldr	r3, [r3, #32]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003023c 	.word	0x0003023c

000d4470 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <HAL_USART_Available_Data_For_Write+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003023c 	.word	0x0003023c

000d4480 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_I2C_Write_Data+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	6a1b      	ldr	r3, [r3, #32]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	00030228 	.word	0x00030228

000d4490 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_I2C_Available_Data+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030228 	.word	0x00030228

000d44a0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_I2C_Read_Data+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030228 	.word	0x00030228

000d44b0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_I2C_Peek_Data+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030228 	.word	0x00030228

000d44c0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_I2C_Flush_Data+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030228 	.word	0x00030228

000d44d0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_I2C_Is_Enabled+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030228 	.word	0x00030228

000d44e0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_I2C_Init+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030228 	.word	0x00030228

000d44f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_USB_USART_Init+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	681b      	ldr	r3, [r3, #0]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	0003024c 	.word	0x0003024c

000d4500 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_USB_USART_Begin+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	685b      	ldr	r3, [r3, #4]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	0003024c 	.word	0x0003024c

000d4510 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_USB_USART_Available_Data+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	691b      	ldr	r3, [r3, #16]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	0003024c 	.word	0x0003024c

000d4520 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	695b      	ldr	r3, [r3, #20]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	0003024c 	.word	0x0003024c

000d4530 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_USB_USART_Receive_Data+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	699b      	ldr	r3, [r3, #24]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	0003024c 	.word	0x0003024c

000d4540 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_USB_USART_Send_Data+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	69db      	ldr	r3, [r3, #28]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003024c 	.word	0x0003024c

000d4550 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_USB_USART_Flush_Data+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6a1b      	ldr	r3, [r3, #32]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	0003024c 	.word	0x0003024c

000d4560 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <set_system_mode+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	685b      	ldr	r3, [r3, #4]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030220 	.word	0x00030220

000d4570 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b03      	ldr	r3, [pc, #12]	; (d4580 <system_ctrl_set_app_request_handler+0x10>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d457a:	9301      	str	r3, [sp, #4]
   d457c:	bd08      	pop	{r3, pc}
   d457e:	0000      	.short	0x0000
   d4580:	00030220 	.word	0x00030220

000d4584 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b03      	ldr	r3, [pc, #12]	; (d4594 <system_ctrl_set_result+0x10>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d458e:	9301      	str	r3, [sp, #4]
   d4590:	bd08      	pop	{r3, pc}
   d4592:	0000      	.short	0x0000
   d4594:	00030220 	.word	0x00030220

000d4598 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <network_connect+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	685b      	ldr	r3, [r3, #4]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030240 	.word	0x00030240

000d45a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <network_connecting+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	689b      	ldr	r3, [r3, #8]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030240 	.word	0x00030240

000d45b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <network_disconnect+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	68db      	ldr	r3, [r3, #12]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030240 	.word	0x00030240

000d45c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <network_ready+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	691b      	ldr	r3, [r3, #16]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030240 	.word	0x00030240

000d45d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <network_on+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	695b      	ldr	r3, [r3, #20]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030240 	.word	0x00030240

000d45e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <network_off+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	699b      	ldr	r3, [r3, #24]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030240 	.word	0x00030240

000d45f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <network_listen+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	69db      	ldr	r3, [r3, #28]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030240 	.word	0x00030240

000d4608 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <network_listening+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6a1b      	ldr	r3, [r3, #32]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030240 	.word	0x00030240

000d4618 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <network_set_listen_timeout+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030240 	.word	0x00030240

000d4628 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <network_get_listen_timeout+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030240 	.word	0x00030240

000d4638 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <spark_set_random_seed_from_cloud_handler+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030244 	.word	0x00030244

000d4648 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <malloc+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	681b      	ldr	r3, [r3, #0]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003021c 	.word	0x0003021c

000d4658 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <free+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	685b      	ldr	r3, [r3, #4]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003021c 	.word	0x0003021c

000d4668 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <__errno+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003021c 	.word	0x0003021c

000d4678 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4678:	2200      	movs	r2, #0
   d467a:	4611      	mov	r1, r2
   d467c:	6840      	ldr	r0, [r0, #4]
   d467e:	f7ff bfc3 	b.w	d4608 <network_listening>

000d4682 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4682:	2200      	movs	r2, #0
   d4684:	4611      	mov	r1, r2
   d4686:	6840      	ldr	r0, [r0, #4]
   d4688:	f7ff bfce 	b.w	d4628 <network_get_listen_timeout>

000d468c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d468c:	2200      	movs	r2, #0
   d468e:	6840      	ldr	r0, [r0, #4]
   d4690:	f7ff bfc2 	b.w	d4618 <network_set_listen_timeout>

000d4694 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4694:	2200      	movs	r2, #0
   d4696:	f081 0101 	eor.w	r1, r1, #1
   d469a:	6840      	ldr	r0, [r0, #4]
   d469c:	f7ff bfac 	b.w	d45f8 <network_listen>

000d46a0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d46a0:	2300      	movs	r3, #0
   d46a2:	461a      	mov	r2, r3
   d46a4:	4619      	mov	r1, r3
   d46a6:	6840      	ldr	r0, [r0, #4]
   d46a8:	f7ff bf9e 	b.w	d45e8 <network_off>

000d46ac <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46ac:	2300      	movs	r3, #0
   d46ae:	461a      	mov	r2, r3
   d46b0:	4619      	mov	r1, r3
   d46b2:	6840      	ldr	r0, [r0, #4]
   d46b4:	f7ff bf90 	b.w	d45d8 <network_on>

000d46b8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46b8:	2200      	movs	r2, #0
   d46ba:	4611      	mov	r1, r2
   d46bc:	6840      	ldr	r0, [r0, #4]
   d46be:	f7ff bf83 	b.w	d45c8 <network_ready>

000d46c2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46c2:	2200      	movs	r2, #0
   d46c4:	4611      	mov	r1, r2
   d46c6:	6840      	ldr	r0, [r0, #4]
   d46c8:	f7ff bf6e 	b.w	d45a8 <network_connecting>

000d46cc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46cc:	2200      	movs	r2, #0
   d46ce:	2102      	movs	r1, #2
   d46d0:	6840      	ldr	r0, [r0, #4]
   d46d2:	f7ff bf71 	b.w	d45b8 <network_disconnect>

000d46d6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46d6:	2300      	movs	r3, #0
   d46d8:	461a      	mov	r2, r3
   d46da:	6840      	ldr	r0, [r0, #4]
   d46dc:	f7ff bf5c 	b.w	d4598 <network_connect>

000d46e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46e0:	4b02      	ldr	r3, [pc, #8]	; (d46ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46e2:	2203      	movs	r2, #3
   d46e4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46e6:	4a02      	ldr	r2, [pc, #8]	; (d46f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46e8:	601a      	str	r2, [r3, #0]
   d46ea:	4770      	bx	lr
   d46ec:	2003e3cc 	.word	0x2003e3cc
   d46f0:	000d73f0 	.word	0x000d73f0

000d46f4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d46f4:	4770      	bx	lr

000d46f6 <_ZN8SPIClassD0Ev>:
   d46f6:	b510      	push	{r4, lr}
   d46f8:	210c      	movs	r1, #12
   d46fa:	4604      	mov	r4, r0
   d46fc:	f000 fe76 	bl	d53ec <_ZdlPvj>
   d4700:	4620      	mov	r0, r4
   d4702:	bd10      	pop	{r4, pc}

000d4704 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4704:	b510      	push	{r4, lr}
   d4706:	4b05      	ldr	r3, [pc, #20]	; (d471c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d4708:	6003      	str	r3, [r0, #0]
   d470a:	4604      	mov	r4, r0
{
    _spi = spi;
   d470c:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d470e:	4608      	mov	r0, r1
   d4710:	f7ff fe26 	bl	d4360 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4714:	2300      	movs	r3, #0
   d4716:	60a3      	str	r3, [r4, #8]
}
   d4718:	4620      	mov	r0, r4
   d471a:	bd10      	pop	{r4, pc}
   d471c:	000d7424 	.word	0x000d7424

000d4720 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4720:	7900      	ldrb	r0, [r0, #4]
   d4722:	f7ff be25 	b.w	d4370 <HAL_SPI_Is_Enabled>

000d4726 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4726:	b510      	push	{r4, lr}
   d4728:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d472a:	6800      	ldr	r0, [r0, #0]
   d472c:	b118      	cbz	r0, d4736 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d472e:	f7ff ff93 	bl	d4658 <free>
            wakeupSource_ = nullptr;
   d4732:	2300      	movs	r3, #0
   d4734:	6023      	str	r3, [r4, #0]
   d4736:	bd10      	pop	{r4, pc}

000d4738 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4738:	b510      	push	{r4, lr}
   d473a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d473c:	f7ff fff3 	bl	d4726 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4740:	4620      	mov	r0, r4
   d4742:	bd10      	pop	{r4, pc}

000d4744 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4744:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4746:	4c09      	ldr	r4, [pc, #36]	; (d476c <_GLOBAL__sub_I_System+0x28>)
   d4748:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d474a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d474e:	6020      	str	r0, [r4, #0]
   d4750:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4752:	71a0      	strb	r0, [r4, #6]
   d4754:	8120      	strh	r0, [r4, #8]
   d4756:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4758:	f7ff ff02 	bl	d4560 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d475c:	4620      	mov	r0, r4
   d475e:	4a04      	ldr	r2, [pc, #16]	; (d4770 <_GLOBAL__sub_I_System+0x2c>)
   d4760:	4904      	ldr	r1, [pc, #16]	; (d4774 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4766:	f000 be33 	b.w	d53d0 <__aeabi_atexit>
   d476a:	bf00      	nop
   d476c:	2003e3d4 	.word	0x2003e3d4
   d4770:	2003e3b4 	.word	0x2003e3b4
   d4774:	000d4739 	.word	0x000d4739

000d4778 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4778:	b510      	push	{r4, lr}
   d477a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d477c:	6800      	ldr	r0, [r0, #0]
   d477e:	b108      	cbz	r0, d4784 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4780:	f7ff fe2e 	bl	d43e0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4784:	4620      	mov	r0, r4
   d4786:	bd10      	pop	{r4, pc}

000d4788 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4788:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d478a:	4c06      	ldr	r4, [pc, #24]	; (d47a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d478c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d478e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4790:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4792:	f7ff fe1d 	bl	d43d0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4796:	4620      	mov	r0, r4
   d4798:	4a03      	ldr	r2, [pc, #12]	; (d47a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d479a:	4904      	ldr	r1, [pc, #16]	; (d47ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d47a0:	f000 be16 	b.w	d53d0 <__aeabi_atexit>
   d47a4:	2003e3e0 	.word	0x2003e3e0
   d47a8:	2003e3b4 	.word	0x2003e3b4
   d47ac:	000d4779 	.word	0x000d4779

000d47b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d47b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47b2:	4606      	mov	r6, r0
   d47b4:	460d      	mov	r5, r1
   d47b6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d47b8:	2400      	movs	r4, #0
  while (size--) {
   d47ba:	42bd      	cmp	r5, r7
   d47bc:	d00c      	beq.n	d47d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d47be:	6833      	ldr	r3, [r6, #0]
   d47c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d47c4:	689b      	ldr	r3, [r3, #8]
   d47c6:	4630      	mov	r0, r6
   d47c8:	4798      	blx	r3
     if (chunk>=0)
   d47ca:	2800      	cmp	r0, #0
   d47cc:	db01      	blt.n	d47d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d47ce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d47d0:	e7f3      	b.n	d47ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d47d2:	2c00      	cmp	r4, #0
   d47d4:	bf08      	it	eq
   d47d6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d47d8:	4620      	mov	r0, r4
   d47da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d47dc:	b570      	push	{r4, r5, r6, lr}
   d47de:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d47e0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d47e2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d47e4:	b149      	cbz	r1, d47fa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d47e6:	f002 fde1 	bl	d73ac <strlen>
   d47ea:	682b      	ldr	r3, [r5, #0]
   d47ec:	4602      	mov	r2, r0
   d47ee:	4621      	mov	r1, r4
   d47f0:	4628      	mov	r0, r5
   d47f2:	68db      	ldr	r3, [r3, #12]
    }
   d47f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d47f8:	4718      	bx	r3
    }
   d47fa:	bd70      	pop	{r4, r5, r6, pc}

000d47fc <_ZN5Print5printEPKc>:
   d47fc:	b508      	push	{r3, lr}
   d47fe:	f7ff ffed 	bl	d47dc <_ZN5Print5writeEPKc>
   d4802:	bd08      	pop	{r3, pc}

000d4804 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4804:	6803      	ldr	r3, [r0, #0]
   d4806:	689b      	ldr	r3, [r3, #8]
   d4808:	4718      	bx	r3

000d480a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d480a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d480c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d480e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4810:	f7ff fff8 	bl	d4804 <_ZN5Print5printEc>
  n += print('\n');
   d4814:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4816:	4604      	mov	r4, r0
  n += print('\n');
   d4818:	4628      	mov	r0, r5
   d481a:	f7ff fff3 	bl	d4804 <_ZN5Print5printEc>
  return n;
}
   d481e:	4420      	add	r0, r4
   d4820:	bd38      	pop	{r3, r4, r5, pc}

000d4822 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4822:	b538      	push	{r3, r4, r5, lr}
   d4824:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4826:	f7ff ffd9 	bl	d47dc <_ZN5Print5writeEPKc>
   d482a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d482c:	4628      	mov	r0, r5
   d482e:	f7ff ffec 	bl	d480a <_ZN5Print7printlnEv>
  return n;
}
   d4832:	4420      	add	r0, r4
   d4834:	bd38      	pop	{r3, r4, r5, pc}

000d4836 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4836:	b530      	push	{r4, r5, lr}
   d4838:	b08b      	sub	sp, #44	; 0x2c
   d483a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d483c:	2100      	movs	r1, #0
   d483e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4842:	2a01      	cmp	r2, #1
   d4844:	bf98      	it	ls
   d4846:	220a      	movls	r2, #10
   d4848:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d484c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4850:	fb05 3312 	mls	r3, r5, r2, r3
   d4854:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4858:	2b09      	cmp	r3, #9
   d485a:	bf94      	ite	ls
   d485c:	3330      	addls	r3, #48	; 0x30
   d485e:	3337      	addhi	r3, #55	; 0x37
   d4860:	b2db      	uxtb	r3, r3
   d4862:	4621      	mov	r1, r4
   d4864:	f804 3901 	strb.w	r3, [r4], #-1
   d4868:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d486a:	2d00      	cmp	r5, #0
   d486c:	d1ee      	bne.n	d484c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d486e:	f7ff ffb5 	bl	d47dc <_ZN5Print5writeEPKc>
}
   d4872:	b00b      	add	sp, #44	; 0x2c
   d4874:	bd30      	pop	{r4, r5, pc}
	...

000d4878 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d487c:	ec57 6b10 	vmov	r6, r7, d0
   d4880:	4682      	mov	sl, r0
   d4882:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4884:	ee10 2a10 	vmov	r2, s0
   d4888:	463b      	mov	r3, r7
   d488a:	ee10 0a10 	vmov	r0, s0
   d488e:	4639      	mov	r1, r7
   d4890:	f002 fc94 	bl	d71bc <__aeabi_dcmpun>
   d4894:	b108      	cbz	r0, d489a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4896:	494e      	ldr	r1, [pc, #312]	; (d49d0 <_ZN5Print10printFloatEdh+0x158>)
   d4898:	e012      	b.n	d48c0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d489a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d489e:	f04f 32ff 	mov.w	r2, #4294967295
   d48a2:	4b4c      	ldr	r3, [pc, #304]	; (d49d4 <_ZN5Print10printFloatEdh+0x15c>)
   d48a4:	4630      	mov	r0, r6
   d48a6:	4649      	mov	r1, r9
   d48a8:	f002 fc88 	bl	d71bc <__aeabi_dcmpun>
   d48ac:	b968      	cbnz	r0, d48ca <_ZN5Print10printFloatEdh+0x52>
   d48ae:	f04f 32ff 	mov.w	r2, #4294967295
   d48b2:	4b48      	ldr	r3, [pc, #288]	; (d49d4 <_ZN5Print10printFloatEdh+0x15c>)
   d48b4:	4630      	mov	r0, r6
   d48b6:	4649      	mov	r1, r9
   d48b8:	f002 fc62 	bl	d7180 <__aeabi_dcmple>
   d48bc:	b928      	cbnz	r0, d48ca <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d48be:	4946      	ldr	r1, [pc, #280]	; (d49d8 <_ZN5Print10printFloatEdh+0x160>)
   d48c0:	4650      	mov	r0, sl
   d48c2:	f7ff ff8b 	bl	d47dc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d48c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d48ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d48ce:	4b43      	ldr	r3, [pc, #268]	; (d49dc <_ZN5Print10printFloatEdh+0x164>)
   d48d0:	4630      	mov	r0, r6
   d48d2:	4639      	mov	r1, r7
   d48d4:	f002 fc68 	bl	d71a8 <__aeabi_dcmpgt>
   d48d8:	b108      	cbz	r0, d48de <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d48da:	4941      	ldr	r1, [pc, #260]	; (d49e0 <_ZN5Print10printFloatEdh+0x168>)
   d48dc:	e7f0      	b.n	d48c0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d48de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d48e2:	4b40      	ldr	r3, [pc, #256]	; (d49e4 <_ZN5Print10printFloatEdh+0x16c>)
   d48e4:	4630      	mov	r0, r6
   d48e6:	4639      	mov	r1, r7
   d48e8:	f002 fc40 	bl	d716c <__aeabi_dcmplt>
   d48ec:	2800      	cmp	r0, #0
   d48ee:	d1f4      	bne.n	d48da <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d48f0:	2200      	movs	r2, #0
   d48f2:	2300      	movs	r3, #0
   d48f4:	4630      	mov	r0, r6
   d48f6:	4639      	mov	r1, r7
   d48f8:	f002 fc38 	bl	d716c <__aeabi_dcmplt>
   d48fc:	b140      	cbz	r0, d4910 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d48fe:	212d      	movs	r1, #45	; 0x2d
   d4900:	4650      	mov	r0, sl
   d4902:	f7ff ff7f 	bl	d4804 <_ZN5Print5printEc>
     number = -number;
   d4906:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d490a:	4604      	mov	r4, r0
     number = -number;
   d490c:	461f      	mov	r7, r3
   d490e:	e000      	b.n	d4912 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4910:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4912:	4935      	ldr	r1, [pc, #212]	; (d49e8 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4914:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4918:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d491a:	fa5f f388 	uxtb.w	r3, r8
   d491e:	429d      	cmp	r5, r3
   d4920:	d906      	bls.n	d4930 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4922:	2200      	movs	r2, #0
   d4924:	4b31      	ldr	r3, [pc, #196]	; (d49ec <_ZN5Print10printFloatEdh+0x174>)
   d4926:	f002 fad9 	bl	d6edc <__aeabi_ddiv>
   d492a:	f108 0801 	add.w	r8, r8, #1
   d492e:	e7f4      	b.n	d491a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4930:	4632      	mov	r2, r6
   d4932:	463b      	mov	r3, r7
   d4934:	f001 fff6 	bl	d6924 <__adddf3>
   d4938:	460f      	mov	r7, r1
   d493a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d493c:	f002 fc7c 	bl	d7238 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4940:	220a      	movs	r2, #10
   d4942:	4601      	mov	r1, r0
   d4944:	4680      	mov	r8, r0
   d4946:	4650      	mov	r0, sl
   d4948:	f7ff ff75 	bl	d4836 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d494c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d494e:	b3e5      	cbz	r5, d49ca <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4950:	4640      	mov	r0, r8
   d4952:	f002 f923 	bl	d6b9c <__aeabi_ui2d>
   d4956:	4602      	mov	r2, r0
   d4958:	460b      	mov	r3, r1
   d495a:	4630      	mov	r0, r6
   d495c:	4639      	mov	r1, r7
   d495e:	f001 ffdf 	bl	d6920 <__aeabi_dsub>
   d4962:	4606      	mov	r6, r0
   d4964:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4966:	4650      	mov	r0, sl
   d4968:	4921      	ldr	r1, [pc, #132]	; (d49f0 <_ZN5Print10printFloatEdh+0x178>)
   d496a:	f7ff ff37 	bl	d47dc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d496e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4970:	2200      	movs	r2, #0
   d4972:	4b1e      	ldr	r3, [pc, #120]	; (d49ec <_ZN5Print10printFloatEdh+0x174>)
   d4974:	4630      	mov	r0, r6
   d4976:	4639      	mov	r1, r7
   d4978:	f002 f986 	bl	d6c88 <__aeabi_dmul>
   d497c:	4606      	mov	r6, r0
   d497e:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d4980:	f002 fc32 	bl	d71e8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4984:	f1b0 0900 	subs.w	r9, r0, #0
   d4988:	da07      	bge.n	d499a <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d498a:	212d      	movs	r1, #45	; 0x2d
   d498c:	4650      	mov	r0, sl
   d498e:	f7ff ff39 	bl	d4804 <_ZN5Print5printEc>
            val = -n;
   d4992:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4996:	4680      	mov	r8, r0
   d4998:	e002      	b.n	d49a0 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d499a:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d499c:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d49a0:	220a      	movs	r2, #10
   d49a2:	4650      	mov	r0, sl
   d49a4:	f7ff ff47 	bl	d4836 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d49a8:	4440      	add	r0, r8
   d49aa:	4404      	add	r4, r0
    remainder -= toPrint;
   d49ac:	4648      	mov	r0, r9
   d49ae:	f002 f905 	bl	d6bbc <__aeabi_i2d>
   d49b2:	4602      	mov	r2, r0
   d49b4:	460b      	mov	r3, r1
   d49b6:	4630      	mov	r0, r6
   d49b8:	4639      	mov	r1, r7
   d49ba:	f001 ffb1 	bl	d6920 <__aeabi_dsub>
   d49be:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d49c0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d49c4:	4606      	mov	r6, r0
   d49c6:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d49c8:	d1d2      	bne.n	d4970 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d49ca:	4620      	mov	r0, r4
   d49cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d49d0:	000d742c 	.word	0x000d742c
   d49d4:	7fefffff 	.word	0x7fefffff
   d49d8:	000d7436 	.word	0x000d7436
   d49dc:	41efffff 	.word	0x41efffff
   d49e0:	000d7430 	.word	0x000d7430
   d49e4:	c1efffff 	.word	0xc1efffff
   d49e8:	3fe00000 	.word	0x3fe00000
   d49ec:	40240000 	.word	0x40240000
   d49f0:	000d7434 	.word	0x000d7434

000d49f4 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d49f4:	b538      	push	{r3, r4, r5, lr}
   d49f6:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d49f8:	ee10 0a10 	vmov	r0, s0
   d49fc:	b2cd      	uxtb	r5, r1
   d49fe:	f002 f8ef 	bl	d6be0 <__aeabi_f2d>
   d4a02:	ec41 0b10 	vmov	d0, r0, r1
   d4a06:	4629      	mov	r1, r5
   d4a08:	4620      	mov	r0, r4
}
   d4a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d4a0e:	f7ff bf33 	b.w	d4878 <_ZN5Print10printFloatEdh>

000d4a12 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4a12:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4a14:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4a16:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4a18:	f7ff ff2e 	bl	d4878 <_ZN5Print10printFloatEdh>
   d4a1c:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4a1e:	4628      	mov	r0, r5
   d4a20:	f7ff fef3 	bl	d480a <_ZN5Print7printlnEv>
  return n;
}
   d4a24:	4420      	add	r0, r4
   d4a26:	bd38      	pop	{r3, r4, r5, pc}

000d4a28 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4a28:	b538      	push	{r3, r4, r5, lr}
   d4a2a:	4604      	mov	r4, r0
    return println((double)num, digits);
   d4a2c:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4a30:	460d      	mov	r5, r1
    return println((double)num, digits);
   d4a32:	f002 f8d5 	bl	d6be0 <__aeabi_f2d>
   d4a36:	ec41 0b10 	vmov	d0, r0, r1
   d4a3a:	4629      	mov	r1, r5
   d4a3c:	4620      	mov	r0, r4
}
   d4a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d4a42:	f7ff bfe6 	b.w	d4a12 <_ZN5Print7printlnEdi>
	...

000d4a48 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4a48:	4b01      	ldr	r3, [pc, #4]	; (d4a50 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4a4a:	4a02      	ldr	r2, [pc, #8]	; (d4a54 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4a4c:	601a      	str	r2, [r3, #0]
   d4a4e:	4770      	bx	lr
   d4a50:	2003e3e4 	.word	0x2003e3e4
   d4a54:	000d74ad 	.word	0x000d74ad

000d4a58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4a58:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4a5a:	681a      	ldr	r2, [r3, #0]
   d4a5c:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4a5e:	601a      	str	r2, [r3, #0]
   d4a60:	4770      	bx	lr
   d4a62:	bf00      	nop
   d4a64:	2003e348 	.word	0x2003e348
   d4a68:	2003e3e8 	.word	0x2003e3e8

000d4a6c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a6c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4a6e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a70:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4a72:	b113      	cbz	r3, d4a7a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a74:	2203      	movs	r2, #3
   d4a76:	4601      	mov	r1, r0
   d4a78:	4798      	blx	r3
    }
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	bd10      	pop	{r4, pc}

000d4a7e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4a7e:	b510      	push	{r4, lr}
   d4a80:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a82:	f7ff fff3 	bl	d4a6c <_ZNSt14_Function_baseD1Ev>
   d4a86:	4620      	mov	r0, r4
   d4a88:	bd10      	pop	{r4, pc}
	...

000d4a8c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a8c:	4803      	ldr	r0, [pc, #12]	; (d4a9c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4a8e:	4a04      	ldr	r2, [pc, #16]	; (d4aa0 <_GLOBAL__sub_I_RGB+0x14>)
   d4a90:	4904      	ldr	r1, [pc, #16]	; (d4aa4 <_GLOBAL__sub_I_RGB+0x18>)
   d4a92:	2300      	movs	r3, #0
   d4a94:	6083      	str	r3, [r0, #8]
   d4a96:	f000 bc9b 	b.w	d53d0 <__aeabi_atexit>
   d4a9a:	bf00      	nop
   d4a9c:	2003e3ec 	.word	0x2003e3ec
   d4aa0:	2003e3b4 	.word	0x2003e3b4
   d4aa4:	000d4a7f 	.word	0x000d4a7f

000d4aa8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4aa8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4aaa:	4b0c      	ldr	r3, [pc, #48]	; (d4adc <serialEventRun+0x34>)
   d4aac:	b133      	cbz	r3, d4abc <serialEventRun+0x14>
   d4aae:	f000 f957 	bl	d4d60 <_Z16_fetch_usbserialv>
   d4ab2:	6803      	ldr	r3, [r0, #0]
   d4ab4:	691b      	ldr	r3, [r3, #16]
   d4ab6:	4798      	blx	r3
   d4ab8:	2800      	cmp	r0, #0
   d4aba:	dc09      	bgt.n	d4ad0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4abc:	4b08      	ldr	r3, [pc, #32]	; (d4ae0 <serialEventRun+0x38>)
   d4abe:	b163      	cbz	r3, d4ada <serialEventRun+0x32>
   d4ac0:	f000 f9d0 	bl	d4e64 <_Z22__fetch_global_Serial1v>
   d4ac4:	6803      	ldr	r3, [r0, #0]
   d4ac6:	691b      	ldr	r3, [r3, #16]
   d4ac8:	4798      	blx	r3
   d4aca:	2800      	cmp	r0, #0
   d4acc:	dc03      	bgt.n	d4ad6 <serialEventRun+0x2e>
   d4ace:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4ad0:	f3af 8000 	nop.w
   d4ad4:	e7f2      	b.n	d4abc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4ad6:	f3af 8000 	nop.w
   d4ada:	bd08      	pop	{r3, pc}
	...

000d4ae4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4ae4:	b508      	push	{r3, lr}
	serialEventRun();
   d4ae6:	f7ff ffdf 	bl	d4aa8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4aea:	f7ff fc51 	bl	d4390 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4aee:	4b01      	ldr	r3, [pc, #4]	; (d4af4 <_post_loop+0x10>)
   d4af0:	6018      	str	r0, [r3, #0]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	2003e730 	.word	0x2003e730

000d4af8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4af8:	4802      	ldr	r0, [pc, #8]	; (d4b04 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4afa:	4a03      	ldr	r2, [pc, #12]	; (d4b08 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4afc:	4903      	ldr	r1, [pc, #12]	; (d4b0c <_Z33system_initialize_user_backup_ramv+0x14>)
   d4afe:	1a12      	subs	r2, r2, r0
   d4b00:	f002 bc18 	b.w	d7334 <memcpy>
   d4b04:	2003f400 	.word	0x2003f400
   d4b08:	2003f404 	.word	0x2003f404
   d4b0c:	000d7740 	.word	0x000d7740

000d4b10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4b10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b12:	2300      	movs	r3, #0
   d4b14:	9300      	str	r3, [sp, #0]
   d4b16:	461a      	mov	r2, r3
   d4b18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b1c:	f7ff fd32 	bl	d4584 <system_ctrl_set_result>
}
   d4b20:	b003      	add	sp, #12
   d4b22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4b28 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4b28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4b2a:	8843      	ldrh	r3, [r0, #2]
   d4b2c:	2b0a      	cmp	r3, #10
   d4b2e:	d008      	beq.n	d4b42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4b30:	2b50      	cmp	r3, #80	; 0x50
   d4b32:	d109      	bne.n	d4b48 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4b34:	4b09      	ldr	r3, [pc, #36]	; (d4b5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4b36:	681b      	ldr	r3, [r3, #0]
   d4b38:	b13b      	cbz	r3, d4b4a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4b3a:	b003      	add	sp, #12
   d4b3c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4b40:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4b42:	f7ff ffe5 	bl	d4b10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4b46:	e006      	b.n	d4b56 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b48:	2300      	movs	r3, #0
   d4b4a:	9300      	str	r3, [sp, #0]
   d4b4c:	461a      	mov	r2, r3
   d4b4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b52:	f7ff fd17 	bl	d4584 <system_ctrl_set_result>
        break;
    }
}
   d4b56:	b003      	add	sp, #12
   d4b58:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b5c:	2003e3fc 	.word	0x2003e3fc

000d4b60 <module_user_init_hook>:

void module_user_init_hook()
{
   d4b60:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4b62:	4c10      	ldr	r4, [pc, #64]	; (d4ba4 <module_user_init_hook+0x44>)
   d4b64:	4d10      	ldr	r5, [pc, #64]	; (d4ba8 <module_user_init_hook+0x48>)
   d4b66:	6823      	ldr	r3, [r4, #0]
   d4b68:	42ab      	cmp	r3, r5
   d4b6a:	4b10      	ldr	r3, [pc, #64]	; (d4bac <module_user_init_hook+0x4c>)
   d4b6c:	bf0c      	ite	eq
   d4b6e:	2201      	moveq	r2, #1
   d4b70:	2200      	movne	r2, #0
   d4b72:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4b74:	d002      	beq.n	d4b7c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4b76:	f7ff ffbf 	bl	d4af8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4b7a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4b7c:	f7ff fc00 	bl	d4380 <HAL_RNG_GetRandomNumber>
   d4b80:	4604      	mov	r4, r0
    srand(seed);
   d4b82:	f002 fbeb 	bl	d735c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4b86:	4b0a      	ldr	r3, [pc, #40]	; (d4bb0 <module_user_init_hook+0x50>)
   d4b88:	b113      	cbz	r3, d4b90 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4b8a:	4620      	mov	r0, r4
   d4b8c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4b90:	2100      	movs	r1, #0
   d4b92:	4807      	ldr	r0, [pc, #28]	; (d4bb0 <module_user_init_hook+0x50>)
   d4b94:	f7ff fd50 	bl	d4638 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b98:	2100      	movs	r1, #0
   d4b9a:	4806      	ldr	r0, [pc, #24]	; (d4bb4 <module_user_init_hook+0x54>)
}
   d4b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ba0:	f7ff bce6 	b.w	d4570 <system_ctrl_set_app_request_handler>
   d4ba4:	2003f400 	.word	0x2003f400
   d4ba8:	9a271c1e 	.word	0x9a271c1e
   d4bac:	2003e400 	.word	0x2003e400
   d4bb0:	00000000 	.word	0x00000000
   d4bb4:	000d4b29 	.word	0x000d4b29

000d4bb8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4bb8:	4770      	bx	lr

000d4bba <_ZN9IPAddressD0Ev>:
   d4bba:	b510      	push	{r4, lr}
   d4bbc:	2118      	movs	r1, #24
   d4bbe:	4604      	mov	r4, r0
   d4bc0:	f000 fc14 	bl	d53ec <_ZdlPvj>
   d4bc4:	4620      	mov	r0, r4
   d4bc6:	bd10      	pop	{r4, pc}

000d4bc8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4bca:	7d03      	ldrb	r3, [r0, #20]
   d4bcc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4bce:	b08d      	sub	sp, #52	; 0x34
   d4bd0:	460e      	mov	r6, r1
   d4bd2:	f100 0704 	add.w	r7, r0, #4
   d4bd6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4bda:	d002      	beq.n	d4be2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4bdc:	f100 0508 	add.w	r5, r0, #8
   d4be0:	e018      	b.n	d4c14 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4be2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4be4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4be6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4bea:	232f      	movs	r3, #47	; 0x2f
   d4bec:	462a      	mov	r2, r5
   d4bee:	200a      	movs	r0, #10
   d4bf0:	f7ff fbfe 	bl	d43f0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4bf4:	4628      	mov	r0, r5
   d4bf6:	f002 fbd9 	bl	d73ac <strlen>
   d4bfa:	6833      	ldr	r3, [r6, #0]
   d4bfc:	4602      	mov	r2, r0
   d4bfe:	68db      	ldr	r3, [r3, #12]
   d4c00:	4629      	mov	r1, r5
   d4c02:	4630      	mov	r0, r6
   d4c04:	4798      	blx	r3
   d4c06:	e00f      	b.n	d4c28 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4c08:	b124      	cbz	r4, d4c14 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4c0a:	212e      	movs	r1, #46	; 0x2e
   d4c0c:	4630      	mov	r0, r6
   d4c0e:	f7ff fdf9 	bl	d4804 <_ZN5Print5printEc>
   d4c12:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c18:	220a      	movs	r2, #10
   d4c1a:	4630      	mov	r0, r6
   d4c1c:	f7ff fe0b 	bl	d4836 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c20:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c22:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c24:	d1f0      	bne.n	d4c08 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c26:	4620      	mov	r0, r4
    }
    return n;
}
   d4c28:	b00d      	add	sp, #52	; 0x34
   d4c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c2c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4c2c:	b510      	push	{r4, lr}
   d4c2e:	4b05      	ldr	r3, [pc, #20]	; (d4c44 <_ZN9IPAddressC1Ev+0x18>)
   d4c30:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4c32:	2211      	movs	r2, #17
   d4c34:	f840 3b04 	str.w	r3, [r0], #4
   d4c38:	2100      	movs	r1, #0
   d4c3a:	f002 fb86 	bl	d734a <memset>
{
    clear();
}
   d4c3e:	4620      	mov	r0, r4
   d4c40:	bd10      	pop	{r4, pc}
   d4c42:	bf00      	nop
   d4c44:	000d754c 	.word	0x000d754c

000d4c48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4c48:	4603      	mov	r3, r0
   d4c4a:	4a07      	ldr	r2, [pc, #28]	; (d4c68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4c4c:	b510      	push	{r4, lr}
   d4c4e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4c52:	f101 0210 	add.w	r2, r1, #16
   d4c56:	f851 4b04 	ldr.w	r4, [r1], #4
   d4c5a:	f843 4b04 	str.w	r4, [r3], #4
   d4c5e:	4291      	cmp	r1, r2
   d4c60:	d1f9      	bne.n	d4c56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4c62:	780a      	ldrb	r2, [r1, #0]
   d4c64:	701a      	strb	r2, [r3, #0]
}
   d4c66:	bd10      	pop	{r4, pc}
   d4c68:	000d754c 	.word	0x000d754c

000d4c6c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4c6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4c6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4c72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4c76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4c7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4c7e:	2304      	movs	r3, #4
   d4c80:	6041      	str	r1, [r0, #4]
   d4c82:	7503      	strb	r3, [r0, #20]
   d4c84:	bd10      	pop	{r4, pc}

000d4c86 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4c86:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4c88:	780d      	ldrb	r5, [r1, #0]
   d4c8a:	788b      	ldrb	r3, [r1, #2]
   d4c8c:	784a      	ldrb	r2, [r1, #1]
   d4c8e:	78c9      	ldrb	r1, [r1, #3]
   d4c90:	9100      	str	r1, [sp, #0]
   d4c92:	4629      	mov	r1, r5
   d4c94:	f7ff ffea 	bl	d4c6c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4c98:	b003      	add	sp, #12
   d4c9a:	bd30      	pop	{r4, r5, pc}

000d4c9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4c9c:	7441      	strb	r1, [r0, #17]
   d4c9e:	4770      	bx	lr

000d4ca0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4ca0:	4770      	bx	lr

000d4ca2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4ca2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4ca4:	2100      	movs	r1, #0
   d4ca6:	7c00      	ldrb	r0, [r0, #16]
   d4ca8:	f7ff fc42 	bl	d4530 <HAL_USB_USART_Receive_Data>
}
   d4cac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4cb0:	bf28      	it	cs
   d4cb2:	f04f 30ff 	movcs.w	r0, #4294967295
   d4cb6:	bd08      	pop	{r3, pc}

000d4cb8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4cb8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4cba:	2101      	movs	r1, #1
   d4cbc:	7c00      	ldrb	r0, [r0, #16]
   d4cbe:	f7ff fc37 	bl	d4530 <HAL_USB_USART_Receive_Data>
}
   d4cc2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4cc6:	bf28      	it	cs
   d4cc8:	f04f 30ff 	movcs.w	r0, #4294967295
   d4ccc:	bd08      	pop	{r3, pc}

000d4cce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4cce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4cd0:	7c00      	ldrb	r0, [r0, #16]
   d4cd2:	f7ff fc25 	bl	d4520 <HAL_USB_USART_Available_Data_For_Write>
}
   d4cd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4cda:	bd08      	pop	{r3, pc}

000d4cdc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4cdc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4cde:	7c00      	ldrb	r0, [r0, #16]
   d4ce0:	f7ff fc16 	bl	d4510 <HAL_USB_USART_Available_Data>
}
   d4ce4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ce8:	bd08      	pop	{r3, pc}

000d4cea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4cea:	7c00      	ldrb	r0, [r0, #16]
   d4cec:	f7ff bc30 	b.w	d4550 <HAL_USB_USART_Flush_Data>

000d4cf0 <_ZN9USBSerialD0Ev>:
   d4cf0:	b510      	push	{r4, lr}
   d4cf2:	2114      	movs	r1, #20
   d4cf4:	4604      	mov	r4, r0
   d4cf6:	f000 fb79 	bl	d53ec <_ZdlPvj>
   d4cfa:	4620      	mov	r0, r4
   d4cfc:	bd10      	pop	{r4, pc}

000d4cfe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4cfe:	b538      	push	{r3, r4, r5, lr}
   d4d00:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4d02:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4d04:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4d06:	f7ff fc0b 	bl	d4520 <HAL_USB_USART_Available_Data_For_Write>
   d4d0a:	2800      	cmp	r0, #0
   d4d0c:	dc01      	bgt.n	d4d12 <_ZN9USBSerial5writeEh+0x14>
   d4d0e:	7c60      	ldrb	r0, [r4, #17]
   d4d10:	b128      	cbz	r0, d4d1e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4d12:	4629      	mov	r1, r5
   d4d14:	7c20      	ldrb	r0, [r4, #16]
   d4d16:	f7ff fc13 	bl	d4540 <HAL_USB_USART_Send_Data>
   d4d1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4d1e:	bd38      	pop	{r3, r4, r5, pc}

000d4d20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4d20:	b510      	push	{r4, lr}
   d4d22:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d24:	2300      	movs	r3, #0
   d4d26:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d2c:	60a3      	str	r3, [r4, #8]
   d4d2e:	4b05      	ldr	r3, [pc, #20]	; (d4d44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4d30:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4d32:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4d34:	4608      	mov	r0, r1
{
  _serial = serial;
   d4d36:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4d38:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4d3a:	4611      	mov	r1, r2
   d4d3c:	f7ff fbd8 	bl	d44f0 <HAL_USB_USART_Init>
}
   d4d40:	4620      	mov	r0, r4
   d4d42:	bd10      	pop	{r4, pc}
   d4d44:	000d7560 	.word	0x000d7560

000d4d48 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4d48:	2200      	movs	r2, #0
   d4d4a:	7c00      	ldrb	r0, [r0, #16]
   d4d4c:	f7ff bbd8 	b.w	d4500 <HAL_USB_USART_Begin>

000d4d50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4d50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4d52:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4d54:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4d56:	2100      	movs	r1, #0
   d4d58:	f002 faf7 	bl	d734a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	bd10      	pop	{r4, pc}

000d4d60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4d60:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4d62:	4d0e      	ldr	r5, [pc, #56]	; (d4d9c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4d64:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4d66:	a801      	add	r0, sp, #4
   d4d68:	f7ff fff2 	bl	d4d50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4d6c:	6829      	ldr	r1, [r5, #0]
   d4d6e:	f011 0401 	ands.w	r4, r1, #1
   d4d72:	d110      	bne.n	d4d96 <_Z16_fetch_usbserialv+0x36>
   d4d74:	4628      	mov	r0, r5
   d4d76:	f7ff f994 	bl	d40a2 <__cxa_guard_acquire>
   d4d7a:	b160      	cbz	r0, d4d96 <_Z16_fetch_usbserialv+0x36>
   d4d7c:	aa01      	add	r2, sp, #4
   d4d7e:	4621      	mov	r1, r4
   d4d80:	4807      	ldr	r0, [pc, #28]	; (d4da0 <_Z16_fetch_usbserialv+0x40>)
   d4d82:	f7ff ffcd 	bl	d4d20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4d86:	4628      	mov	r0, r5
   d4d88:	f7ff f990 	bl	d40ac <__cxa_guard_release>
   d4d8c:	4a05      	ldr	r2, [pc, #20]	; (d4da4 <_Z16_fetch_usbserialv+0x44>)
   d4d8e:	4906      	ldr	r1, [pc, #24]	; (d4da8 <_Z16_fetch_usbserialv+0x48>)
   d4d90:	4803      	ldr	r0, [pc, #12]	; (d4da0 <_Z16_fetch_usbserialv+0x40>)
   d4d92:	f000 fb1d 	bl	d53d0 <__aeabi_atexit>
	return _usbserial;
}
   d4d96:	4802      	ldr	r0, [pc, #8]	; (d4da0 <_Z16_fetch_usbserialv+0x40>)
   d4d98:	b007      	add	sp, #28
   d4d9a:	bd30      	pop	{r4, r5, pc}
   d4d9c:	2003e404 	.word	0x2003e404
   d4da0:	2003e408 	.word	0x2003e408
   d4da4:	2003e3b4 	.word	0x2003e3b4
   d4da8:	000d4ca1 	.word	0x000d4ca1

000d4dac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4dac:	4770      	bx	lr

000d4dae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4dae:	7441      	strb	r1, [r0, #17]
   d4db0:	4770      	bx	lr

000d4db2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4db2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4db4:	7c00      	ldrb	r0, [r0, #16]
   d4db6:	f7ff fb5b 	bl	d4470 <HAL_USART_Available_Data_For_Write>
}
   d4dba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4dbe:	bd08      	pop	{r3, pc}

000d4dc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4dc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4dc2:	7c00      	ldrb	r0, [r0, #16]
   d4dc4:	f7ff fb2c 	bl	d4420 <HAL_USART_Available_Data>
}
   d4dc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4dcc:	bd08      	pop	{r3, pc}

000d4dce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4dce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4dd0:	7c00      	ldrb	r0, [r0, #16]
   d4dd2:	f7ff fb35 	bl	d4440 <HAL_USART_Peek_Data>
}
   d4dd6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dda:	bf28      	it	cs
   d4ddc:	f04f 30ff 	movcs.w	r0, #4294967295
   d4de0:	bd08      	pop	{r3, pc}

000d4de2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4de2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4de4:	7c00      	ldrb	r0, [r0, #16]
   d4de6:	f7ff fb23 	bl	d4430 <HAL_USART_Read_Data>
}
   d4dea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dee:	bf28      	it	cs
   d4df0:	f04f 30ff 	movcs.w	r0, #4294967295
   d4df4:	bd08      	pop	{r3, pc}

000d4df6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4df6:	7c00      	ldrb	r0, [r0, #16]
   d4df8:	f7ff bb2a 	b.w	d4450 <HAL_USART_Flush_Data>

000d4dfc <_ZN11USARTSerialD0Ev>:
   d4dfc:	b510      	push	{r4, lr}
   d4dfe:	2114      	movs	r1, #20
   d4e00:	4604      	mov	r4, r0
   d4e02:	f000 faf3 	bl	d53ec <_ZdlPvj>
   d4e06:	4620      	mov	r0, r4
   d4e08:	bd10      	pop	{r4, pc}

000d4e0a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4e0a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e0c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4e0e:	4604      	mov	r4, r0
   d4e10:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e12:	b925      	cbnz	r5, d4e1e <_ZN11USARTSerial5writeEh+0x14>
   d4e14:	7c00      	ldrb	r0, [r0, #16]
   d4e16:	f7ff fb2b 	bl	d4470 <HAL_USART_Available_Data_For_Write>
   d4e1a:	2800      	cmp	r0, #0
   d4e1c:	dd05      	ble.n	d4e2a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e1e:	4631      	mov	r1, r6
   d4e20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e26:	f7ff baf3 	b.w	d4410 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4e2a:	4628      	mov	r0, r5
   d4e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4e30:	b510      	push	{r4, lr}
   d4e32:	4604      	mov	r4, r0
   d4e34:	4608      	mov	r0, r1
   d4e36:	4611      	mov	r1, r2
   d4e38:	2200      	movs	r2, #0
   d4e3a:	6062      	str	r2, [r4, #4]
   d4e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e40:	60a2      	str	r2, [r4, #8]
   d4e42:	4a05      	ldr	r2, [pc, #20]	; (d4e58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4e44:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4e46:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4e48:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4e4a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4e4c:	461a      	mov	r2, r3
   d4e4e:	f7ff fad7 	bl	d4400 <HAL_USART_Init>
}
   d4e52:	4620      	mov	r0, r4
   d4e54:	bd10      	pop	{r4, pc}
   d4e56:	bf00      	nop
   d4e58:	000d7590 	.word	0x000d7590

000d4e5c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4e5c:	7c00      	ldrb	r0, [r0, #16]
   d4e5e:	f7ff baff 	b.w	d4460 <HAL_USART_Is_Enabled>
	...

000d4e64 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e64:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4e66:	4d0c      	ldr	r5, [pc, #48]	; (d4e98 <_Z22__fetch_global_Serial1v+0x34>)
   d4e68:	6829      	ldr	r1, [r5, #0]
   d4e6a:	f011 0401 	ands.w	r4, r1, #1
   d4e6e:	d111      	bne.n	d4e94 <_Z22__fetch_global_Serial1v+0x30>
   d4e70:	4628      	mov	r0, r5
   d4e72:	f7ff f916 	bl	d40a2 <__cxa_guard_acquire>
   d4e76:	b168      	cbz	r0, d4e94 <_Z22__fetch_global_Serial1v+0x30>
   d4e78:	4a08      	ldr	r2, [pc, #32]	; (d4e9c <_Z22__fetch_global_Serial1v+0x38>)
   d4e7a:	4b09      	ldr	r3, [pc, #36]	; (d4ea0 <_Z22__fetch_global_Serial1v+0x3c>)
   d4e7c:	4809      	ldr	r0, [pc, #36]	; (d4ea4 <_Z22__fetch_global_Serial1v+0x40>)
   d4e7e:	4621      	mov	r1, r4
   d4e80:	f7ff ffd6 	bl	d4e30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4e84:	4628      	mov	r0, r5
   d4e86:	f7ff f911 	bl	d40ac <__cxa_guard_release>
   d4e8a:	4a07      	ldr	r2, [pc, #28]	; (d4ea8 <_Z22__fetch_global_Serial1v+0x44>)
   d4e8c:	4907      	ldr	r1, [pc, #28]	; (d4eac <_Z22__fetch_global_Serial1v+0x48>)
   d4e8e:	4805      	ldr	r0, [pc, #20]	; (d4ea4 <_Z22__fetch_global_Serial1v+0x40>)
   d4e90:	f000 fa9e 	bl	d53d0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4e94:	4803      	ldr	r0, [pc, #12]	; (d4ea4 <_Z22__fetch_global_Serial1v+0x40>)
   d4e96:	bd38      	pop	{r3, r4, r5, pc}
   d4e98:	2003e4b4 	.word	0x2003e4b4
   d4e9c:	2003e4b8 	.word	0x2003e4b8
   d4ea0:	2003e430 	.word	0x2003e430
   d4ea4:	2003e41c 	.word	0x2003e41c
   d4ea8:	2003e3b4 	.word	0x2003e3b4
   d4eac:	000d4dad 	.word	0x000d4dad

000d4eb0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4eb0:	4770      	bx	lr

000d4eb2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4eb4:	4606      	mov	r6, r0
   d4eb6:	4615      	mov	r5, r2
   d4eb8:	460c      	mov	r4, r1
   d4eba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ebc:	42bc      	cmp	r4, r7
   d4ebe:	d006      	beq.n	d4ece <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4ec0:	6833      	ldr	r3, [r6, #0]
   d4ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4ec6:	689b      	ldr	r3, [r3, #8]
   d4ec8:	4630      	mov	r0, r6
   d4eca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ecc:	e7f6      	b.n	d4ebc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4ece:	4628      	mov	r0, r5
   d4ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ed2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4ed2:	2200      	movs	r2, #0
   d4ed4:	7c00      	ldrb	r0, [r0, #16]
   d4ed6:	f7ff bad3 	b.w	d4480 <HAL_I2C_Write_Data>

000d4eda <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4eda:	2100      	movs	r1, #0
   d4edc:	7c00      	ldrb	r0, [r0, #16]
   d4ede:	f7ff bad7 	b.w	d4490 <HAL_I2C_Available_Data>

000d4ee2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4ee2:	2100      	movs	r1, #0
   d4ee4:	7c00      	ldrb	r0, [r0, #16]
   d4ee6:	f7ff badb 	b.w	d44a0 <HAL_I2C_Read_Data>

000d4eea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4eea:	2100      	movs	r1, #0
   d4eec:	7c00      	ldrb	r0, [r0, #16]
   d4eee:	f7ff badf 	b.w	d44b0 <HAL_I2C_Peek_Data>

000d4ef2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4ef2:	2100      	movs	r1, #0
   d4ef4:	7c00      	ldrb	r0, [r0, #16]
   d4ef6:	f7ff bae3 	b.w	d44c0 <HAL_I2C_Flush_Data>

000d4efa <_ZN7TwoWireD0Ev>:
   d4efa:	b510      	push	{r4, lr}
   d4efc:	2114      	movs	r1, #20
   d4efe:	4604      	mov	r4, r0
   d4f00:	f000 fa74 	bl	d53ec <_ZdlPvj>
   d4f04:	4620      	mov	r0, r4
   d4f06:	bd10      	pop	{r4, pc}

000d4f08 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4f08:	b510      	push	{r4, lr}
   d4f0a:	4604      	mov	r4, r0
   d4f0c:	2300      	movs	r3, #0
   d4f0e:	6063      	str	r3, [r4, #4]
   d4f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f14:	60a3      	str	r3, [r4, #8]
   d4f16:	4b04      	ldr	r3, [pc, #16]	; (d4f28 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4f18:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4f1a:	4608      	mov	r0, r1
   d4f1c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4f1e:	4611      	mov	r1, r2
   d4f20:	f7ff fade 	bl	d44e0 <HAL_I2C_Init>
}
   d4f24:	4620      	mov	r0, r4
   d4f26:	bd10      	pop	{r4, pc}
   d4f28:	000d75c0 	.word	0x000d75c0

000d4f2c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4f2c:	2100      	movs	r1, #0
   d4f2e:	7c00      	ldrb	r0, [r0, #16]
   d4f30:	f7ff bace 	b.w	d44d0 <HAL_I2C_Is_Enabled>

000d4f34 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f34:	2200      	movs	r2, #0
   d4f36:	4611      	mov	r1, r2
   d4f38:	6840      	ldr	r0, [r0, #4]
   d4f3a:	f7ff bb65 	b.w	d4608 <network_listening>

000d4f3e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f3e:	2200      	movs	r2, #0
   d4f40:	4611      	mov	r1, r2
   d4f42:	6840      	ldr	r0, [r0, #4]
   d4f44:	f7ff bb70 	b.w	d4628 <network_get_listen_timeout>

000d4f48 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f48:	2200      	movs	r2, #0
   d4f4a:	6840      	ldr	r0, [r0, #4]
   d4f4c:	f7ff bb64 	b.w	d4618 <network_set_listen_timeout>

000d4f50 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f50:	2200      	movs	r2, #0
   d4f52:	f081 0101 	eor.w	r1, r1, #1
   d4f56:	6840      	ldr	r0, [r0, #4]
   d4f58:	f7ff bb4e 	b.w	d45f8 <network_listen>

000d4f5c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4f5c:	2300      	movs	r3, #0
   d4f5e:	461a      	mov	r2, r3
   d4f60:	2101      	movs	r1, #1
   d4f62:	6840      	ldr	r0, [r0, #4]
   d4f64:	f7ff bb40 	b.w	d45e8 <network_off>

000d4f68 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f68:	2300      	movs	r3, #0
   d4f6a:	461a      	mov	r2, r3
   d4f6c:	4619      	mov	r1, r3
   d4f6e:	6840      	ldr	r0, [r0, #4]
   d4f70:	f7ff bb32 	b.w	d45d8 <network_on>

000d4f74 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f74:	2200      	movs	r2, #0
   d4f76:	4611      	mov	r1, r2
   d4f78:	6840      	ldr	r0, [r0, #4]
   d4f7a:	f7ff bb25 	b.w	d45c8 <network_ready>

000d4f7e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f7e:	2200      	movs	r2, #0
   d4f80:	4611      	mov	r1, r2
   d4f82:	6840      	ldr	r0, [r0, #4]
   d4f84:	f7ff bb10 	b.w	d45a8 <network_connecting>

000d4f88 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f88:	2200      	movs	r2, #0
   d4f8a:	2102      	movs	r1, #2
   d4f8c:	6840      	ldr	r0, [r0, #4]
   d4f8e:	f7ff bb13 	b.w	d45b8 <network_disconnect>

000d4f92 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f92:	2300      	movs	r3, #0
   d4f94:	461a      	mov	r2, r3
   d4f96:	6840      	ldr	r0, [r0, #4]
   d4f98:	f7ff bafe 	b.w	d4598 <network_connect>

000d4f9c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4f9c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f9e:	4605      	mov	r5, r0
   d4fa0:	b188      	cbz	r0, d4fc6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4fa2:	6804      	ldr	r4, [r0, #0]
   d4fa4:	b14c      	cbz	r4, d4fba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4fa6:	68a3      	ldr	r3, [r4, #8]
   d4fa8:	b11b      	cbz	r3, d4fb2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4faa:	2203      	movs	r2, #3
   d4fac:	4621      	mov	r1, r4
   d4fae:	4620      	mov	r0, r4
   d4fb0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4fb2:	2110      	movs	r1, #16
   d4fb4:	4620      	mov	r0, r4
   d4fb6:	f000 fa19 	bl	d53ec <_ZdlPvj>
   d4fba:	4628      	mov	r0, r5
   d4fbc:	2114      	movs	r1, #20
      }
   d4fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4fc2:	f000 ba13 	b.w	d53ec <_ZdlPvj>
   d4fc6:	bd38      	pop	{r3, r4, r5, pc}

000d4fc8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4fc8:	b110      	cbz	r0, d4fd0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4fca:	6803      	ldr	r3, [r0, #0]
   d4fcc:	685b      	ldr	r3, [r3, #4]
   d4fce:	4718      	bx	r3
   d4fd0:	4770      	bx	lr

000d4fd2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4fd2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4fd4:	6803      	ldr	r3, [r0, #0]
   d4fd6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4fd8:	b1bb      	cbz	r3, d500a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4fda:	6858      	ldr	r0, [r3, #4]
   d4fdc:	f7ff f9e0 	bl	d43a0 <os_thread_is_current>
   d4fe0:	b978      	cbnz	r0, d5002 <_ZN6ThreadD1Ev+0x30>
   d4fe2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4fe4:	7c5a      	ldrb	r2, [r3, #17]
   d4fe6:	b912      	cbnz	r2, d4fee <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4fe8:	6858      	ldr	r0, [r3, #4]
   d4fea:	f7ff f9e1 	bl	d43b0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4fee:	6823      	ldr	r3, [r4, #0]
   d4ff0:	6858      	ldr	r0, [r3, #4]
   d4ff2:	f7ff f9e5 	bl	d43c0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ff6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4ff8:	2300      	movs	r3, #0
   d4ffa:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4ffc:	b128      	cbz	r0, d500a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4ffe:	f7ff ffcd 	bl	d4f9c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5002:	6820      	ldr	r0, [r4, #0]
   d5004:	b108      	cbz	r0, d500a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5006:	f7ff ffc9 	bl	d4f9c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d500a:	4620      	mov	r0, r4
   d500c:	bd10      	pop	{r4, pc}

000d500e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d500e:	b538      	push	{r3, r4, r5, lr}
   d5010:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5012:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5016:	b108      	cbz	r0, d501c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5018:	f7ff f841 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d501c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5020:	b108      	cbz	r0, d5026 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5022:	f7ff f9dd 	bl	d43e0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5026:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d502a:	b135      	cbz	r5, d503a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d502c:	4628      	mov	r0, r5
   d502e:	f7ff ffd0 	bl	d4fd2 <_ZN6ThreadD1Ev>
   d5032:	2104      	movs	r1, #4
   d5034:	4628      	mov	r0, r5
   d5036:	f000 f9d9 	bl	d53ec <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d503a:	6820      	ldr	r0, [r4, #0]
   d503c:	b108      	cbz	r0, d5042 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d503e:	f7ff ffc3 	bl	d4fc8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5042:	4620      	mov	r0, r4
   d5044:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5048 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5048:	b510      	push	{r4, lr}
   d504a:	4b04      	ldr	r3, [pc, #16]	; (d505c <_ZN5spark9MeshClassD1Ev+0x14>)
   d504c:	4604      	mov	r4, r0
   d504e:	f840 3b08 	str.w	r3, [r0], #8
   d5052:	f7ff ffdc 	bl	d500e <_ZN5spark11MeshPublishD1Ev>
   d5056:	4620      	mov	r0, r4
   d5058:	bd10      	pop	{r4, pc}
   d505a:	bf00      	nop
   d505c:	000d75e8 	.word	0x000d75e8

000d5060 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5060:	b538      	push	{r3, r4, r5, lr}
   d5062:	4c0e      	ldr	r4, [pc, #56]	; (d509c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5064:	4b0e      	ldr	r3, [pc, #56]	; (d50a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5066:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5068:	2500      	movs	r5, #0
   d506a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d506c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5070:	6063      	str	r3, [r4, #4]
   d5072:	60a5      	str	r5, [r4, #8]
   d5074:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5078:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d507c:	f7ff f9a8 	bl	d43d0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5080:	4b08      	ldr	r3, [pc, #32]	; (d50a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5082:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5086:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d508a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d508c:	4620      	mov	r0, r4
   d508e:	4a06      	ldr	r2, [pc, #24]	; (d50a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5090:	4906      	ldr	r1, [pc, #24]	; (d50ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5096:	f000 b99b 	b.w	d53d0 <__aeabi_atexit>
   d509a:	bf00      	nop
   d509c:	2003e53c 	.word	0x2003e53c
   d50a0:	000d7650 	.word	0x000d7650
   d50a4:	000d75e8 	.word	0x000d75e8
   d50a8:	2003e3b4 	.word	0x2003e3b4
   d50ac:	000d5049 	.word	0x000d5049

000d50b0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d50b0:	2200      	movs	r2, #0
   d50b2:	4611      	mov	r1, r2
   d50b4:	6840      	ldr	r0, [r0, #4]
   d50b6:	f7ff ba87 	b.w	d45c8 <network_ready>

000d50ba <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50ba:	2200      	movs	r2, #0
   d50bc:	4611      	mov	r1, r2
   d50be:	6840      	ldr	r0, [r0, #4]
   d50c0:	f7ff baa2 	b.w	d4608 <network_listening>

000d50c4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50c4:	2200      	movs	r2, #0
   d50c6:	4611      	mov	r1, r2
   d50c8:	6840      	ldr	r0, [r0, #4]
   d50ca:	f7ff baad 	b.w	d4628 <network_get_listen_timeout>

000d50ce <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50ce:	2200      	movs	r2, #0
   d50d0:	6840      	ldr	r0, [r0, #4]
   d50d2:	f7ff baa1 	b.w	d4618 <network_set_listen_timeout>

000d50d6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d50d6:	2200      	movs	r2, #0
   d50d8:	f081 0101 	eor.w	r1, r1, #1
   d50dc:	6840      	ldr	r0, [r0, #4]
   d50de:	f7ff ba8b 	b.w	d45f8 <network_listen>

000d50e2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d50e2:	2300      	movs	r3, #0
   d50e4:	461a      	mov	r2, r3
   d50e6:	4619      	mov	r1, r3
   d50e8:	6840      	ldr	r0, [r0, #4]
   d50ea:	f7ff ba7d 	b.w	d45e8 <network_off>

000d50ee <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d50ee:	2300      	movs	r3, #0
   d50f0:	461a      	mov	r2, r3
   d50f2:	4619      	mov	r1, r3
   d50f4:	6840      	ldr	r0, [r0, #4]
   d50f6:	f7ff ba6f 	b.w	d45d8 <network_on>

000d50fa <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50fa:	2200      	movs	r2, #0
   d50fc:	4611      	mov	r1, r2
   d50fe:	6840      	ldr	r0, [r0, #4]
   d5100:	f7ff ba52 	b.w	d45a8 <network_connecting>

000d5104 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5104:	2200      	movs	r2, #0
   d5106:	2102      	movs	r1, #2
   d5108:	6840      	ldr	r0, [r0, #4]
   d510a:	f7ff ba55 	b.w	d45b8 <network_disconnect>

000d510e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d510e:	2300      	movs	r3, #0
   d5110:	461a      	mov	r2, r3
   d5112:	6840      	ldr	r0, [r0, #4]
   d5114:	f7ff ba40 	b.w	d4598 <network_connect>

000d5118 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5118:	4b02      	ldr	r3, [pc, #8]	; (d5124 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d511a:	2204      	movs	r2, #4
   d511c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d511e:	4a02      	ldr	r2, [pc, #8]	; (d5128 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5120:	601a      	str	r2, [r3, #0]
   d5122:	4770      	bx	lr
   d5124:	2003e710 	.word	0x2003e710
   d5128:	000d761c 	.word	0x000d761c

000d512c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d512c:	2300      	movs	r3, #0
   d512e:	461a      	mov	r2, r3
   d5130:	6840      	ldr	r0, [r0, #4]
   d5132:	f7ff ba31 	b.w	d4598 <network_connect>

000d5136 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5136:	2200      	movs	r2, #0
   d5138:	2102      	movs	r1, #2
   d513a:	6840      	ldr	r0, [r0, #4]
   d513c:	f7ff ba3c 	b.w	d45b8 <network_disconnect>

000d5140 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5140:	2200      	movs	r2, #0
   d5142:	4611      	mov	r1, r2
   d5144:	6840      	ldr	r0, [r0, #4]
   d5146:	f7ff ba2f 	b.w	d45a8 <network_connecting>

000d514a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d514a:	2200      	movs	r2, #0
   d514c:	4611      	mov	r1, r2
   d514e:	6840      	ldr	r0, [r0, #4]
   d5150:	f7ff ba3a 	b.w	d45c8 <network_ready>

000d5154 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5154:	2300      	movs	r3, #0
   d5156:	461a      	mov	r2, r3
   d5158:	4619      	mov	r1, r3
   d515a:	6840      	ldr	r0, [r0, #4]
   d515c:	f7ff ba3c 	b.w	d45d8 <network_on>

000d5160 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5160:	2300      	movs	r3, #0
   d5162:	461a      	mov	r2, r3
   d5164:	4619      	mov	r1, r3
   d5166:	6840      	ldr	r0, [r0, #4]
   d5168:	f7ff ba3e 	b.w	d45e8 <network_off>

000d516c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d516c:	2200      	movs	r2, #0
   d516e:	f081 0101 	eor.w	r1, r1, #1
   d5172:	6840      	ldr	r0, [r0, #4]
   d5174:	f7ff ba40 	b.w	d45f8 <network_listen>

000d5178 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5178:	2200      	movs	r2, #0
   d517a:	6840      	ldr	r0, [r0, #4]
   d517c:	f7ff ba4c 	b.w	d4618 <network_set_listen_timeout>

000d5180 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5180:	2200      	movs	r2, #0
   d5182:	4611      	mov	r1, r2
   d5184:	6840      	ldr	r0, [r0, #4]
   d5186:	f7ff ba4f 	b.w	d4628 <network_get_listen_timeout>

000d518a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d518a:	2200      	movs	r2, #0
   d518c:	4611      	mov	r1, r2
   d518e:	6840      	ldr	r0, [r0, #4]
   d5190:	f7ff ba3a 	b.w	d4608 <network_listening>

000d5194 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5198:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d519a:	b095      	sub	sp, #84	; 0x54
   d519c:	4616      	mov	r6, r2
   d519e:	460d      	mov	r5, r1
   d51a0:	4607      	mov	r7, r0
    IPAddress addr;
   d51a2:	f7ff fd43 	bl	d4c2c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d51a6:	4621      	mov	r1, r4
   d51a8:	2220      	movs	r2, #32
   d51aa:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d51ac:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d51ae:	f002 f8cc 	bl	d734a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d51b2:	2340      	movs	r3, #64	; 0x40
   d51b4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d51b6:	4621      	mov	r1, r4
   d51b8:	466b      	mov	r3, sp
   d51ba:	aa0c      	add	r2, sp, #48	; 0x30
   d51bc:	4630      	mov	r0, r6
   d51be:	f7ff f89f 	bl	d4300 <netdb_getaddrinfo>
    if (!r) {
   d51c2:	4604      	mov	r4, r0
   d51c4:	2800      	cmp	r0, #0
   d51c6:	d144      	bne.n	d5252 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d51c8:	4602      	mov	r2, r0
   d51ca:	2101      	movs	r1, #1
   d51cc:	6868      	ldr	r0, [r5, #4]
   d51ce:	f7ff f9fb 	bl	d45c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d51d2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d51d4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d51d6:	4622      	mov	r2, r4
   d51d8:	6868      	ldr	r0, [r5, #4]
   d51da:	f7ff f9f5 	bl	d45c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d51de:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d51e0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d51e2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d51e4:	2e00      	cmp	r6, #0
   d51e6:	d034      	beq.n	d5252 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d51e8:	2900      	cmp	r1, #0
   d51ea:	d132      	bne.n	d5252 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d51ec:	6873      	ldr	r3, [r6, #4]
   d51ee:	2b02      	cmp	r3, #2
   d51f0:	d002      	beq.n	d51f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d51f2:	2b0a      	cmp	r3, #10
   d51f4:	d009      	beq.n	d520a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d51f6:	e02a      	b.n	d524e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d51f8:	f1b8 0f00 	cmp.w	r8, #0
   d51fc:	d027      	beq.n	d524e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d51fe:	6971      	ldr	r1, [r6, #20]
   d5200:	4638      	mov	r0, r7
   d5202:	3104      	adds	r1, #4
   d5204:	f7ff fd3f 	bl	d4c86 <_ZN9IPAddressaSEPKh>
   d5208:	e020      	b.n	d524c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d520a:	f1b9 0f00 	cmp.w	r9, #0
   d520e:	d01e      	beq.n	d524e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5210:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5212:	2211      	movs	r2, #17
   d5214:	a801      	add	r0, sp, #4
   d5216:	f002 f898 	bl	d734a <memset>
                    a.v = 6;
   d521a:	2306      	movs	r3, #6
   d521c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5220:	ad01      	add	r5, sp, #4
   d5222:	f104 0308 	add.w	r3, r4, #8
   d5226:	3418      	adds	r4, #24
   d5228:	6818      	ldr	r0, [r3, #0]
   d522a:	6859      	ldr	r1, [r3, #4]
   d522c:	462a      	mov	r2, r5
   d522e:	c203      	stmia	r2!, {r0, r1}
   d5230:	3308      	adds	r3, #8
   d5232:	42a3      	cmp	r3, r4
   d5234:	4615      	mov	r5, r2
   d5236:	d1f7      	bne.n	d5228 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5238:	a901      	add	r1, sp, #4
   d523a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d523c:	ad07      	add	r5, sp, #28
   d523e:	f7ff fd03 	bl	d4c48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5244:	1d3c      	adds	r4, r7, #4
   d5246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5248:	682b      	ldr	r3, [r5, #0]
   d524a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d524c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d524e:	69f6      	ldr	r6, [r6, #28]
   d5250:	e7c8      	b.n	d51e4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5252:	9800      	ldr	r0, [sp, #0]
   d5254:	f7ff f84c 	bl	d42f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5258:	4638      	mov	r0, r7
   d525a:	b015      	add	sp, #84	; 0x54
   d525c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5260 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5260:	4b02      	ldr	r3, [pc, #8]	; (d526c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5262:	4a03      	ldr	r2, [pc, #12]	; (d5270 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5264:	601a      	str	r2, [r3, #0]
   d5266:	2200      	movs	r2, #0
   d5268:	605a      	str	r2, [r3, #4]
   d526a:	4770      	bx	lr
   d526c:	2003e718 	.word	0x2003e718
   d5270:	000d7650 	.word	0x000d7650

000d5274 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5274:	b510      	push	{r4, lr}
   d5276:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5278:	f000 f84a 	bl	d5310 <_ZN8particle7globals11instanceSpiEv>
   d527c:	f7ff fa50 	bl	d4720 <_ZN8SPIClass9isEnabledEv>
   d5280:	b128      	cbz	r0, d528e <pinAvailable+0x1a>
   d5282:	f1a4 030b 	sub.w	r3, r4, #11
   d5286:	2b02      	cmp	r3, #2
   d5288:	d801      	bhi.n	d528e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d528a:	2000      	movs	r0, #0
   d528c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d528e:	f000 f879 	bl	d5384 <_Z19__fetch_global_Wirev>
   d5292:	f7ff fe4b 	bl	d4f2c <_ZN7TwoWire9isEnabledEv>
   d5296:	b108      	cbz	r0, d529c <pinAvailable+0x28>
   d5298:	2c01      	cmp	r4, #1
   d529a:	d9f6      	bls.n	d528a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d529c:	f7ff fde2 	bl	d4e64 <_Z22__fetch_global_Serial1v>
   d52a0:	f7ff fddc 	bl	d4e5c <_ZN11USARTSerial9isEnabledEv>
   d52a4:	b118      	cbz	r0, d52ae <pinAvailable+0x3a>
   d52a6:	f1a4 0309 	sub.w	r3, r4, #9
   d52aa:	2b01      	cmp	r3, #1
   d52ac:	d9ed      	bls.n	d528a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d52ae:	2c23      	cmp	r4, #35	; 0x23
   d52b0:	bf8c      	ite	hi
   d52b2:	2000      	movhi	r0, #0
   d52b4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d52b6:	bd10      	pop	{r4, pc}

000d52b8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d52b8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d52ba:	b538      	push	{r3, r4, r5, lr}
   d52bc:	4604      	mov	r4, r0
   d52be:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d52c0:	d80a      	bhi.n	d52d8 <pinMode+0x20>
   d52c2:	29ff      	cmp	r1, #255	; 0xff
   d52c4:	d008      	beq.n	d52d8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d52c6:	f7ff ffd5 	bl	d5274 <pinAvailable>
   d52ca:	b128      	cbz	r0, d52d8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d52cc:	4629      	mov	r1, r5
   d52ce:	4620      	mov	r0, r4
}
   d52d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d52d4:	f7ff b824 	b.w	d4320 <HAL_Pin_Mode>
   d52d8:	bd38      	pop	{r3, r4, r5, pc}

000d52da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d52da:	b538      	push	{r3, r4, r5, lr}
   d52dc:	4604      	mov	r4, r0
   d52de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d52e0:	f7ff f826 	bl	d4330 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d52e4:	28ff      	cmp	r0, #255	; 0xff
   d52e6:	d010      	beq.n	d530a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d52e8:	2806      	cmp	r0, #6
   d52ea:	d804      	bhi.n	d52f6 <digitalWrite+0x1c>
   d52ec:	234d      	movs	r3, #77	; 0x4d
   d52ee:	fa23 f000 	lsr.w	r0, r3, r0
   d52f2:	07c3      	lsls	r3, r0, #31
   d52f4:	d409      	bmi.n	d530a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d52f6:	4620      	mov	r0, r4
   d52f8:	f7ff ffbc 	bl	d5274 <pinAvailable>
   d52fc:	b128      	cbz	r0, d530a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d52fe:	4629      	mov	r1, r5
   d5300:	4620      	mov	r0, r4
}
   d5302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5306:	f7ff b81b 	b.w	d4340 <HAL_GPIO_Write>
   d530a:	bd38      	pop	{r3, r4, r5, pc}

000d530c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d530c:	f7ff b820 	b.w	d4350 <HAL_Pulse_In>

000d5310 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d5310:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d5312:	4d0b      	ldr	r5, [pc, #44]	; (d5340 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5314:	6829      	ldr	r1, [r5, #0]
   d5316:	f011 0401 	ands.w	r4, r1, #1
   d531a:	d10f      	bne.n	d533c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d531c:	4628      	mov	r0, r5
   d531e:	f7fe fec0 	bl	d40a2 <__cxa_guard_acquire>
   d5322:	b158      	cbz	r0, d533c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5324:	4621      	mov	r1, r4
   d5326:	4807      	ldr	r0, [pc, #28]	; (d5344 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5328:	f7ff f9ec 	bl	d4704 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d532c:	4628      	mov	r0, r5
   d532e:	f7fe febd 	bl	d40ac <__cxa_guard_release>
   d5332:	4a05      	ldr	r2, [pc, #20]	; (d5348 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5334:	4905      	ldr	r1, [pc, #20]	; (d534c <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5336:	4803      	ldr	r0, [pc, #12]	; (d5344 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5338:	f000 f84a 	bl	d53d0 <__aeabi_atexit>
    return instance;
}
   d533c:	4801      	ldr	r0, [pc, #4]	; (d5344 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d533e:	bd38      	pop	{r3, r4, r5, pc}
   d5340:	2003e72c 	.word	0x2003e72c
   d5344:	2003e720 	.word	0x2003e720
   d5348:	2003e3b4 	.word	0x2003e3b4
   d534c:	000d46f5 	.word	0x000d46f5

000d5350 <_Z17acquireWireBufferv>:
   d5350:	b570      	push	{r4, r5, r6, lr}
   d5352:	4604      	mov	r4, r0
   d5354:	2514      	movs	r5, #20
   d5356:	462a      	mov	r2, r5
   d5358:	4e09      	ldr	r6, [pc, #36]	; (d5380 <_Z17acquireWireBufferv+0x30>)
   d535a:	2100      	movs	r1, #0
   d535c:	f001 fff5 	bl	d734a <memset>
   d5360:	8025      	strh	r5, [r4, #0]
   d5362:	2520      	movs	r5, #32
   d5364:	4631      	mov	r1, r6
   d5366:	60a5      	str	r5, [r4, #8]
   d5368:	6125      	str	r5, [r4, #16]
   d536a:	4628      	mov	r0, r5
   d536c:	f000 f840 	bl	d53f0 <_ZnajRKSt9nothrow_t>
   d5370:	4631      	mov	r1, r6
   d5372:	6060      	str	r0, [r4, #4]
   d5374:	4628      	mov	r0, r5
   d5376:	f000 f83b 	bl	d53f0 <_ZnajRKSt9nothrow_t>
   d537a:	60e0      	str	r0, [r4, #12]
   d537c:	4620      	mov	r0, r4
   d537e:	bd70      	pop	{r4, r5, r6, pc}
   d5380:	000d767c 	.word	0x000d767c

000d5384 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5384:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5386:	4d0e      	ldr	r5, [pc, #56]	; (d53c0 <_Z19__fetch_global_Wirev+0x3c>)
   d5388:	6829      	ldr	r1, [r5, #0]
   d538a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d538e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5390:	d113      	bne.n	d53ba <_Z19__fetch_global_Wirev+0x36>
   d5392:	4628      	mov	r0, r5
   d5394:	f7fe fe85 	bl	d40a2 <__cxa_guard_acquire>
   d5398:	b178      	cbz	r0, d53ba <_Z19__fetch_global_Wirev+0x36>
   d539a:	a801      	add	r0, sp, #4
   d539c:	f7ff ffd8 	bl	d5350 <_Z17acquireWireBufferv>
   d53a0:	aa01      	add	r2, sp, #4
   d53a2:	4621      	mov	r1, r4
   d53a4:	4807      	ldr	r0, [pc, #28]	; (d53c4 <_Z19__fetch_global_Wirev+0x40>)
   d53a6:	f7ff fdaf 	bl	d4f08 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d53aa:	4628      	mov	r0, r5
   d53ac:	f7fe fe7e 	bl	d40ac <__cxa_guard_release>
   d53b0:	4a05      	ldr	r2, [pc, #20]	; (d53c8 <_Z19__fetch_global_Wirev+0x44>)
   d53b2:	4906      	ldr	r1, [pc, #24]	; (d53cc <_Z19__fetch_global_Wirev+0x48>)
   d53b4:	4803      	ldr	r0, [pc, #12]	; (d53c4 <_Z19__fetch_global_Wirev+0x40>)
   d53b6:	f000 f80b 	bl	d53d0 <__aeabi_atexit>
	return wire;
}
   d53ba:	4802      	ldr	r0, [pc, #8]	; (d53c4 <_Z19__fetch_global_Wirev+0x40>)
   d53bc:	b007      	add	sp, #28
   d53be:	bd30      	pop	{r4, r5, pc}
   d53c0:	2003e734 	.word	0x2003e734
   d53c4:	2003e738 	.word	0x2003e738
   d53c8:	2003e3b4 	.word	0x2003e3b4
   d53cc:	000d4eb1 	.word	0x000d4eb1

000d53d0 <__aeabi_atexit>:
   d53d0:	460b      	mov	r3, r1
   d53d2:	4601      	mov	r1, r0
   d53d4:	4618      	mov	r0, r3
   d53d6:	f001 bf9f 	b.w	d7318 <__cxa_atexit>
	...

000d53dc <_ZSt15get_new_handlerv>:
   d53dc:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <_ZSt15get_new_handlerv+0xc>)
   d53de:	6818      	ldr	r0, [r3, #0]
   d53e0:	f3bf 8f5f 	dmb	sy
   d53e4:	4770      	bx	lr
   d53e6:	bf00      	nop
   d53e8:	2003e74c 	.word	0x2003e74c

000d53ec <_ZdlPvj>:
   d53ec:	f7fe be55 	b.w	d409a <_ZdlPv>

000d53f0 <_ZnajRKSt9nothrow_t>:
   d53f0:	f000 b800 	b.w	d53f4 <_ZnwjRKSt9nothrow_t>

000d53f4 <_ZnwjRKSt9nothrow_t>:
   d53f4:	b510      	push	{r4, lr}
   d53f6:	2800      	cmp	r0, #0
   d53f8:	bf14      	ite	ne
   d53fa:	4604      	movne	r4, r0
   d53fc:	2401      	moveq	r4, #1
   d53fe:	4620      	mov	r0, r4
   d5400:	f7ff f922 	bl	d4648 <malloc>
   d5404:	b920      	cbnz	r0, d5410 <_ZnwjRKSt9nothrow_t+0x1c>
   d5406:	f7ff ffe9 	bl	d53dc <_ZSt15get_new_handlerv>
   d540a:	b108      	cbz	r0, d5410 <_ZnwjRKSt9nothrow_t+0x1c>
   d540c:	4780      	blx	r0
   d540e:	e7f6      	b.n	d53fe <_ZnwjRKSt9nothrow_t+0xa>
   d5410:	bd10      	pop	{r4, pc}
	...

000d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5414:	4b18      	ldr	r3, [pc, #96]	; (d5478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5416:	681a      	ldr	r2, [r3, #0]
   d5418:	07d1      	lsls	r1, r2, #31
   d541a:	bf5c      	itt	pl
   d541c:	2201      	movpl	r2, #1
   d541e:	601a      	strpl	r2, [r3, #0]
   d5420:	4b16      	ldr	r3, [pc, #88]	; (d547c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5422:	681a      	ldr	r2, [r3, #0]
   d5424:	07d2      	lsls	r2, r2, #31
   d5426:	bf5c      	itt	pl
   d5428:	2201      	movpl	r2, #1
   d542a:	601a      	strpl	r2, [r3, #0]
   d542c:	4b14      	ldr	r3, [pc, #80]	; (d5480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d542e:	681a      	ldr	r2, [r3, #0]
   d5430:	07d0      	lsls	r0, r2, #31
   d5432:	bf5c      	itt	pl
   d5434:	2201      	movpl	r2, #1
   d5436:	601a      	strpl	r2, [r3, #0]
   d5438:	4b12      	ldr	r3, [pc, #72]	; (d5484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d543a:	681a      	ldr	r2, [r3, #0]
   d543c:	07d1      	lsls	r1, r2, #31
   d543e:	bf5c      	itt	pl
   d5440:	2201      	movpl	r2, #1
   d5442:	601a      	strpl	r2, [r3, #0]
   d5444:	4b10      	ldr	r3, [pc, #64]	; (d5488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5446:	681a      	ldr	r2, [r3, #0]
   d5448:	07d2      	lsls	r2, r2, #31
   d544a:	bf5c      	itt	pl
   d544c:	2201      	movpl	r2, #1
   d544e:	601a      	strpl	r2, [r3, #0]
   d5450:	4b0e      	ldr	r3, [pc, #56]	; (d548c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5452:	681a      	ldr	r2, [r3, #0]
   d5454:	07d0      	lsls	r0, r2, #31
   d5456:	bf5c      	itt	pl
   d5458:	2201      	movpl	r2, #1
   d545a:	601a      	strpl	r2, [r3, #0]
   d545c:	4b0c      	ldr	r3, [pc, #48]	; (d5490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d545e:	681a      	ldr	r2, [r3, #0]
   d5460:	07d1      	lsls	r1, r2, #31
   d5462:	bf5c      	itt	pl
   d5464:	2201      	movpl	r2, #1
   d5466:	601a      	strpl	r2, [r3, #0]
   d5468:	4b0a      	ldr	r3, [pc, #40]	; (d5494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d546a:	681a      	ldr	r2, [r3, #0]
   d546c:	07d2      	lsls	r2, r2, #31
   d546e:	bf5c      	itt	pl
   d5470:	2201      	movpl	r2, #1
   d5472:	601a      	strpl	r2, [r3, #0]
   d5474:	4770      	bx	lr
   d5476:	bf00      	nop
   d5478:	2003e76c 	.word	0x2003e76c
   d547c:	2003e768 	.word	0x2003e768
   d5480:	2003e764 	.word	0x2003e764
   d5484:	2003e760 	.word	0x2003e760
   d5488:	2003e75c 	.word	0x2003e75c
   d548c:	2003e758 	.word	0x2003e758
   d5490:	2003e754 	.word	0x2003e754
   d5494:	2003e750 	.word	0x2003e750

000d5498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5498:	4b24      	ldr	r3, [pc, #144]	; (d552c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d549a:	681a      	ldr	r2, [r3, #0]
   d549c:	07d0      	lsls	r0, r2, #31
   d549e:	bf5c      	itt	pl
   d54a0:	2201      	movpl	r2, #1
   d54a2:	601a      	strpl	r2, [r3, #0]
   d54a4:	4b22      	ldr	r3, [pc, #136]	; (d5530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d54a6:	681a      	ldr	r2, [r3, #0]
   d54a8:	07d1      	lsls	r1, r2, #31
   d54aa:	bf5c      	itt	pl
   d54ac:	2201      	movpl	r2, #1
   d54ae:	601a      	strpl	r2, [r3, #0]
   d54b0:	4b20      	ldr	r3, [pc, #128]	; (d5534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d54b2:	681a      	ldr	r2, [r3, #0]
   d54b4:	07d2      	lsls	r2, r2, #31
   d54b6:	bf5c      	itt	pl
   d54b8:	2201      	movpl	r2, #1
   d54ba:	601a      	strpl	r2, [r3, #0]
   d54bc:	4b1e      	ldr	r3, [pc, #120]	; (d5538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d54be:	681a      	ldr	r2, [r3, #0]
   d54c0:	07d0      	lsls	r0, r2, #31
   d54c2:	bf5c      	itt	pl
   d54c4:	2201      	movpl	r2, #1
   d54c6:	601a      	strpl	r2, [r3, #0]
   d54c8:	4b1c      	ldr	r3, [pc, #112]	; (d553c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d54ca:	681a      	ldr	r2, [r3, #0]
   d54cc:	07d1      	lsls	r1, r2, #31
   d54ce:	bf5c      	itt	pl
   d54d0:	2201      	movpl	r2, #1
   d54d2:	601a      	strpl	r2, [r3, #0]
   d54d4:	4b1a      	ldr	r3, [pc, #104]	; (d5540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d54d6:	681a      	ldr	r2, [r3, #0]
   d54d8:	07d2      	lsls	r2, r2, #31
   d54da:	bf5c      	itt	pl
   d54dc:	2201      	movpl	r2, #1
   d54de:	601a      	strpl	r2, [r3, #0]
   d54e0:	4b18      	ldr	r3, [pc, #96]	; (d5544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d54e2:	681a      	ldr	r2, [r3, #0]
   d54e4:	07d0      	lsls	r0, r2, #31
   d54e6:	bf5c      	itt	pl
   d54e8:	2201      	movpl	r2, #1
   d54ea:	601a      	strpl	r2, [r3, #0]
   d54ec:	4b16      	ldr	r3, [pc, #88]	; (d5548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d54ee:	681a      	ldr	r2, [r3, #0]
   d54f0:	07d1      	lsls	r1, r2, #31
   d54f2:	bf5c      	itt	pl
   d54f4:	2201      	movpl	r2, #1
   d54f6:	601a      	strpl	r2, [r3, #0]
   d54f8:	4b14      	ldr	r3, [pc, #80]	; (d554c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d54fa:	681a      	ldr	r2, [r3, #0]
   d54fc:	07d2      	lsls	r2, r2, #31
   d54fe:	bf5c      	itt	pl
   d5500:	2201      	movpl	r2, #1
   d5502:	601a      	strpl	r2, [r3, #0]
   d5504:	4b12      	ldr	r3, [pc, #72]	; (d5550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5506:	681a      	ldr	r2, [r3, #0]
   d5508:	07d0      	lsls	r0, r2, #31
   d550a:	bf5c      	itt	pl
   d550c:	2201      	movpl	r2, #1
   d550e:	601a      	strpl	r2, [r3, #0]
   d5510:	4b10      	ldr	r3, [pc, #64]	; (d5554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5512:	681a      	ldr	r2, [r3, #0]
   d5514:	07d1      	lsls	r1, r2, #31
   d5516:	bf5c      	itt	pl
   d5518:	2201      	movpl	r2, #1
   d551a:	601a      	strpl	r2, [r3, #0]
   d551c:	4b0e      	ldr	r3, [pc, #56]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d551e:	681a      	ldr	r2, [r3, #0]
   d5520:	07d2      	lsls	r2, r2, #31
   d5522:	bf5c      	itt	pl
   d5524:	2201      	movpl	r2, #1
   d5526:	601a      	strpl	r2, [r3, #0]
   d5528:	4770      	bx	lr
   d552a:	bf00      	nop
   d552c:	2003e79c 	.word	0x2003e79c
   d5530:	2003e798 	.word	0x2003e798
   d5534:	2003e794 	.word	0x2003e794
   d5538:	2003e790 	.word	0x2003e790
   d553c:	2003e78c 	.word	0x2003e78c
   d5540:	2003e788 	.word	0x2003e788
   d5544:	2003e784 	.word	0x2003e784
   d5548:	2003e780 	.word	0x2003e780
   d554c:	2003e77c 	.word	0x2003e77c
   d5550:	2003e778 	.word	0x2003e778
   d5554:	2003e774 	.word	0x2003e774
   d5558:	2003e770 	.word	0x2003e770

000d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d555c:	4b24      	ldr	r3, [pc, #144]	; (d55f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d555e:	681a      	ldr	r2, [r3, #0]
   d5560:	07d0      	lsls	r0, r2, #31
   d5562:	bf5c      	itt	pl
   d5564:	2201      	movpl	r2, #1
   d5566:	601a      	strpl	r2, [r3, #0]
   d5568:	4b22      	ldr	r3, [pc, #136]	; (d55f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d556a:	681a      	ldr	r2, [r3, #0]
   d556c:	07d1      	lsls	r1, r2, #31
   d556e:	bf5c      	itt	pl
   d5570:	2201      	movpl	r2, #1
   d5572:	601a      	strpl	r2, [r3, #0]
   d5574:	4b20      	ldr	r3, [pc, #128]	; (d55f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5576:	681a      	ldr	r2, [r3, #0]
   d5578:	07d2      	lsls	r2, r2, #31
   d557a:	bf5c      	itt	pl
   d557c:	2201      	movpl	r2, #1
   d557e:	601a      	strpl	r2, [r3, #0]
   d5580:	4b1e      	ldr	r3, [pc, #120]	; (d55fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5582:	681a      	ldr	r2, [r3, #0]
   d5584:	07d0      	lsls	r0, r2, #31
   d5586:	bf5c      	itt	pl
   d5588:	2201      	movpl	r2, #1
   d558a:	601a      	strpl	r2, [r3, #0]
   d558c:	4b1c      	ldr	r3, [pc, #112]	; (d5600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d558e:	681a      	ldr	r2, [r3, #0]
   d5590:	07d1      	lsls	r1, r2, #31
   d5592:	bf5c      	itt	pl
   d5594:	2201      	movpl	r2, #1
   d5596:	601a      	strpl	r2, [r3, #0]
   d5598:	4b1a      	ldr	r3, [pc, #104]	; (d5604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d559a:	681a      	ldr	r2, [r3, #0]
   d559c:	07d2      	lsls	r2, r2, #31
   d559e:	bf5c      	itt	pl
   d55a0:	2201      	movpl	r2, #1
   d55a2:	601a      	strpl	r2, [r3, #0]
   d55a4:	4b18      	ldr	r3, [pc, #96]	; (d5608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d55a6:	681a      	ldr	r2, [r3, #0]
   d55a8:	07d0      	lsls	r0, r2, #31
   d55aa:	bf5c      	itt	pl
   d55ac:	2201      	movpl	r2, #1
   d55ae:	601a      	strpl	r2, [r3, #0]
   d55b0:	4b16      	ldr	r3, [pc, #88]	; (d560c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d55b2:	681a      	ldr	r2, [r3, #0]
   d55b4:	07d1      	lsls	r1, r2, #31
   d55b6:	bf5c      	itt	pl
   d55b8:	2201      	movpl	r2, #1
   d55ba:	601a      	strpl	r2, [r3, #0]
   d55bc:	4b14      	ldr	r3, [pc, #80]	; (d5610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d55be:	681a      	ldr	r2, [r3, #0]
   d55c0:	07d2      	lsls	r2, r2, #31
   d55c2:	bf5c      	itt	pl
   d55c4:	2201      	movpl	r2, #1
   d55c6:	601a      	strpl	r2, [r3, #0]
   d55c8:	4b12      	ldr	r3, [pc, #72]	; (d5614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d55ca:	681a      	ldr	r2, [r3, #0]
   d55cc:	07d0      	lsls	r0, r2, #31
   d55ce:	bf5c      	itt	pl
   d55d0:	2201      	movpl	r2, #1
   d55d2:	601a      	strpl	r2, [r3, #0]
   d55d4:	4b10      	ldr	r3, [pc, #64]	; (d5618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d55d6:	681a      	ldr	r2, [r3, #0]
   d55d8:	07d1      	lsls	r1, r2, #31
   d55da:	bf5c      	itt	pl
   d55dc:	2201      	movpl	r2, #1
   d55de:	601a      	strpl	r2, [r3, #0]
   d55e0:	4b0e      	ldr	r3, [pc, #56]	; (d561c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d55e2:	681a      	ldr	r2, [r3, #0]
   d55e4:	07d2      	lsls	r2, r2, #31
   d55e6:	bf5c      	itt	pl
   d55e8:	2201      	movpl	r2, #1
   d55ea:	601a      	strpl	r2, [r3, #0]
   d55ec:	4770      	bx	lr
   d55ee:	bf00      	nop
   d55f0:	2003e7cc 	.word	0x2003e7cc
   d55f4:	2003e7c8 	.word	0x2003e7c8
   d55f8:	2003e7c4 	.word	0x2003e7c4
   d55fc:	2003e7c0 	.word	0x2003e7c0
   d5600:	2003e7bc 	.word	0x2003e7bc
   d5604:	2003e7b8 	.word	0x2003e7b8
   d5608:	2003e7b4 	.word	0x2003e7b4
   d560c:	2003e7b0 	.word	0x2003e7b0
   d5610:	2003e7ac 	.word	0x2003e7ac
   d5614:	2003e7a8 	.word	0x2003e7a8
   d5618:	2003e7a4 	.word	0x2003e7a4
   d561c:	2003e7a0 	.word	0x2003e7a0

000d5620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5620:	4b18      	ldr	r3, [pc, #96]	; (d5684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5622:	681a      	ldr	r2, [r3, #0]
   d5624:	07d1      	lsls	r1, r2, #31
   d5626:	bf5c      	itt	pl
   d5628:	2201      	movpl	r2, #1
   d562a:	601a      	strpl	r2, [r3, #0]
   d562c:	4b16      	ldr	r3, [pc, #88]	; (d5688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d562e:	681a      	ldr	r2, [r3, #0]
   d5630:	07d2      	lsls	r2, r2, #31
   d5632:	bf5c      	itt	pl
   d5634:	2201      	movpl	r2, #1
   d5636:	601a      	strpl	r2, [r3, #0]
   d5638:	4b14      	ldr	r3, [pc, #80]	; (d568c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d563a:	681a      	ldr	r2, [r3, #0]
   d563c:	07d0      	lsls	r0, r2, #31
   d563e:	bf5c      	itt	pl
   d5640:	2201      	movpl	r2, #1
   d5642:	601a      	strpl	r2, [r3, #0]
   d5644:	4b12      	ldr	r3, [pc, #72]	; (d5690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5646:	681a      	ldr	r2, [r3, #0]
   d5648:	07d1      	lsls	r1, r2, #31
   d564a:	bf5c      	itt	pl
   d564c:	2201      	movpl	r2, #1
   d564e:	601a      	strpl	r2, [r3, #0]
   d5650:	4b10      	ldr	r3, [pc, #64]	; (d5694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5652:	681a      	ldr	r2, [r3, #0]
   d5654:	07d2      	lsls	r2, r2, #31
   d5656:	bf5c      	itt	pl
   d5658:	2201      	movpl	r2, #1
   d565a:	601a      	strpl	r2, [r3, #0]
   d565c:	4b0e      	ldr	r3, [pc, #56]	; (d5698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d565e:	681a      	ldr	r2, [r3, #0]
   d5660:	07d0      	lsls	r0, r2, #31
   d5662:	bf5c      	itt	pl
   d5664:	2201      	movpl	r2, #1
   d5666:	601a      	strpl	r2, [r3, #0]
   d5668:	4b0c      	ldr	r3, [pc, #48]	; (d569c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d566a:	681a      	ldr	r2, [r3, #0]
   d566c:	07d1      	lsls	r1, r2, #31
   d566e:	bf5c      	itt	pl
   d5670:	2201      	movpl	r2, #1
   d5672:	601a      	strpl	r2, [r3, #0]
   d5674:	4b0a      	ldr	r3, [pc, #40]	; (d56a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5676:	681a      	ldr	r2, [r3, #0]
   d5678:	07d2      	lsls	r2, r2, #31
   d567a:	bf5c      	itt	pl
   d567c:	2201      	movpl	r2, #1
   d567e:	601a      	strpl	r2, [r3, #0]
   d5680:	4770      	bx	lr
   d5682:	bf00      	nop
   d5684:	2003e7ec 	.word	0x2003e7ec
   d5688:	2003e7e8 	.word	0x2003e7e8
   d568c:	2003e7e4 	.word	0x2003e7e4
   d5690:	2003e7e0 	.word	0x2003e7e0
   d5694:	2003e7dc 	.word	0x2003e7dc
   d5698:	2003e7d8 	.word	0x2003e7d8
   d569c:	2003e7d4 	.word	0x2003e7d4
   d56a0:	2003e7d0 	.word	0x2003e7d0
   d56a4:	00000000 	.word	0x00000000

000d56a8 <pow>:
   d56a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56ac:	ed2d 8b02 	vpush	{d8}
   d56b0:	f8df a324 	ldr.w	sl, [pc, #804]	; d59d8 <pow+0x330>
   d56b4:	b08b      	sub	sp, #44	; 0x2c
   d56b6:	ec57 6b10 	vmov	r6, r7, d0
   d56ba:	ec55 4b11 	vmov	r4, r5, d1
   d56be:	f000 f98f 	bl	d59e0 <__ieee754_pow>
   d56c2:	f99a 8000 	ldrsb.w	r8, [sl]
   d56c6:	eeb0 8a40 	vmov.f32	s16, s0
   d56ca:	eef0 8a60 	vmov.f32	s17, s1
   d56ce:	f1b8 3fff 	cmp.w	r8, #4294967295
   d56d2:	d048      	beq.n	d5766 <pow+0xbe>
   d56d4:	4622      	mov	r2, r4
   d56d6:	462b      	mov	r3, r5
   d56d8:	4620      	mov	r0, r4
   d56da:	4629      	mov	r1, r5
   d56dc:	f001 fd6e 	bl	d71bc <__aeabi_dcmpun>
   d56e0:	4683      	mov	fp, r0
   d56e2:	2800      	cmp	r0, #0
   d56e4:	d13f      	bne.n	d5766 <pow+0xbe>
   d56e6:	4632      	mov	r2, r6
   d56e8:	463b      	mov	r3, r7
   d56ea:	4630      	mov	r0, r6
   d56ec:	4639      	mov	r1, r7
   d56ee:	f001 fd65 	bl	d71bc <__aeabi_dcmpun>
   d56f2:	4681      	mov	r9, r0
   d56f4:	2800      	cmp	r0, #0
   d56f6:	f040 8090 	bne.w	d581a <pow+0x172>
   d56fa:	4630      	mov	r0, r6
   d56fc:	4639      	mov	r1, r7
   d56fe:	2200      	movs	r2, #0
   d5700:	2300      	movs	r3, #0
   d5702:	f001 fd29 	bl	d7158 <__aeabi_dcmpeq>
   d5706:	2800      	cmp	r0, #0
   d5708:	d036      	beq.n	d5778 <pow+0xd0>
   d570a:	2200      	movs	r2, #0
   d570c:	2300      	movs	r3, #0
   d570e:	4620      	mov	r0, r4
   d5710:	4629      	mov	r1, r5
   d5712:	f001 fd21 	bl	d7158 <__aeabi_dcmpeq>
   d5716:	4683      	mov	fp, r0
   d5718:	b1b8      	cbz	r0, d574a <pow+0xa2>
   d571a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d59b0 <pow+0x308>
   d571e:	2201      	movs	r2, #1
   d5720:	4ba9      	ldr	r3, [pc, #676]	; (d59c8 <pow+0x320>)
   d5722:	f8cd 9020 	str.w	r9, [sp, #32]
   d5726:	9200      	str	r2, [sp, #0]
   d5728:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d572c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5730:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	f1b8 0f00 	cmp.w	r8, #0
   d573a:	d05b      	beq.n	d57f4 <pow+0x14c>
   d573c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d59b8 <pow+0x310>
   d5740:	b00b      	add	sp, #44	; 0x2c
   d5742:	ecbd 8b02 	vpop	{d8}
   d5746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d574a:	ec45 4b10 	vmov	d0, r4, r5
   d574e:	f000 ffa7 	bl	d66a0 <finite>
   d5752:	b140      	cbz	r0, d5766 <pow+0xbe>
   d5754:	2200      	movs	r2, #0
   d5756:	2300      	movs	r3, #0
   d5758:	4620      	mov	r0, r4
   d575a:	4629      	mov	r1, r5
   d575c:	f001 fd06 	bl	d716c <__aeabi_dcmplt>
   d5760:	2800      	cmp	r0, #0
   d5762:	f040 80c5 	bne.w	d58f0 <pow+0x248>
   d5766:	eeb0 0a48 	vmov.f32	s0, s16
   d576a:	eef0 0a68 	vmov.f32	s1, s17
   d576e:	b00b      	add	sp, #44	; 0x2c
   d5770:	ecbd 8b02 	vpop	{d8}
   d5774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5778:	eeb0 0a48 	vmov.f32	s0, s16
   d577c:	eef0 0a68 	vmov.f32	s1, s17
   d5780:	f000 ff8e 	bl	d66a0 <finite>
   d5784:	4680      	mov	r8, r0
   d5786:	2800      	cmp	r0, #0
   d5788:	d061      	beq.n	d584e <pow+0x1a6>
   d578a:	f04f 0800 	mov.w	r8, #0
   d578e:	f04f 0900 	mov.w	r9, #0
   d5792:	ec51 0b18 	vmov	r0, r1, d8
   d5796:	4642      	mov	r2, r8
   d5798:	464b      	mov	r3, r9
   d579a:	f001 fcdd 	bl	d7158 <__aeabi_dcmpeq>
   d579e:	2800      	cmp	r0, #0
   d57a0:	d0e1      	beq.n	d5766 <pow+0xbe>
   d57a2:	ec47 6b10 	vmov	d0, r6, r7
   d57a6:	f000 ff7b 	bl	d66a0 <finite>
   d57aa:	2800      	cmp	r0, #0
   d57ac:	d0db      	beq.n	d5766 <pow+0xbe>
   d57ae:	ec45 4b10 	vmov	d0, r4, r5
   d57b2:	f000 ff75 	bl	d66a0 <finite>
   d57b6:	2800      	cmp	r0, #0
   d57b8:	d0d5      	beq.n	d5766 <pow+0xbe>
   d57ba:	f99a 3000 	ldrsb.w	r3, [sl]
   d57be:	4a82      	ldr	r2, [pc, #520]	; (d59c8 <pow+0x320>)
   d57c0:	9201      	str	r2, [sp, #4]
   d57c2:	2104      	movs	r1, #4
   d57c4:	2200      	movs	r2, #0
   d57c6:	2b02      	cmp	r3, #2
   d57c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d57cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d57d0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d57d4:	9100      	str	r1, [sp, #0]
   d57d6:	9208      	str	r2, [sp, #32]
   d57d8:	d003      	beq.n	d57e2 <pow+0x13a>
   d57da:	4668      	mov	r0, sp
   d57dc:	f000 ff68 	bl	d66b0 <matherr>
   d57e0:	b970      	cbnz	r0, d5800 <pow+0x158>
   d57e2:	f7fe ff41 	bl	d4668 <__errno>
   d57e6:	2322      	movs	r3, #34	; 0x22
   d57e8:	6003      	str	r3, [r0, #0]
   d57ea:	e009      	b.n	d5800 <pow+0x158>
   d57ec:	ed9f 7b70 	vldr	d7, [pc, #448]	; d59b0 <pow+0x308>
   d57f0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d57f4:	4668      	mov	r0, sp
   d57f6:	f000 ff5b 	bl	d66b0 <matherr>
   d57fa:	2800      	cmp	r0, #0
   d57fc:	f000 808e 	beq.w	d591c <pow+0x274>
   d5800:	9b08      	ldr	r3, [sp, #32]
   d5802:	b11b      	cbz	r3, d580c <pow+0x164>
   d5804:	f7fe ff30 	bl	d4668 <__errno>
   d5808:	9b08      	ldr	r3, [sp, #32]
   d580a:	6003      	str	r3, [r0, #0]
   d580c:	ed9d 0b06 	vldr	d0, [sp, #24]
   d5810:	b00b      	add	sp, #44	; 0x2c
   d5812:	ecbd 8b02 	vpop	{d8}
   d5816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d581a:	2200      	movs	r2, #0
   d581c:	2300      	movs	r3, #0
   d581e:	4620      	mov	r0, r4
   d5820:	4629      	mov	r1, r5
   d5822:	f001 fc99 	bl	d7158 <__aeabi_dcmpeq>
   d5826:	2800      	cmp	r0, #0
   d5828:	d09d      	beq.n	d5766 <pow+0xbe>
   d582a:	ed9f 0b63 	vldr	d0, [pc, #396]	; d59b8 <pow+0x310>
   d582e:	4b66      	ldr	r3, [pc, #408]	; (d59c8 <pow+0x320>)
   d5830:	f8cd b020 	str.w	fp, [sp, #32]
   d5834:	2201      	movs	r2, #1
   d5836:	f1b8 0f02 	cmp.w	r8, #2
   d583a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d583e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5842:	ed8d 0b06 	vstr	d0, [sp, #24]
   d5846:	e88d 000c 	stmia.w	sp, {r2, r3}
   d584a:	d1d3      	bne.n	d57f4 <pow+0x14c>
   d584c:	e78f      	b.n	d576e <pow+0xc6>
   d584e:	ec47 6b10 	vmov	d0, r6, r7
   d5852:	f000 ff25 	bl	d66a0 <finite>
   d5856:	2800      	cmp	r0, #0
   d5858:	d097      	beq.n	d578a <pow+0xe2>
   d585a:	ec45 4b10 	vmov	d0, r4, r5
   d585e:	f000 ff1f 	bl	d66a0 <finite>
   d5862:	2800      	cmp	r0, #0
   d5864:	d091      	beq.n	d578a <pow+0xe2>
   d5866:	ec53 2b18 	vmov	r2, r3, d8
   d586a:	ee18 0a10 	vmov	r0, s16
   d586e:	4619      	mov	r1, r3
   d5870:	f001 fca4 	bl	d71bc <__aeabi_dcmpun>
   d5874:	2800      	cmp	r0, #0
   d5876:	d17c      	bne.n	d5972 <pow+0x2ca>
   d5878:	2303      	movs	r3, #3
   d587a:	f99a 8000 	ldrsb.w	r8, [sl]
   d587e:	9300      	str	r3, [sp, #0]
   d5880:	4b51      	ldr	r3, [pc, #324]	; (d59c8 <pow+0x320>)
   d5882:	9008      	str	r0, [sp, #32]
   d5884:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5888:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	f1b8 0f00 	cmp.w	r8, #0
   d5892:	d148      	bne.n	d5926 <pow+0x27e>
   d5894:	f8df 9144 	ldr.w	r9, [pc, #324]	; d59dc <pow+0x334>
   d5898:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d589c:	2200      	movs	r2, #0
   d589e:	2300      	movs	r3, #0
   d58a0:	4630      	mov	r0, r6
   d58a2:	4639      	mov	r1, r7
   d58a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d58a8:	f001 fc60 	bl	d716c <__aeabi_dcmplt>
   d58ac:	2800      	cmp	r0, #0
   d58ae:	d094      	beq.n	d57da <pow+0x132>
   d58b0:	2200      	movs	r2, #0
   d58b2:	4b46      	ldr	r3, [pc, #280]	; (d59cc <pow+0x324>)
   d58b4:	4620      	mov	r0, r4
   d58b6:	4629      	mov	r1, r5
   d58b8:	f001 f9e6 	bl	d6c88 <__aeabi_dmul>
   d58bc:	4604      	mov	r4, r0
   d58be:	460d      	mov	r5, r1
   d58c0:	ec45 4b10 	vmov	d0, r4, r5
   d58c4:	f000 ff00 	bl	d66c8 <rint>
   d58c8:	4620      	mov	r0, r4
   d58ca:	ec53 2b10 	vmov	r2, r3, d0
   d58ce:	4629      	mov	r1, r5
   d58d0:	f001 fc42 	bl	d7158 <__aeabi_dcmpeq>
   d58d4:	2800      	cmp	r0, #0
   d58d6:	d149      	bne.n	d596c <pow+0x2c4>
   d58d8:	4b3d      	ldr	r3, [pc, #244]	; (d59d0 <pow+0x328>)
   d58da:	f99a 8000 	ldrsb.w	r8, [sl]
   d58de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d58e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d58e6:	f1b8 0f02 	cmp.w	r8, #2
   d58ea:	f47f af76 	bne.w	d57da <pow+0x132>
   d58ee:	e778      	b.n	d57e2 <pow+0x13a>
   d58f0:	4a35      	ldr	r2, [pc, #212]	; (d59c8 <pow+0x320>)
   d58f2:	f99a 3000 	ldrsb.w	r3, [sl]
   d58f6:	f8cd b020 	str.w	fp, [sp, #32]
   d58fa:	2101      	movs	r1, #1
   d58fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5900:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5904:	e88d 0006 	stmia.w	sp, {r1, r2}
   d5908:	2b00      	cmp	r3, #0
   d590a:	f43f af6f 	beq.w	d57ec <pow+0x144>
   d590e:	4931      	ldr	r1, [pc, #196]	; (d59d4 <pow+0x32c>)
   d5910:	2000      	movs	r0, #0
   d5912:	2b02      	cmp	r3, #2
   d5914:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5918:	f47f af6c 	bne.w	d57f4 <pow+0x14c>
   d591c:	f7fe fea4 	bl	d4668 <__errno>
   d5920:	2321      	movs	r3, #33	; 0x21
   d5922:	6003      	str	r3, [r0, #0]
   d5924:	e76c      	b.n	d5800 <pow+0x158>
   d5926:	ed9f 7b26 	vldr	d7, [pc, #152]	; d59c0 <pow+0x318>
   d592a:	2200      	movs	r2, #0
   d592c:	2300      	movs	r3, #0
   d592e:	4630      	mov	r0, r6
   d5930:	4639      	mov	r1, r7
   d5932:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5936:	f001 fc19 	bl	d716c <__aeabi_dcmplt>
   d593a:	2800      	cmp	r0, #0
   d593c:	d0d3      	beq.n	d58e6 <pow+0x23e>
   d593e:	2200      	movs	r2, #0
   d5940:	4b22      	ldr	r3, [pc, #136]	; (d59cc <pow+0x324>)
   d5942:	4620      	mov	r0, r4
   d5944:	4629      	mov	r1, r5
   d5946:	f001 f99f 	bl	d6c88 <__aeabi_dmul>
   d594a:	4604      	mov	r4, r0
   d594c:	460d      	mov	r5, r1
   d594e:	ec45 4b10 	vmov	d0, r4, r5
   d5952:	f000 feb9 	bl	d66c8 <rint>
   d5956:	4620      	mov	r0, r4
   d5958:	ec53 2b10 	vmov	r2, r3, d0
   d595c:	4629      	mov	r1, r5
   d595e:	f001 fbfb 	bl	d7158 <__aeabi_dcmpeq>
   d5962:	b918      	cbnz	r0, d596c <pow+0x2c4>
   d5964:	4b1b      	ldr	r3, [pc, #108]	; (d59d4 <pow+0x32c>)
   d5966:	2200      	movs	r2, #0
   d5968:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d596c:	f99a 8000 	ldrsb.w	r8, [sl]
   d5970:	e7b9      	b.n	d58e6 <pow+0x23e>
   d5972:	4b15      	ldr	r3, [pc, #84]	; (d59c8 <pow+0x320>)
   d5974:	f99a 9000 	ldrsb.w	r9, [sl]
   d5978:	f8cd 8020 	str.w	r8, [sp, #32]
   d597c:	2201      	movs	r2, #1
   d597e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5982:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5986:	e88d 000c 	stmia.w	sp, {r2, r3}
   d598a:	f1b9 0f00 	cmp.w	r9, #0
   d598e:	f43f af2d 	beq.w	d57ec <pow+0x144>
   d5992:	2200      	movs	r2, #0
   d5994:	2300      	movs	r3, #0
   d5996:	4610      	mov	r0, r2
   d5998:	4619      	mov	r1, r3
   d599a:	f001 fa9f 	bl	d6edc <__aeabi_ddiv>
   d599e:	f1b9 0f02 	cmp.w	r9, #2
   d59a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d59a6:	d0b9      	beq.n	d591c <pow+0x274>
   d59a8:	e724      	b.n	d57f4 <pow+0x14c>
   d59aa:	bf00      	nop
   d59ac:	f3af 8000 	nop.w
	...
   d59bc:	3ff00000 	.word	0x3ff00000
   d59c0:	00000000 	.word	0x00000000
   d59c4:	7ff00000 	.word	0x7ff00000
   d59c8:	000d7680 	.word	0x000d7680
   d59cc:	3fe00000 	.word	0x3fe00000
   d59d0:	c7efffff 	.word	0xc7efffff
   d59d4:	fff00000 	.word	0xfff00000
   d59d8:	2003e34c 	.word	0x2003e34c
   d59dc:	47efffff 	.word	0x47efffff

000d59e0 <__ieee754_pow>:
   d59e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59e4:	ec51 0b11 	vmov	r0, r1, d1
   d59e8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d59ec:	ea58 0400 	orrs.w	r4, r8, r0
   d59f0:	b093      	sub	sp, #76	; 0x4c
   d59f2:	d03c      	beq.n	d5a6e <__ieee754_pow+0x8e>
   d59f4:	ec53 2b10 	vmov	r2, r3, d0
   d59f8:	4e6d      	ldr	r6, [pc, #436]	; (d5bb0 <__ieee754_pow+0x1d0>)
   d59fa:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d59fe:	42b4      	cmp	r4, r6
   d5a00:	ee10 aa10 	vmov	sl, s0
   d5a04:	461d      	mov	r5, r3
   d5a06:	dc2b      	bgt.n	d5a60 <__ieee754_pow+0x80>
   d5a08:	4689      	mov	r9, r1
   d5a0a:	ee11 ea10 	vmov	lr, s2
   d5a0e:	d026      	beq.n	d5a5e <__ieee754_pow+0x7e>
   d5a10:	45b0      	cmp	r8, r6
   d5a12:	dc25      	bgt.n	d5a60 <__ieee754_pow+0x80>
   d5a14:	4e66      	ldr	r6, [pc, #408]	; (d5bb0 <__ieee754_pow+0x1d0>)
   d5a16:	45b0      	cmp	r8, r6
   d5a18:	d077      	beq.n	d5b0a <__ieee754_pow+0x12a>
   d5a1a:	2d00      	cmp	r5, #0
   d5a1c:	4616      	mov	r6, r2
   d5a1e:	461f      	mov	r7, r3
   d5a20:	e9cd 0100 	strd	r0, r1, [sp]
   d5a24:	db75      	blt.n	d5b12 <__ieee754_pow+0x132>
   d5a26:	f04f 0b00 	mov.w	fp, #0
   d5a2a:	f1be 0f00 	cmp.w	lr, #0
   d5a2e:	d12d      	bne.n	d5a8c <__ieee754_pow+0xac>
   d5a30:	4b5f      	ldr	r3, [pc, #380]	; (d5bb0 <__ieee754_pow+0x1d0>)
   d5a32:	4598      	cmp	r8, r3
   d5a34:	f000 8089 	beq.w	d5b4a <__ieee754_pow+0x16a>
   d5a38:	4b5e      	ldr	r3, [pc, #376]	; (d5bb4 <__ieee754_pow+0x1d4>)
   d5a3a:	4598      	cmp	r8, r3
   d5a3c:	d05e      	beq.n	d5afc <__ieee754_pow+0x11c>
   d5a3e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d5a42:	f000 83de 	beq.w	d6202 <__ieee754_pow+0x822>
   d5a46:	4b5c      	ldr	r3, [pc, #368]	; (d5bb8 <__ieee754_pow+0x1d8>)
   d5a48:	4599      	cmp	r9, r3
   d5a4a:	d11f      	bne.n	d5a8c <__ieee754_pow+0xac>
   d5a4c:	2d00      	cmp	r5, #0
   d5a4e:	db1d      	blt.n	d5a8c <__ieee754_pow+0xac>
   d5a50:	ec47 6b10 	vmov	d0, r6, r7
   d5a54:	b013      	add	sp, #76	; 0x4c
   d5a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a5a:	f000 bd49 	b.w	d64f0 <__ieee754_sqrt>
   d5a5e:	b15a      	cbz	r2, d5a78 <__ieee754_pow+0x98>
   d5a60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d5a64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d5a68:	ea54 030a 	orrs.w	r3, r4, sl
   d5a6c:	d106      	bne.n	d5a7c <__ieee754_pow+0x9c>
   d5a6e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d5b98 <__ieee754_pow+0x1b8>
   d5a72:	b013      	add	sp, #76	; 0x4c
   d5a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5a78:	45a0      	cmp	r8, r4
   d5a7a:	ddcb      	ble.n	d5a14 <__ieee754_pow+0x34>
   d5a7c:	484f      	ldr	r0, [pc, #316]	; (d5bbc <__ieee754_pow+0x1dc>)
   d5a7e:	b013      	add	sp, #76	; 0x4c
   d5a80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a84:	f000 be18 	b.w	d66b8 <nan>
   d5a88:	f04f 0b00 	mov.w	fp, #0
   d5a8c:	ec47 6b10 	vmov	d0, r6, r7
   d5a90:	f000 fdfe 	bl	d6690 <fabs>
   d5a94:	ec51 0b10 	vmov	r0, r1, d0
   d5a98:	f1ba 0f00 	cmp.w	sl, #0
   d5a9c:	d01e      	beq.n	d5adc <__ieee754_pow+0xfc>
   d5a9e:	0fed      	lsrs	r5, r5, #31
   d5aa0:	f105 3aff 	add.w	sl, r5, #4294967295
   d5aa4:	ea5b 030a 	orrs.w	r3, fp, sl
   d5aa8:	d063      	beq.n	d5b72 <__ieee754_pow+0x192>
   d5aaa:	4b45      	ldr	r3, [pc, #276]	; (d5bc0 <__ieee754_pow+0x1e0>)
   d5aac:	4598      	cmp	r8, r3
   d5aae:	f340 808d 	ble.w	d5bcc <__ieee754_pow+0x1ec>
   d5ab2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d5ab6:	4598      	cmp	r8, r3
   d5ab8:	f340 8438 	ble.w	d632c <__ieee754_pow+0x94c>
   d5abc:	4b41      	ldr	r3, [pc, #260]	; (d5bc4 <__ieee754_pow+0x1e4>)
   d5abe:	429c      	cmp	r4, r3
   d5ac0:	dd62      	ble.n	d5b88 <__ieee754_pow+0x1a8>
   d5ac2:	f1b9 0f00 	cmp.w	r9, #0
   d5ac6:	dd62      	ble.n	d5b8e <__ieee754_pow+0x1ae>
   d5ac8:	a335      	add	r3, pc, #212	; (adr r3, d5ba0 <__ieee754_pow+0x1c0>)
   d5aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ace:	4610      	mov	r0, r2
   d5ad0:	4619      	mov	r1, r3
   d5ad2:	f001 f8d9 	bl	d6c88 <__aeabi_dmul>
   d5ad6:	ec41 0b10 	vmov	d0, r0, r1
   d5ada:	e7ca      	b.n	d5a72 <__ieee754_pow+0x92>
   d5adc:	b124      	cbz	r4, d5ae8 <__ieee754_pow+0x108>
   d5ade:	4b35      	ldr	r3, [pc, #212]	; (d5bb4 <__ieee754_pow+0x1d4>)
   d5ae0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d5ae4:	429a      	cmp	r2, r3
   d5ae6:	d1da      	bne.n	d5a9e <__ieee754_pow+0xbe>
   d5ae8:	f1b9 0f00 	cmp.w	r9, #0
   d5aec:	f2c0 83cb 	blt.w	d6286 <__ieee754_pow+0x8a6>
   d5af0:	2d00      	cmp	r5, #0
   d5af2:	f2c0 8374 	blt.w	d61de <__ieee754_pow+0x7fe>
   d5af6:	ec41 0b10 	vmov	d0, r0, r1
   d5afa:	e7ba      	b.n	d5a72 <__ieee754_pow+0x92>
   d5afc:	f1b9 0f00 	cmp.w	r9, #0
   d5b00:	f2c0 847a 	blt.w	d63f8 <__ieee754_pow+0xa18>
   d5b04:	ec47 6b10 	vmov	d0, r6, r7
   d5b08:	e7b3      	b.n	d5a72 <__ieee754_pow+0x92>
   d5b0a:	f1be 0f00 	cmp.w	lr, #0
   d5b0e:	d084      	beq.n	d5a1a <__ieee754_pow+0x3a>
   d5b10:	e7a6      	b.n	d5a60 <__ieee754_pow+0x80>
   d5b12:	4b2d      	ldr	r3, [pc, #180]	; (d5bc8 <__ieee754_pow+0x1e8>)
   d5b14:	4598      	cmp	r8, r3
   d5b16:	dc29      	bgt.n	d5b6c <__ieee754_pow+0x18c>
   d5b18:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d5b1c:	4598      	cmp	r8, r3
   d5b1e:	dd82      	ble.n	d5a26 <__ieee754_pow+0x46>
   d5b20:	ea4f 5328 	mov.w	r3, r8, asr #20
   d5b24:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d5b28:	2b14      	cmp	r3, #20
   d5b2a:	f340 847f 	ble.w	d642c <__ieee754_pow+0xa4c>
   d5b2e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d5b32:	fa2e f203 	lsr.w	r2, lr, r3
   d5b36:	fa02 f303 	lsl.w	r3, r2, r3
   d5b3a:	459e      	cmp	lr, r3
   d5b3c:	f47f af73 	bne.w	d5a26 <__ieee754_pow+0x46>
   d5b40:	f002 0201 	and.w	r2, r2, #1
   d5b44:	f1c2 0b02 	rsb	fp, r2, #2
   d5b48:	e76f      	b.n	d5a2a <__ieee754_pow+0x4a>
   d5b4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d5b4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d5b52:	ea53 030a 	orrs.w	r3, r3, sl
   d5b56:	d08a      	beq.n	d5a6e <__ieee754_pow+0x8e>
   d5b58:	4b1a      	ldr	r3, [pc, #104]	; (d5bc4 <__ieee754_pow+0x1e4>)
   d5b5a:	429c      	cmp	r4, r3
   d5b5c:	f340 8385 	ble.w	d626a <__ieee754_pow+0x88a>
   d5b60:	f1b9 0f00 	cmp.w	r9, #0
   d5b64:	db13      	blt.n	d5b8e <__ieee754_pow+0x1ae>
   d5b66:	ed9d 0b00 	vldr	d0, [sp]
   d5b6a:	e782      	b.n	d5a72 <__ieee754_pow+0x92>
   d5b6c:	f04f 0b02 	mov.w	fp, #2
   d5b70:	e75b      	b.n	d5a2a <__ieee754_pow+0x4a>
   d5b72:	4632      	mov	r2, r6
   d5b74:	463b      	mov	r3, r7
   d5b76:	4610      	mov	r0, r2
   d5b78:	4619      	mov	r1, r3
   d5b7a:	f000 fed1 	bl	d6920 <__aeabi_dsub>
   d5b7e:	4602      	mov	r2, r0
   d5b80:	460b      	mov	r3, r1
   d5b82:	f001 f9ab 	bl	d6edc <__aeabi_ddiv>
   d5b86:	e7b6      	b.n	d5af6 <__ieee754_pow+0x116>
   d5b88:	f1b9 0f00 	cmp.w	r9, #0
   d5b8c:	db9c      	blt.n	d5ac8 <__ieee754_pow+0xe8>
   d5b8e:	ed9f 0b06 	vldr	d0, [pc, #24]	; d5ba8 <__ieee754_pow+0x1c8>
   d5b92:	e76e      	b.n	d5a72 <__ieee754_pow+0x92>
   d5b94:	f3af 8000 	nop.w
   d5b98:	00000000 	.word	0x00000000
   d5b9c:	3ff00000 	.word	0x3ff00000
   d5ba0:	8800759c 	.word	0x8800759c
   d5ba4:	7e37e43c 	.word	0x7e37e43c
	...
   d5bb0:	7ff00000 	.word	0x7ff00000
   d5bb4:	3ff00000 	.word	0x3ff00000
   d5bb8:	3fe00000 	.word	0x3fe00000
   d5bbc:	000d7684 	.word	0x000d7684
   d5bc0:	41e00000 	.word	0x41e00000
   d5bc4:	3fefffff 	.word	0x3fefffff
   d5bc8:	433fffff 	.word	0x433fffff
   d5bcc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d5bd0:	f04f 0200 	mov.w	r2, #0
   d5bd4:	da05      	bge.n	d5be2 <__ieee754_pow+0x202>
   d5bd6:	4bd6      	ldr	r3, [pc, #856]	; (d5f30 <__ieee754_pow+0x550>)
   d5bd8:	f001 f856 	bl	d6c88 <__aeabi_dmul>
   d5bdc:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d5be0:	460c      	mov	r4, r1
   d5be2:	1523      	asrs	r3, r4, #20
   d5be4:	4ed3      	ldr	r6, [pc, #844]	; (d5f34 <__ieee754_pow+0x554>)
   d5be6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d5bea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d5bee:	4413      	add	r3, r2
   d5bf0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d5bf4:	42b4      	cmp	r4, r6
   d5bf6:	461a      	mov	r2, r3
   d5bf8:	930d      	str	r3, [sp, #52]	; 0x34
   d5bfa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d5bfe:	f340 8349 	ble.w	d6294 <__ieee754_pow+0x8b4>
   d5c02:	4bcd      	ldr	r3, [pc, #820]	; (d5f38 <__ieee754_pow+0x558>)
   d5c04:	429c      	cmp	r4, r3
   d5c06:	f340 842d 	ble.w	d6464 <__ieee754_pow+0xa84>
   d5c0a:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d5ed8 <__ieee754_pow+0x4f8>
   d5c0e:	ed8d 7b08 	vstr	d7, [sp, #32]
   d5c12:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d5c16:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d5ee0 <__ieee754_pow+0x500>
   d5c1a:	4613      	mov	r3, r2
   d5c1c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5c20:	3301      	adds	r3, #1
   d5c22:	930d      	str	r3, [sp, #52]	; 0x34
   d5c24:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d5c28:	f04f 0800 	mov.w	r8, #0
   d5c2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5c30:	4629      	mov	r1, r5
   d5c32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d5c36:	f000 fe73 	bl	d6920 <__aeabi_dsub>
   d5c3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5c3e:	4606      	mov	r6, r0
   d5c40:	460f      	mov	r7, r1
   d5c42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d5c46:	f000 fe6d 	bl	d6924 <__adddf3>
   d5c4a:	4602      	mov	r2, r0
   d5c4c:	460b      	mov	r3, r1
   d5c4e:	2000      	movs	r0, #0
   d5c50:	49ba      	ldr	r1, [pc, #744]	; (d5f3c <__ieee754_pow+0x55c>)
   d5c52:	f001 f943 	bl	d6edc <__aeabi_ddiv>
   d5c56:	4603      	mov	r3, r0
   d5c58:	460c      	mov	r4, r1
   d5c5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d5c5e:	4602      	mov	r2, r0
   d5c60:	460b      	mov	r3, r1
   d5c62:	4630      	mov	r0, r6
   d5c64:	4639      	mov	r1, r7
   d5c66:	f001 f80f 	bl	d6c88 <__aeabi_dmul>
   d5c6a:	106b      	asrs	r3, r5, #1
   d5c6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d5c70:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d5c74:	eb03 0508 	add.w	r5, r3, r8
   d5c78:	460a      	mov	r2, r1
   d5c7a:	2300      	movs	r3, #0
   d5c7c:	4601      	mov	r1, r0
   d5c7e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d5c82:	9302      	str	r3, [sp, #8]
   d5c84:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d5c88:	2400      	movs	r4, #0
   d5c8a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d5c8e:	462b      	mov	r3, r5
   d5c90:	4622      	mov	r2, r4
   d5c92:	4640      	mov	r0, r8
   d5c94:	4649      	mov	r1, r9
   d5c96:	f000 fff7 	bl	d6c88 <__aeabi_dmul>
   d5c9a:	4602      	mov	r2, r0
   d5c9c:	460b      	mov	r3, r1
   d5c9e:	4630      	mov	r0, r6
   d5ca0:	4639      	mov	r1, r7
   d5ca2:	f000 fe3d 	bl	d6920 <__aeabi_dsub>
   d5ca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5caa:	4606      	mov	r6, r0
   d5cac:	460f      	mov	r7, r1
   d5cae:	4620      	mov	r0, r4
   d5cb0:	4629      	mov	r1, r5
   d5cb2:	f000 fe35 	bl	d6920 <__aeabi_dsub>
   d5cb6:	4602      	mov	r2, r0
   d5cb8:	460b      	mov	r3, r1
   d5cba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d5cbe:	f000 fe2f 	bl	d6920 <__aeabi_dsub>
   d5cc2:	4642      	mov	r2, r8
   d5cc4:	464b      	mov	r3, r9
   d5cc6:	f000 ffdf 	bl	d6c88 <__aeabi_dmul>
   d5cca:	4602      	mov	r2, r0
   d5ccc:	460b      	mov	r3, r1
   d5cce:	4630      	mov	r0, r6
   d5cd0:	4639      	mov	r1, r7
   d5cd2:	f000 fe25 	bl	d6920 <__aeabi_dsub>
   d5cd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d5cda:	f000 ffd5 	bl	d6c88 <__aeabi_dmul>
   d5cde:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d5ce2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5ce6:	4622      	mov	r2, r4
   d5ce8:	462b      	mov	r3, r5
   d5cea:	4620      	mov	r0, r4
   d5cec:	4629      	mov	r1, r5
   d5cee:	f000 ffcb 	bl	d6c88 <__aeabi_dmul>
   d5cf2:	a37d      	add	r3, pc, #500	; (adr r3, d5ee8 <__ieee754_pow+0x508>)
   d5cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5cf8:	4604      	mov	r4, r0
   d5cfa:	460d      	mov	r5, r1
   d5cfc:	f000 ffc4 	bl	d6c88 <__aeabi_dmul>
   d5d00:	a37b      	add	r3, pc, #492	; (adr r3, d5ef0 <__ieee754_pow+0x510>)
   d5d02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d06:	f000 fe0d 	bl	d6924 <__adddf3>
   d5d0a:	4622      	mov	r2, r4
   d5d0c:	462b      	mov	r3, r5
   d5d0e:	f000 ffbb 	bl	d6c88 <__aeabi_dmul>
   d5d12:	a379      	add	r3, pc, #484	; (adr r3, d5ef8 <__ieee754_pow+0x518>)
   d5d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d18:	f000 fe04 	bl	d6924 <__adddf3>
   d5d1c:	4622      	mov	r2, r4
   d5d1e:	462b      	mov	r3, r5
   d5d20:	f000 ffb2 	bl	d6c88 <__aeabi_dmul>
   d5d24:	a376      	add	r3, pc, #472	; (adr r3, d5f00 <__ieee754_pow+0x520>)
   d5d26:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d2a:	f000 fdfb 	bl	d6924 <__adddf3>
   d5d2e:	4622      	mov	r2, r4
   d5d30:	462b      	mov	r3, r5
   d5d32:	f000 ffa9 	bl	d6c88 <__aeabi_dmul>
   d5d36:	a374      	add	r3, pc, #464	; (adr r3, d5f08 <__ieee754_pow+0x528>)
   d5d38:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d3c:	f000 fdf2 	bl	d6924 <__adddf3>
   d5d40:	4622      	mov	r2, r4
   d5d42:	462b      	mov	r3, r5
   d5d44:	f000 ffa0 	bl	d6c88 <__aeabi_dmul>
   d5d48:	a371      	add	r3, pc, #452	; (adr r3, d5f10 <__ieee754_pow+0x530>)
   d5d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d4e:	f000 fde9 	bl	d6924 <__adddf3>
   d5d52:	4622      	mov	r2, r4
   d5d54:	4606      	mov	r6, r0
   d5d56:	460f      	mov	r7, r1
   d5d58:	462b      	mov	r3, r5
   d5d5a:	4620      	mov	r0, r4
   d5d5c:	4629      	mov	r1, r5
   d5d5e:	f000 ff93 	bl	d6c88 <__aeabi_dmul>
   d5d62:	4602      	mov	r2, r0
   d5d64:	460b      	mov	r3, r1
   d5d66:	4630      	mov	r0, r6
   d5d68:	4639      	mov	r1, r7
   d5d6a:	f000 ff8d 	bl	d6c88 <__aeabi_dmul>
   d5d6e:	4642      	mov	r2, r8
   d5d70:	4604      	mov	r4, r0
   d5d72:	460d      	mov	r5, r1
   d5d74:	464b      	mov	r3, r9
   d5d76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5d7a:	f000 fdd3 	bl	d6924 <__adddf3>
   d5d7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5d82:	f000 ff81 	bl	d6c88 <__aeabi_dmul>
   d5d86:	4622      	mov	r2, r4
   d5d88:	462b      	mov	r3, r5
   d5d8a:	f000 fdcb 	bl	d6924 <__adddf3>
   d5d8e:	4642      	mov	r2, r8
   d5d90:	4606      	mov	r6, r0
   d5d92:	460f      	mov	r7, r1
   d5d94:	464b      	mov	r3, r9
   d5d96:	4640      	mov	r0, r8
   d5d98:	4649      	mov	r1, r9
   d5d9a:	f000 ff75 	bl	d6c88 <__aeabi_dmul>
   d5d9e:	2200      	movs	r2, #0
   d5da0:	4b67      	ldr	r3, [pc, #412]	; (d5f40 <__ieee754_pow+0x560>)
   d5da2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d5da6:	f000 fdbd 	bl	d6924 <__adddf3>
   d5daa:	4632      	mov	r2, r6
   d5dac:	463b      	mov	r3, r7
   d5dae:	f000 fdb9 	bl	d6924 <__adddf3>
   d5db2:	9802      	ldr	r0, [sp, #8]
   d5db4:	460d      	mov	r5, r1
   d5db6:	4604      	mov	r4, r0
   d5db8:	4622      	mov	r2, r4
   d5dba:	462b      	mov	r3, r5
   d5dbc:	4640      	mov	r0, r8
   d5dbe:	4649      	mov	r1, r9
   d5dc0:	f000 ff62 	bl	d6c88 <__aeabi_dmul>
   d5dc4:	2200      	movs	r2, #0
   d5dc6:	4680      	mov	r8, r0
   d5dc8:	4689      	mov	r9, r1
   d5dca:	4b5d      	ldr	r3, [pc, #372]	; (d5f40 <__ieee754_pow+0x560>)
   d5dcc:	4620      	mov	r0, r4
   d5dce:	4629      	mov	r1, r5
   d5dd0:	f000 fda6 	bl	d6920 <__aeabi_dsub>
   d5dd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5dd8:	f000 fda2 	bl	d6920 <__aeabi_dsub>
   d5ddc:	4602      	mov	r2, r0
   d5dde:	460b      	mov	r3, r1
   d5de0:	4630      	mov	r0, r6
   d5de2:	4639      	mov	r1, r7
   d5de4:	f000 fd9c 	bl	d6920 <__aeabi_dsub>
   d5de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d5dec:	f000 ff4c 	bl	d6c88 <__aeabi_dmul>
   d5df0:	4622      	mov	r2, r4
   d5df2:	4606      	mov	r6, r0
   d5df4:	460f      	mov	r7, r1
   d5df6:	462b      	mov	r3, r5
   d5df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d5dfc:	f000 ff44 	bl	d6c88 <__aeabi_dmul>
   d5e00:	4602      	mov	r2, r0
   d5e02:	460b      	mov	r3, r1
   d5e04:	4630      	mov	r0, r6
   d5e06:	4639      	mov	r1, r7
   d5e08:	f000 fd8c 	bl	d6924 <__adddf3>
   d5e0c:	4606      	mov	r6, r0
   d5e0e:	460f      	mov	r7, r1
   d5e10:	4602      	mov	r2, r0
   d5e12:	460b      	mov	r3, r1
   d5e14:	4640      	mov	r0, r8
   d5e16:	4649      	mov	r1, r9
   d5e18:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d5e1c:	f000 fd82 	bl	d6924 <__adddf3>
   d5e20:	9802      	ldr	r0, [sp, #8]
   d5e22:	a33d      	add	r3, pc, #244	; (adr r3, d5f18 <__ieee754_pow+0x538>)
   d5e24:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e28:	4604      	mov	r4, r0
   d5e2a:	460d      	mov	r5, r1
   d5e2c:	f000 ff2c 	bl	d6c88 <__aeabi_dmul>
   d5e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d5e34:	4680      	mov	r8, r0
   d5e36:	4689      	mov	r9, r1
   d5e38:	4620      	mov	r0, r4
   d5e3a:	4629      	mov	r1, r5
   d5e3c:	f000 fd70 	bl	d6920 <__aeabi_dsub>
   d5e40:	4602      	mov	r2, r0
   d5e42:	460b      	mov	r3, r1
   d5e44:	4630      	mov	r0, r6
   d5e46:	4639      	mov	r1, r7
   d5e48:	f000 fd6a 	bl	d6920 <__aeabi_dsub>
   d5e4c:	a334      	add	r3, pc, #208	; (adr r3, d5f20 <__ieee754_pow+0x540>)
   d5e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e52:	f000 ff19 	bl	d6c88 <__aeabi_dmul>
   d5e56:	a334      	add	r3, pc, #208	; (adr r3, d5f28 <__ieee754_pow+0x548>)
   d5e58:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e5c:	4606      	mov	r6, r0
   d5e5e:	460f      	mov	r7, r1
   d5e60:	4620      	mov	r0, r4
   d5e62:	4629      	mov	r1, r5
   d5e64:	f000 ff10 	bl	d6c88 <__aeabi_dmul>
   d5e68:	4602      	mov	r2, r0
   d5e6a:	460b      	mov	r3, r1
   d5e6c:	4630      	mov	r0, r6
   d5e6e:	4639      	mov	r1, r7
   d5e70:	f000 fd58 	bl	d6924 <__adddf3>
   d5e74:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d5e78:	f000 fd54 	bl	d6924 <__adddf3>
   d5e7c:	4606      	mov	r6, r0
   d5e7e:	980d      	ldr	r0, [sp, #52]	; 0x34
   d5e80:	460f      	mov	r7, r1
   d5e82:	f000 fe9b 	bl	d6bbc <__aeabi_i2d>
   d5e86:	4632      	mov	r2, r6
   d5e88:	4604      	mov	r4, r0
   d5e8a:	460d      	mov	r5, r1
   d5e8c:	463b      	mov	r3, r7
   d5e8e:	4640      	mov	r0, r8
   d5e90:	4649      	mov	r1, r9
   d5e92:	f000 fd47 	bl	d6924 <__adddf3>
   d5e96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d5e9a:	f000 fd43 	bl	d6924 <__adddf3>
   d5e9e:	4622      	mov	r2, r4
   d5ea0:	462b      	mov	r3, r5
   d5ea2:	f000 fd3f 	bl	d6924 <__adddf3>
   d5ea6:	9802      	ldr	r0, [sp, #8]
   d5ea8:	4622      	mov	r2, r4
   d5eaa:	462b      	mov	r3, r5
   d5eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5eb0:	f000 fd36 	bl	d6920 <__aeabi_dsub>
   d5eb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d5eb8:	f000 fd32 	bl	d6920 <__aeabi_dsub>
   d5ebc:	4642      	mov	r2, r8
   d5ebe:	464b      	mov	r3, r9
   d5ec0:	f000 fd2e 	bl	d6920 <__aeabi_dsub>
   d5ec4:	4602      	mov	r2, r0
   d5ec6:	460b      	mov	r3, r1
   d5ec8:	4630      	mov	r0, r6
   d5eca:	4639      	mov	r1, r7
   d5ecc:	f000 fd28 	bl	d6920 <__aeabi_dsub>
   d5ed0:	4680      	mov	r8, r0
   d5ed2:	4689      	mov	r9, r1
   d5ed4:	e036      	b.n	d5f44 <__ieee754_pow+0x564>
   d5ed6:	bf00      	nop
	...
   d5ee4:	3ff00000 	.word	0x3ff00000
   d5ee8:	4a454eef 	.word	0x4a454eef
   d5eec:	3fca7e28 	.word	0x3fca7e28
   d5ef0:	93c9db65 	.word	0x93c9db65
   d5ef4:	3fcd864a 	.word	0x3fcd864a
   d5ef8:	a91d4101 	.word	0xa91d4101
   d5efc:	3fd17460 	.word	0x3fd17460
   d5f00:	518f264d 	.word	0x518f264d
   d5f04:	3fd55555 	.word	0x3fd55555
   d5f08:	db6fabff 	.word	0xdb6fabff
   d5f0c:	3fdb6db6 	.word	0x3fdb6db6
   d5f10:	33333303 	.word	0x33333303
   d5f14:	3fe33333 	.word	0x3fe33333
   d5f18:	e0000000 	.word	0xe0000000
   d5f1c:	3feec709 	.word	0x3feec709
   d5f20:	dc3a03fd 	.word	0xdc3a03fd
   d5f24:	3feec709 	.word	0x3feec709
   d5f28:	145b01f5 	.word	0x145b01f5
   d5f2c:	be3e2fe0 	.word	0xbe3e2fe0
   d5f30:	43400000 	.word	0x43400000
   d5f34:	0003988e 	.word	0x0003988e
   d5f38:	000bb679 	.word	0x000bb679
   d5f3c:	3ff00000 	.word	0x3ff00000
   d5f40:	40080000 	.word	0x40080000
   d5f44:	f10b 33ff 	add.w	r3, fp, #4294967295
   d5f48:	ea53 030a 	orrs.w	r3, r3, sl
   d5f4c:	f000 8188 	beq.w	d6260 <__ieee754_pow+0x880>
   d5f50:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d62b0 <__ieee754_pow+0x8d0>
   d5f54:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5f58:	e9dd ab00 	ldrd	sl, fp, [sp]
   d5f5c:	4653      	mov	r3, sl
   d5f5e:	465c      	mov	r4, fp
   d5f60:	e9cd 3400 	strd	r3, r4, [sp]
   d5f64:	2300      	movs	r3, #0
   d5f66:	9300      	str	r3, [sp, #0]
   d5f68:	e9dd 4500 	ldrd	r4, r5, [sp]
   d5f6c:	4650      	mov	r0, sl
   d5f6e:	4622      	mov	r2, r4
   d5f70:	462b      	mov	r3, r5
   d5f72:	4659      	mov	r1, fp
   d5f74:	f000 fcd4 	bl	d6920 <__aeabi_dsub>
   d5f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5f7c:	f000 fe84 	bl	d6c88 <__aeabi_dmul>
   d5f80:	4652      	mov	r2, sl
   d5f82:	4606      	mov	r6, r0
   d5f84:	460f      	mov	r7, r1
   d5f86:	465b      	mov	r3, fp
   d5f88:	4640      	mov	r0, r8
   d5f8a:	4649      	mov	r1, r9
   d5f8c:	f000 fe7c 	bl	d6c88 <__aeabi_dmul>
   d5f90:	4602      	mov	r2, r0
   d5f92:	460b      	mov	r3, r1
   d5f94:	4630      	mov	r0, r6
   d5f96:	4639      	mov	r1, r7
   d5f98:	f000 fcc4 	bl	d6924 <__adddf3>
   d5f9c:	4622      	mov	r2, r4
   d5f9e:	4680      	mov	r8, r0
   d5fa0:	4689      	mov	r9, r1
   d5fa2:	462b      	mov	r3, r5
   d5fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d5fa8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d5fac:	f000 fe6c 	bl	d6c88 <__aeabi_dmul>
   d5fb0:	460b      	mov	r3, r1
   d5fb2:	4602      	mov	r2, r0
   d5fb4:	4606      	mov	r6, r0
   d5fb6:	460f      	mov	r7, r1
   d5fb8:	4640      	mov	r0, r8
   d5fba:	4649      	mov	r1, r9
   d5fbc:	f000 fcb2 	bl	d6924 <__adddf3>
   d5fc0:	4bd5      	ldr	r3, [pc, #852]	; (d6318 <__ieee754_pow+0x938>)
   d5fc2:	4299      	cmp	r1, r3
   d5fc4:	4604      	mov	r4, r0
   d5fc6:	460d      	mov	r5, r1
   d5fc8:	468a      	mov	sl, r1
   d5fca:	f340 8123 	ble.w	d6214 <__ieee754_pow+0x834>
   d5fce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d5fd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d5fd6:	4303      	orrs	r3, r0
   d5fd8:	f040 8218 	bne.w	d640c <__ieee754_pow+0xa2c>
   d5fdc:	a3b6      	add	r3, pc, #728	; (adr r3, d62b8 <__ieee754_pow+0x8d8>)
   d5fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5fe6:	f000 fc9d 	bl	d6924 <__adddf3>
   d5fea:	4632      	mov	r2, r6
   d5fec:	4680      	mov	r8, r0
   d5fee:	4689      	mov	r9, r1
   d5ff0:	463b      	mov	r3, r7
   d5ff2:	4620      	mov	r0, r4
   d5ff4:	4629      	mov	r1, r5
   d5ff6:	f000 fc93 	bl	d6920 <__aeabi_dsub>
   d5ffa:	4602      	mov	r2, r0
   d5ffc:	460b      	mov	r3, r1
   d5ffe:	4640      	mov	r0, r8
   d6000:	4649      	mov	r1, r9
   d6002:	f001 f8d1 	bl	d71a8 <__aeabi_dcmpgt>
   d6006:	2800      	cmp	r0, #0
   d6008:	f040 8200 	bne.w	d640c <__ieee754_pow+0xa2c>
   d600c:	46a8      	mov	r8, r5
   d600e:	ea4f 5328 	mov.w	r3, r8, asr #20
   d6012:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d6016:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d601a:	fa42 f303 	asr.w	r3, r2, r3
   d601e:	4453      	add	r3, sl
   d6020:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d6024:	4dbd      	ldr	r5, [pc, #756]	; (d631c <__ieee754_pow+0x93c>)
   d6026:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d602a:	4115      	asrs	r5, r2
   d602c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d6030:	2000      	movs	r0, #0
   d6032:	f1c2 0414 	rsb	r4, r2, #20
   d6036:	ea23 0105 	bic.w	r1, r3, r5
   d603a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d603e:	f1ba 0f00 	cmp.w	sl, #0
   d6042:	4602      	mov	r2, r0
   d6044:	460b      	mov	r3, r1
   d6046:	fa4b fb04 	asr.w	fp, fp, r4
   d604a:	4630      	mov	r0, r6
   d604c:	4639      	mov	r1, r7
   d604e:	bfb8      	it	lt
   d6050:	f1cb 0b00 	rsblt	fp, fp, #0
   d6054:	f000 fc64 	bl	d6920 <__aeabi_dsub>
   d6058:	4602      	mov	r2, r0
   d605a:	460b      	mov	r3, r1
   d605c:	4606      	mov	r6, r0
   d605e:	460f      	mov	r7, r1
   d6060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6064:	f000 fc5e 	bl	d6924 <__adddf3>
   d6068:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d606c:	2400      	movs	r4, #0
   d606e:	a394      	add	r3, pc, #592	; (adr r3, d62c0 <__ieee754_pow+0x8e0>)
   d6070:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6074:	4620      	mov	r0, r4
   d6076:	460d      	mov	r5, r1
   d6078:	f000 fe06 	bl	d6c88 <__aeabi_dmul>
   d607c:	4632      	mov	r2, r6
   d607e:	4680      	mov	r8, r0
   d6080:	4689      	mov	r9, r1
   d6082:	463b      	mov	r3, r7
   d6084:	4620      	mov	r0, r4
   d6086:	4629      	mov	r1, r5
   d6088:	f000 fc4a 	bl	d6920 <__aeabi_dsub>
   d608c:	4602      	mov	r2, r0
   d608e:	460b      	mov	r3, r1
   d6090:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6094:	f000 fc44 	bl	d6920 <__aeabi_dsub>
   d6098:	a38b      	add	r3, pc, #556	; (adr r3, d62c8 <__ieee754_pow+0x8e8>)
   d609a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d609e:	f000 fdf3 	bl	d6c88 <__aeabi_dmul>
   d60a2:	a38b      	add	r3, pc, #556	; (adr r3, d62d0 <__ieee754_pow+0x8f0>)
   d60a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60a8:	4606      	mov	r6, r0
   d60aa:	460f      	mov	r7, r1
   d60ac:	4620      	mov	r0, r4
   d60ae:	4629      	mov	r1, r5
   d60b0:	f000 fdea 	bl	d6c88 <__aeabi_dmul>
   d60b4:	4602      	mov	r2, r0
   d60b6:	460b      	mov	r3, r1
   d60b8:	4630      	mov	r0, r6
   d60ba:	4639      	mov	r1, r7
   d60bc:	f000 fc32 	bl	d6924 <__adddf3>
   d60c0:	4606      	mov	r6, r0
   d60c2:	460f      	mov	r7, r1
   d60c4:	4602      	mov	r2, r0
   d60c6:	460b      	mov	r3, r1
   d60c8:	4640      	mov	r0, r8
   d60ca:	4649      	mov	r1, r9
   d60cc:	f000 fc2a 	bl	d6924 <__adddf3>
   d60d0:	4642      	mov	r2, r8
   d60d2:	464b      	mov	r3, r9
   d60d4:	4604      	mov	r4, r0
   d60d6:	460d      	mov	r5, r1
   d60d8:	f000 fc22 	bl	d6920 <__aeabi_dsub>
   d60dc:	4602      	mov	r2, r0
   d60de:	460b      	mov	r3, r1
   d60e0:	4630      	mov	r0, r6
   d60e2:	4639      	mov	r1, r7
   d60e4:	f000 fc1c 	bl	d6920 <__aeabi_dsub>
   d60e8:	4622      	mov	r2, r4
   d60ea:	4680      	mov	r8, r0
   d60ec:	4689      	mov	r9, r1
   d60ee:	462b      	mov	r3, r5
   d60f0:	4620      	mov	r0, r4
   d60f2:	4629      	mov	r1, r5
   d60f4:	f000 fdc8 	bl	d6c88 <__aeabi_dmul>
   d60f8:	a377      	add	r3, pc, #476	; (adr r3, d62d8 <__ieee754_pow+0x8f8>)
   d60fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60fe:	4606      	mov	r6, r0
   d6100:	460f      	mov	r7, r1
   d6102:	f000 fdc1 	bl	d6c88 <__aeabi_dmul>
   d6106:	a376      	add	r3, pc, #472	; (adr r3, d62e0 <__ieee754_pow+0x900>)
   d6108:	e9d3 2300 	ldrd	r2, r3, [r3]
   d610c:	f000 fc08 	bl	d6920 <__aeabi_dsub>
   d6110:	4632      	mov	r2, r6
   d6112:	463b      	mov	r3, r7
   d6114:	f000 fdb8 	bl	d6c88 <__aeabi_dmul>
   d6118:	a373      	add	r3, pc, #460	; (adr r3, d62e8 <__ieee754_pow+0x908>)
   d611a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d611e:	f000 fc01 	bl	d6924 <__adddf3>
   d6122:	4632      	mov	r2, r6
   d6124:	463b      	mov	r3, r7
   d6126:	f000 fdaf 	bl	d6c88 <__aeabi_dmul>
   d612a:	a371      	add	r3, pc, #452	; (adr r3, d62f0 <__ieee754_pow+0x910>)
   d612c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6130:	f000 fbf6 	bl	d6920 <__aeabi_dsub>
   d6134:	4632      	mov	r2, r6
   d6136:	463b      	mov	r3, r7
   d6138:	f000 fda6 	bl	d6c88 <__aeabi_dmul>
   d613c:	a36e      	add	r3, pc, #440	; (adr r3, d62f8 <__ieee754_pow+0x918>)
   d613e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6142:	f000 fbef 	bl	d6924 <__adddf3>
   d6146:	4632      	mov	r2, r6
   d6148:	463b      	mov	r3, r7
   d614a:	f000 fd9d 	bl	d6c88 <__aeabi_dmul>
   d614e:	4602      	mov	r2, r0
   d6150:	460b      	mov	r3, r1
   d6152:	4620      	mov	r0, r4
   d6154:	4629      	mov	r1, r5
   d6156:	f000 fbe3 	bl	d6920 <__aeabi_dsub>
   d615a:	4606      	mov	r6, r0
   d615c:	460f      	mov	r7, r1
   d615e:	4602      	mov	r2, r0
   d6160:	460b      	mov	r3, r1
   d6162:	4620      	mov	r0, r4
   d6164:	4629      	mov	r1, r5
   d6166:	f000 fd8f 	bl	d6c88 <__aeabi_dmul>
   d616a:	2200      	movs	r2, #0
   d616c:	e9cd 0100 	strd	r0, r1, [sp]
   d6170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6174:	4630      	mov	r0, r6
   d6176:	4639      	mov	r1, r7
   d6178:	f000 fbd2 	bl	d6920 <__aeabi_dsub>
   d617c:	4602      	mov	r2, r0
   d617e:	460b      	mov	r3, r1
   d6180:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6184:	f000 feaa 	bl	d6edc <__aeabi_ddiv>
   d6188:	4642      	mov	r2, r8
   d618a:	4606      	mov	r6, r0
   d618c:	460f      	mov	r7, r1
   d618e:	464b      	mov	r3, r9
   d6190:	4620      	mov	r0, r4
   d6192:	4629      	mov	r1, r5
   d6194:	f000 fd78 	bl	d6c88 <__aeabi_dmul>
   d6198:	4642      	mov	r2, r8
   d619a:	464b      	mov	r3, r9
   d619c:	f000 fbc2 	bl	d6924 <__adddf3>
   d61a0:	4602      	mov	r2, r0
   d61a2:	460b      	mov	r3, r1
   d61a4:	4630      	mov	r0, r6
   d61a6:	4639      	mov	r1, r7
   d61a8:	f000 fbba 	bl	d6920 <__aeabi_dsub>
   d61ac:	4622      	mov	r2, r4
   d61ae:	462b      	mov	r3, r5
   d61b0:	f000 fbb6 	bl	d6920 <__aeabi_dsub>
   d61b4:	4602      	mov	r2, r0
   d61b6:	460b      	mov	r3, r1
   d61b8:	2000      	movs	r0, #0
   d61ba:	4959      	ldr	r1, [pc, #356]	; (d6320 <__ieee754_pow+0x940>)
   d61bc:	f000 fbb0 	bl	d6920 <__aeabi_dsub>
   d61c0:	448a      	add	sl, r1
   d61c2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d61c6:	4602      	mov	r2, r0
   d61c8:	460b      	mov	r3, r1
   d61ca:	f2c0 815b 	blt.w	d6484 <__ieee754_pow+0xaa4>
   d61ce:	4651      	mov	r1, sl
   d61d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d61d4:	f000 fd58 	bl	d6c88 <__aeabi_dmul>
   d61d8:	ec41 0b10 	vmov	d0, r0, r1
   d61dc:	e449      	b.n	d5a72 <__ieee754_pow+0x92>
   d61de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d61e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d61e6:	ea54 030b 	orrs.w	r3, r4, fp
   d61ea:	f000 8137 	beq.w	d645c <__ieee754_pow+0xa7c>
   d61ee:	f1bb 0f01 	cmp.w	fp, #1
   d61f2:	f47f ac80 	bne.w	d5af6 <__ieee754_pow+0x116>
   d61f6:	4602      	mov	r2, r0
   d61f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d61fc:	ec43 2b10 	vmov	d0, r2, r3
   d6200:	e437      	b.n	d5a72 <__ieee754_pow+0x92>
   d6202:	4632      	mov	r2, r6
   d6204:	463b      	mov	r3, r7
   d6206:	4630      	mov	r0, r6
   d6208:	4639      	mov	r1, r7
   d620a:	f000 fd3d 	bl	d6c88 <__aeabi_dmul>
   d620e:	ec41 0b10 	vmov	d0, r0, r1
   d6212:	e42e      	b.n	d5a72 <__ieee754_pow+0x92>
   d6214:	4b43      	ldr	r3, [pc, #268]	; (d6324 <__ieee754_pow+0x944>)
   d6216:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d621a:	4598      	cmp	r8, r3
   d621c:	f340 8115 	ble.w	d644a <__ieee754_pow+0xa6a>
   d6220:	4b41      	ldr	r3, [pc, #260]	; (d6328 <__ieee754_pow+0x948>)
   d6222:	440b      	add	r3, r1
   d6224:	4303      	orrs	r3, r0
   d6226:	d10c      	bne.n	d6242 <__ieee754_pow+0x862>
   d6228:	4632      	mov	r2, r6
   d622a:	463b      	mov	r3, r7
   d622c:	f000 fb78 	bl	d6920 <__aeabi_dsub>
   d6230:	4602      	mov	r2, r0
   d6232:	460b      	mov	r3, r1
   d6234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6238:	f000 ffa2 	bl	d7180 <__aeabi_dcmple>
   d623c:	2800      	cmp	r0, #0
   d623e:	f43f aee6 	beq.w	d600e <__ieee754_pow+0x62e>
   d6242:	a32f      	add	r3, pc, #188	; (adr r3, d6300 <__ieee754_pow+0x920>)
   d6244:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d624c:	f000 fd1c 	bl	d6c88 <__aeabi_dmul>
   d6250:	a32b      	add	r3, pc, #172	; (adr r3, d6300 <__ieee754_pow+0x920>)
   d6252:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6256:	f000 fd17 	bl	d6c88 <__aeabi_dmul>
   d625a:	ec41 0b10 	vmov	d0, r0, r1
   d625e:	e408      	b.n	d5a72 <__ieee754_pow+0x92>
   d6260:	ed9f 7b29 	vldr	d7, [pc, #164]	; d6308 <__ieee754_pow+0x928>
   d6264:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6268:	e676      	b.n	d5f58 <__ieee754_pow+0x578>
   d626a:	f1b9 0f00 	cmp.w	r9, #0
   d626e:	f6bf ac8e 	bge.w	d5b8e <__ieee754_pow+0x1ae>
   d6272:	e9dd 3400 	ldrd	r3, r4, [sp]
   d6276:	ee00 3a10 	vmov	s0, r3
   d627a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d627e:	ee00 3a90 	vmov	s1, r3
   d6282:	f7ff bbf6 	b.w	d5a72 <__ieee754_pow+0x92>
   d6286:	4602      	mov	r2, r0
   d6288:	460b      	mov	r3, r1
   d628a:	2000      	movs	r0, #0
   d628c:	4924      	ldr	r1, [pc, #144]	; (d6320 <__ieee754_pow+0x940>)
   d628e:	f000 fe25 	bl	d6edc <__aeabi_ddiv>
   d6292:	e42d      	b.n	d5af0 <__ieee754_pow+0x110>
   d6294:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d6310 <__ieee754_pow+0x930>
   d6298:	ed8d 7b08 	vstr	d7, [sp, #32]
   d629c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d62a0:	ed9f 7b03 	vldr	d7, [pc, #12]	; d62b0 <__ieee754_pow+0x8d0>
   d62a4:	f04f 0800 	mov.w	r8, #0
   d62a8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d62ac:	e4be      	b.n	d5c2c <__ieee754_pow+0x24c>
   d62ae:	bf00      	nop
   d62b0:	00000000 	.word	0x00000000
   d62b4:	3ff00000 	.word	0x3ff00000
   d62b8:	652b82fe 	.word	0x652b82fe
   d62bc:	3c971547 	.word	0x3c971547
   d62c0:	00000000 	.word	0x00000000
   d62c4:	3fe62e43 	.word	0x3fe62e43
   d62c8:	fefa39ef 	.word	0xfefa39ef
   d62cc:	3fe62e42 	.word	0x3fe62e42
   d62d0:	0ca86c39 	.word	0x0ca86c39
   d62d4:	be205c61 	.word	0xbe205c61
   d62d8:	72bea4d0 	.word	0x72bea4d0
   d62dc:	3e663769 	.word	0x3e663769
   d62e0:	c5d26bf1 	.word	0xc5d26bf1
   d62e4:	3ebbbd41 	.word	0x3ebbbd41
   d62e8:	af25de2c 	.word	0xaf25de2c
   d62ec:	3f11566a 	.word	0x3f11566a
   d62f0:	16bebd93 	.word	0x16bebd93
   d62f4:	3f66c16c 	.word	0x3f66c16c
   d62f8:	5555553e 	.word	0x5555553e
   d62fc:	3fc55555 	.word	0x3fc55555
   d6300:	c2f8f359 	.word	0xc2f8f359
   d6304:	01a56e1f 	.word	0x01a56e1f
   d6308:	00000000 	.word	0x00000000
   d630c:	bff00000 	.word	0xbff00000
	...
   d6318:	408fffff 	.word	0x408fffff
   d631c:	000fffff 	.word	0x000fffff
   d6320:	3ff00000 	.word	0x3ff00000
   d6324:	4090cbff 	.word	0x4090cbff
   d6328:	3f6f3400 	.word	0x3f6f3400
   d632c:	4b6c      	ldr	r3, [pc, #432]	; (d64e0 <__ieee754_pow+0xb00>)
   d632e:	429c      	cmp	r4, r3
   d6330:	f77f ac2a 	ble.w	d5b88 <__ieee754_pow+0x1a8>
   d6334:	4b6b      	ldr	r3, [pc, #428]	; (d64e4 <__ieee754_pow+0xb04>)
   d6336:	429c      	cmp	r4, r3
   d6338:	f73f abc3 	bgt.w	d5ac2 <__ieee754_pow+0xe2>
   d633c:	2200      	movs	r2, #0
   d633e:	4b69      	ldr	r3, [pc, #420]	; (d64e4 <__ieee754_pow+0xb04>)
   d6340:	f000 faee 	bl	d6920 <__aeabi_dsub>
   d6344:	a356      	add	r3, pc, #344	; (adr r3, d64a0 <__ieee754_pow+0xac0>)
   d6346:	e9d3 2300 	ldrd	r2, r3, [r3]
   d634a:	4604      	mov	r4, r0
   d634c:	460d      	mov	r5, r1
   d634e:	f000 fc9b 	bl	d6c88 <__aeabi_dmul>
   d6352:	a355      	add	r3, pc, #340	; (adr r3, d64a8 <__ieee754_pow+0xac8>)
   d6354:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6358:	4680      	mov	r8, r0
   d635a:	4689      	mov	r9, r1
   d635c:	4620      	mov	r0, r4
   d635e:	4629      	mov	r1, r5
   d6360:	f000 fc92 	bl	d6c88 <__aeabi_dmul>
   d6364:	2200      	movs	r2, #0
   d6366:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d636a:	4b5f      	ldr	r3, [pc, #380]	; (d64e8 <__ieee754_pow+0xb08>)
   d636c:	4620      	mov	r0, r4
   d636e:	4629      	mov	r1, r5
   d6370:	f000 fc8a 	bl	d6c88 <__aeabi_dmul>
   d6374:	4602      	mov	r2, r0
   d6376:	460b      	mov	r3, r1
   d6378:	a14d      	add	r1, pc, #308	; (adr r1, d64b0 <__ieee754_pow+0xad0>)
   d637a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d637e:	f000 facf 	bl	d6920 <__aeabi_dsub>
   d6382:	4622      	mov	r2, r4
   d6384:	462b      	mov	r3, r5
   d6386:	f000 fc7f 	bl	d6c88 <__aeabi_dmul>
   d638a:	4602      	mov	r2, r0
   d638c:	460b      	mov	r3, r1
   d638e:	2000      	movs	r0, #0
   d6390:	4956      	ldr	r1, [pc, #344]	; (d64ec <__ieee754_pow+0xb0c>)
   d6392:	f000 fac5 	bl	d6920 <__aeabi_dsub>
   d6396:	4622      	mov	r2, r4
   d6398:	462b      	mov	r3, r5
   d639a:	4606      	mov	r6, r0
   d639c:	460f      	mov	r7, r1
   d639e:	4620      	mov	r0, r4
   d63a0:	4629      	mov	r1, r5
   d63a2:	f000 fc71 	bl	d6c88 <__aeabi_dmul>
   d63a6:	4602      	mov	r2, r0
   d63a8:	460b      	mov	r3, r1
   d63aa:	4630      	mov	r0, r6
   d63ac:	4639      	mov	r1, r7
   d63ae:	f000 fc6b 	bl	d6c88 <__aeabi_dmul>
   d63b2:	a341      	add	r3, pc, #260	; (adr r3, d64b8 <__ieee754_pow+0xad8>)
   d63b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d63b8:	f000 fc66 	bl	d6c88 <__aeabi_dmul>
   d63bc:	4602      	mov	r2, r0
   d63be:	460b      	mov	r3, r1
   d63c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d63c4:	f000 faac 	bl	d6920 <__aeabi_dsub>
   d63c8:	4602      	mov	r2, r0
   d63ca:	460b      	mov	r3, r1
   d63cc:	4604      	mov	r4, r0
   d63ce:	460d      	mov	r5, r1
   d63d0:	4640      	mov	r0, r8
   d63d2:	4649      	mov	r1, r9
   d63d4:	f000 faa6 	bl	d6924 <__adddf3>
   d63d8:	4642      	mov	r2, r8
   d63da:	464b      	mov	r3, r9
   d63dc:	2000      	movs	r0, #0
   d63de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d63e2:	f000 fa9d 	bl	d6920 <__aeabi_dsub>
   d63e6:	4602      	mov	r2, r0
   d63e8:	460b      	mov	r3, r1
   d63ea:	4620      	mov	r0, r4
   d63ec:	4629      	mov	r1, r5
   d63ee:	f000 fa97 	bl	d6920 <__aeabi_dsub>
   d63f2:	4680      	mov	r8, r0
   d63f4:	4689      	mov	r9, r1
   d63f6:	e5a5      	b.n	d5f44 <__ieee754_pow+0x564>
   d63f8:	4632      	mov	r2, r6
   d63fa:	463b      	mov	r3, r7
   d63fc:	2000      	movs	r0, #0
   d63fe:	4939      	ldr	r1, [pc, #228]	; (d64e4 <__ieee754_pow+0xb04>)
   d6400:	f000 fd6c 	bl	d6edc <__aeabi_ddiv>
   d6404:	ec41 0b10 	vmov	d0, r0, r1
   d6408:	f7ff bb33 	b.w	d5a72 <__ieee754_pow+0x92>
   d640c:	a32c      	add	r3, pc, #176	; (adr r3, d64c0 <__ieee754_pow+0xae0>)
   d640e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6412:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6416:	f000 fc37 	bl	d6c88 <__aeabi_dmul>
   d641a:	a329      	add	r3, pc, #164	; (adr r3, d64c0 <__ieee754_pow+0xae0>)
   d641c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6420:	f000 fc32 	bl	d6c88 <__aeabi_dmul>
   d6424:	ec41 0b10 	vmov	d0, r0, r1
   d6428:	f7ff bb23 	b.w	d5a72 <__ieee754_pow+0x92>
   d642c:	f1be 0f00 	cmp.w	lr, #0
   d6430:	f47f ab2a 	bne.w	d5a88 <__ieee754_pow+0xa8>
   d6434:	f1c3 0314 	rsb	r3, r3, #20
   d6438:	fa48 f203 	asr.w	r2, r8, r3
   d643c:	fa02 f303 	lsl.w	r3, r2, r3
   d6440:	4598      	cmp	r8, r3
   d6442:	d027      	beq.n	d6494 <__ieee754_pow+0xab4>
   d6444:	46f3      	mov	fp, lr
   d6446:	f7ff baf7 	b.w	d5a38 <__ieee754_pow+0x58>
   d644a:	4b28      	ldr	r3, [pc, #160]	; (d64ec <__ieee754_pow+0xb0c>)
   d644c:	4598      	cmp	r8, r3
   d644e:	f73f adde 	bgt.w	d600e <__ieee754_pow+0x62e>
   d6452:	e9dd 3400 	ldrd	r3, r4, [sp]
   d6456:	469a      	mov	sl, r3
   d6458:	469b      	mov	fp, r3
   d645a:	e607      	b.n	d606c <__ieee754_pow+0x68c>
   d645c:	4602      	mov	r2, r0
   d645e:	460b      	mov	r3, r1
   d6460:	f7ff bb89 	b.w	d5b76 <__ieee754_pow+0x196>
   d6464:	ed9f 7b18 	vldr	d7, [pc, #96]	; d64c8 <__ieee754_pow+0xae8>
   d6468:	ed8d 7b08 	vstr	d7, [sp, #32]
   d646c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d64d0 <__ieee754_pow+0xaf0>
   d6470:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d6474:	ed9f 7b18 	vldr	d7, [pc, #96]	; d64d8 <__ieee754_pow+0xaf8>
   d6478:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d647c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6480:	f7ff bbd4 	b.w	d5c2c <__ieee754_pow+0x24c>
   d6484:	4658      	mov	r0, fp
   d6486:	ec43 2b10 	vmov	d0, r2, r3
   d648a:	f000 f9b1 	bl	d67f0 <scalbn>
   d648e:	ec51 0b10 	vmov	r0, r1, d0
   d6492:	e69d      	b.n	d61d0 <__ieee754_pow+0x7f0>
   d6494:	f002 0201 	and.w	r2, r2, #1
   d6498:	f1c2 0b02 	rsb	fp, r2, #2
   d649c:	f7ff bacc 	b.w	d5a38 <__ieee754_pow+0x58>
   d64a0:	60000000 	.word	0x60000000
   d64a4:	3ff71547 	.word	0x3ff71547
   d64a8:	f85ddf44 	.word	0xf85ddf44
   d64ac:	3e54ae0b 	.word	0x3e54ae0b
   d64b0:	55555555 	.word	0x55555555
   d64b4:	3fd55555 	.word	0x3fd55555
   d64b8:	652b82fe 	.word	0x652b82fe
   d64bc:	3ff71547 	.word	0x3ff71547
   d64c0:	8800759c 	.word	0x8800759c
   d64c4:	7e37e43c 	.word	0x7e37e43c
   d64c8:	40000000 	.word	0x40000000
   d64cc:	3fe2b803 	.word	0x3fe2b803
   d64d0:	43cfd006 	.word	0x43cfd006
   d64d4:	3e4cfdeb 	.word	0x3e4cfdeb
   d64d8:	00000000 	.word	0x00000000
   d64dc:	3ff80000 	.word	0x3ff80000
   d64e0:	3feffffe 	.word	0x3feffffe
   d64e4:	3ff00000 	.word	0x3ff00000
   d64e8:	3fd00000 	.word	0x3fd00000
   d64ec:	3fe00000 	.word	0x3fe00000

000d64f0 <__ieee754_sqrt>:
   d64f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64f4:	4965      	ldr	r1, [pc, #404]	; (d668c <__ieee754_sqrt+0x19c>)
   d64f6:	ec55 4b10 	vmov	r4, r5, d0
   d64fa:	460e      	mov	r6, r1
   d64fc:	4029      	ands	r1, r5
   d64fe:	42b1      	cmp	r1, r6
   d6500:	f000 8097 	beq.w	d6632 <__ieee754_sqrt+0x142>
   d6504:	2d00      	cmp	r5, #0
   d6506:	462b      	mov	r3, r5
   d6508:	ee10 2a10 	vmov	r2, s0
   d650c:	dd74      	ble.n	d65f8 <__ieee754_sqrt+0x108>
   d650e:	152f      	asrs	r7, r5, #20
   d6510:	d07f      	beq.n	d6612 <__ieee754_sqrt+0x122>
   d6512:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d6516:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d651a:	07f9      	lsls	r1, r7, #31
   d651c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6520:	d465      	bmi.n	d65ee <__ieee754_sqrt+0xfe>
   d6522:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d6526:	2600      	movs	r6, #0
   d6528:	440b      	add	r3, r1
   d652a:	107f      	asrs	r7, r7, #1
   d652c:	0052      	lsls	r2, r2, #1
   d652e:	46b6      	mov	lr, r6
   d6530:	2016      	movs	r0, #22
   d6532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d6536:	eb0e 0401 	add.w	r4, lr, r1
   d653a:	429c      	cmp	r4, r3
   d653c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d6540:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6544:	dc03      	bgt.n	d654e <__ieee754_sqrt+0x5e>
   d6546:	1b1b      	subs	r3, r3, r4
   d6548:	eb04 0e01 	add.w	lr, r4, r1
   d654c:	440e      	add	r6, r1
   d654e:	3801      	subs	r0, #1
   d6550:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d6554:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6558:	d1ed      	bne.n	d6536 <__ieee754_sqrt+0x46>
   d655a:	4684      	mov	ip, r0
   d655c:	2420      	movs	r4, #32
   d655e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d6562:	e009      	b.n	d6578 <__ieee754_sqrt+0x88>
   d6564:	d020      	beq.n	d65a8 <__ieee754_sqrt+0xb8>
   d6566:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d656a:	3c01      	subs	r4, #1
   d656c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6570:	442b      	add	r3, r5
   d6572:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6576:	d020      	beq.n	d65ba <__ieee754_sqrt+0xca>
   d6578:	459e      	cmp	lr, r3
   d657a:	eb01 050c 	add.w	r5, r1, ip
   d657e:	daf1      	bge.n	d6564 <__ieee754_sqrt+0x74>
   d6580:	2d00      	cmp	r5, #0
   d6582:	eb05 0c01 	add.w	ip, r5, r1
   d6586:	db09      	blt.n	d659c <__ieee754_sqrt+0xac>
   d6588:	46f0      	mov	r8, lr
   d658a:	4295      	cmp	r5, r2
   d658c:	ebce 0303 	rsb	r3, lr, r3
   d6590:	d900      	bls.n	d6594 <__ieee754_sqrt+0xa4>
   d6592:	3b01      	subs	r3, #1
   d6594:	1b52      	subs	r2, r2, r5
   d6596:	4408      	add	r0, r1
   d6598:	46c6      	mov	lr, r8
   d659a:	e7e4      	b.n	d6566 <__ieee754_sqrt+0x76>
   d659c:	f1bc 0f00 	cmp.w	ip, #0
   d65a0:	dbf2      	blt.n	d6588 <__ieee754_sqrt+0x98>
   d65a2:	f10e 0801 	add.w	r8, lr, #1
   d65a6:	e7f0      	b.n	d658a <__ieee754_sqrt+0x9a>
   d65a8:	4295      	cmp	r5, r2
   d65aa:	d81e      	bhi.n	d65ea <__ieee754_sqrt+0xfa>
   d65ac:	2d00      	cmp	r5, #0
   d65ae:	eb05 0c01 	add.w	ip, r5, r1
   d65b2:	db50      	blt.n	d6656 <__ieee754_sqrt+0x166>
   d65b4:	4698      	mov	r8, r3
   d65b6:	2300      	movs	r3, #0
   d65b8:	e7ec      	b.n	d6594 <__ieee754_sqrt+0xa4>
   d65ba:	4313      	orrs	r3, r2
   d65bc:	d004      	beq.n	d65c8 <__ieee754_sqrt+0xd8>
   d65be:	1c42      	adds	r2, r0, #1
   d65c0:	d04d      	beq.n	d665e <__ieee754_sqrt+0x16e>
   d65c2:	f000 0301 	and.w	r3, r0, #1
   d65c6:	4418      	add	r0, r3
   d65c8:	0840      	lsrs	r0, r0, #1
   d65ca:	1071      	asrs	r1, r6, #1
   d65cc:	07f3      	lsls	r3, r6, #31
   d65ce:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d65d2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d65d6:	bf48      	it	mi
   d65d8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d65dc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d65e0:	4602      	mov	r2, r0
   d65e2:	ec43 2b10 	vmov	d0, r2, r3
   d65e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65ea:	4673      	mov	r3, lr
   d65ec:	e7bb      	b.n	d6566 <__ieee754_sqrt+0x76>
   d65ee:	005b      	lsls	r3, r3, #1
   d65f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d65f4:	0052      	lsls	r2, r2, #1
   d65f6:	e794      	b.n	d6522 <__ieee754_sqrt+0x32>
   d65f8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d65fc:	4321      	orrs	r1, r4
   d65fe:	d028      	beq.n	d6652 <__ieee754_sqrt+0x162>
   d6600:	bbad      	cbnz	r5, d666e <__ieee754_sqrt+0x17e>
   d6602:	462f      	mov	r7, r5
   d6604:	0ad3      	lsrs	r3, r2, #11
   d6606:	3f15      	subs	r7, #21
   d6608:	0552      	lsls	r2, r2, #21
   d660a:	2b00      	cmp	r3, #0
   d660c:	d0fa      	beq.n	d6604 <__ieee754_sqrt+0x114>
   d660e:	02dd      	lsls	r5, r3, #11
   d6610:	d428      	bmi.n	d6664 <__ieee754_sqrt+0x174>
   d6612:	2100      	movs	r1, #0
   d6614:	e000      	b.n	d6618 <__ieee754_sqrt+0x128>
   d6616:	4601      	mov	r1, r0
   d6618:	005b      	lsls	r3, r3, #1
   d661a:	02dc      	lsls	r4, r3, #11
   d661c:	f101 0001 	add.w	r0, r1, #1
   d6620:	d5f9      	bpl.n	d6616 <__ieee754_sqrt+0x126>
   d6622:	f1c0 0420 	rsb	r4, r0, #32
   d6626:	fa22 f404 	lsr.w	r4, r2, r4
   d662a:	4323      	orrs	r3, r4
   d662c:	1a7f      	subs	r7, r7, r1
   d662e:	4082      	lsls	r2, r0
   d6630:	e76f      	b.n	d6512 <__ieee754_sqrt+0x22>
   d6632:	ee10 2a10 	vmov	r2, s0
   d6636:	462b      	mov	r3, r5
   d6638:	ee10 0a10 	vmov	r0, s0
   d663c:	4629      	mov	r1, r5
   d663e:	f000 fb23 	bl	d6c88 <__aeabi_dmul>
   d6642:	4622      	mov	r2, r4
   d6644:	462b      	mov	r3, r5
   d6646:	f000 f96d 	bl	d6924 <__adddf3>
   d664a:	ec41 0b10 	vmov	d0, r0, r1
   d664e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6656:	f1bc 0f00 	cmp.w	ip, #0
   d665a:	daa2      	bge.n	d65a2 <__ieee754_sqrt+0xb2>
   d665c:	e7aa      	b.n	d65b4 <__ieee754_sqrt+0xc4>
   d665e:	3601      	adds	r6, #1
   d6660:	4620      	mov	r0, r4
   d6662:	e7b2      	b.n	d65ca <__ieee754_sqrt+0xda>
   d6664:	2420      	movs	r4, #32
   d6666:	f04f 31ff 	mov.w	r1, #4294967295
   d666a:	2000      	movs	r0, #0
   d666c:	e7db      	b.n	d6626 <__ieee754_sqrt+0x136>
   d666e:	ee10 2a10 	vmov	r2, s0
   d6672:	462b      	mov	r3, r5
   d6674:	4620      	mov	r0, r4
   d6676:	4629      	mov	r1, r5
   d6678:	f000 f952 	bl	d6920 <__aeabi_dsub>
   d667c:	4602      	mov	r2, r0
   d667e:	460b      	mov	r3, r1
   d6680:	f000 fc2c 	bl	d6edc <__aeabi_ddiv>
   d6684:	ec41 0b10 	vmov	d0, r0, r1
   d6688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d668c:	7ff00000 	.word	0x7ff00000

000d6690 <fabs>:
   d6690:	ec53 2b10 	vmov	r2, r3, d0
   d6694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d6698:	ec43 2b10 	vmov	d0, r2, r3
   d669c:	4770      	bx	lr
   d669e:	bf00      	nop

000d66a0 <finite>:
   d66a0:	ee10 3a90 	vmov	r3, s1
   d66a4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d66a8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d66ac:	0fc0      	lsrs	r0, r0, #31
   d66ae:	4770      	bx	lr

000d66b0 <matherr>:
   d66b0:	2000      	movs	r0, #0
   d66b2:	4770      	bx	lr
   d66b4:	0000      	movs	r0, r0
	...

000d66b8 <nan>:
   d66b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d66c0 <nan+0x8>
   d66bc:	4770      	bx	lr
   d66be:	bf00      	nop
   d66c0:	00000000 	.word	0x00000000
   d66c4:	7ff80000 	.word	0x7ff80000

000d66c8 <rint>:
   d66c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d66ca:	ec53 2b10 	vmov	r2, r3, d0
   d66ce:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d66d2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d66d6:	2813      	cmp	r0, #19
   d66d8:	b083      	sub	sp, #12
   d66da:	4619      	mov	r1, r3
   d66dc:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d66e0:	ee10 5a10 	vmov	r5, s0
   d66e4:	dc2f      	bgt.n	d6746 <rint+0x7e>
   d66e6:	2800      	cmp	r0, #0
   d66e8:	db49      	blt.n	d677e <rint+0xb6>
   d66ea:	4e3f      	ldr	r6, [pc, #252]	; (d67e8 <rint+0x120>)
   d66ec:	4106      	asrs	r6, r0
   d66ee:	ea03 0706 	and.w	r7, r3, r6
   d66f2:	4317      	orrs	r7, r2
   d66f4:	d02c      	beq.n	d6750 <rint+0x88>
   d66f6:	0876      	lsrs	r6, r6, #1
   d66f8:	4033      	ands	r3, r6
   d66fa:	431d      	orrs	r5, r3
   d66fc:	d00c      	beq.n	d6718 <rint+0x50>
   d66fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d6702:	2813      	cmp	r0, #19
   d6704:	ea21 0606 	bic.w	r6, r1, r6
   d6708:	fa43 f100 	asr.w	r1, r3, r0
   d670c:	ea41 0106 	orr.w	r1, r1, r6
   d6710:	bf0c      	ite	eq
   d6712:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d6716:	2500      	movne	r5, #0
   d6718:	4834      	ldr	r0, [pc, #208]	; (d67ec <rint+0x124>)
   d671a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d671e:	462a      	mov	r2, r5
   d6720:	e9d4 4500 	ldrd	r4, r5, [r4]
   d6724:	4610      	mov	r0, r2
   d6726:	462b      	mov	r3, r5
   d6728:	4622      	mov	r2, r4
   d672a:	f000 f8fb 	bl	d6924 <__adddf3>
   d672e:	e9cd 0100 	strd	r0, r1, [sp]
   d6732:	4622      	mov	r2, r4
   d6734:	462b      	mov	r3, r5
   d6736:	e9dd 0100 	ldrd	r0, r1, [sp]
   d673a:	f000 f8f1 	bl	d6920 <__aeabi_dsub>
   d673e:	ec41 0b10 	vmov	d0, r0, r1
   d6742:	b003      	add	sp, #12
   d6744:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6746:	2833      	cmp	r0, #51	; 0x33
   d6748:	dd06      	ble.n	d6758 <rint+0x90>
   d674a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d674e:	d042      	beq.n	d67d6 <rint+0x10e>
   d6750:	ec43 2b10 	vmov	d0, r2, r3
   d6754:	b003      	add	sp, #12
   d6756:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6758:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d675c:	f04f 30ff 	mov.w	r0, #4294967295
   d6760:	40f0      	lsrs	r0, r6
   d6762:	4202      	tst	r2, r0
   d6764:	d0f4      	beq.n	d6750 <rint+0x88>
   d6766:	0840      	lsrs	r0, r0, #1
   d6768:	4202      	tst	r2, r0
   d676a:	d0d5      	beq.n	d6718 <rint+0x50>
   d676c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6770:	ea25 0000 	bic.w	r0, r5, r0
   d6774:	fa43 f606 	asr.w	r6, r3, r6
   d6778:	ea46 0500 	orr.w	r5, r6, r0
   d677c:	e7cc      	b.n	d6718 <rint+0x50>
   d677e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d6782:	4310      	orrs	r0, r2
   d6784:	ee10 7a10 	vmov	r7, s0
   d6788:	d0e2      	beq.n	d6750 <rint+0x88>
   d678a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d678e:	4307      	orrs	r7, r0
   d6790:	4278      	negs	r0, r7
   d6792:	4307      	orrs	r7, r0
   d6794:	4815      	ldr	r0, [pc, #84]	; (d67ec <rint+0x124>)
   d6796:	0c59      	lsrs	r1, r3, #17
   d6798:	0b3f      	lsrs	r7, r7, #12
   d679a:	0449      	lsls	r1, r1, #17
   d679c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d67a0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d67a4:	ea47 0301 	orr.w	r3, r7, r1
   d67a8:	e9d0 6700 	ldrd	r6, r7, [r0]
   d67ac:	4619      	mov	r1, r3
   d67ae:	4610      	mov	r0, r2
   d67b0:	463b      	mov	r3, r7
   d67b2:	4632      	mov	r2, r6
   d67b4:	f000 f8b6 	bl	d6924 <__adddf3>
   d67b8:	e9cd 0100 	strd	r0, r1, [sp]
   d67bc:	463b      	mov	r3, r7
   d67be:	4632      	mov	r2, r6
   d67c0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d67c4:	f000 f8ac 	bl	d6920 <__aeabi_dsub>
   d67c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d67cc:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d67d0:	ec41 0b10 	vmov	d0, r0, r1
   d67d4:	e7be      	b.n	d6754 <rint+0x8c>
   d67d6:	ee10 0a10 	vmov	r0, s0
   d67da:	4619      	mov	r1, r3
   d67dc:	f000 f8a2 	bl	d6924 <__adddf3>
   d67e0:	ec41 0b10 	vmov	d0, r0, r1
   d67e4:	e7b6      	b.n	d6754 <rint+0x8c>
   d67e6:	bf00      	nop
   d67e8:	000fffff 	.word	0x000fffff
   d67ec:	000d7688 	.word	0x000d7688

000d67f0 <scalbn>:
   d67f0:	ec53 2b10 	vmov	r2, r3, d0
   d67f4:	b570      	push	{r4, r5, r6, lr}
   d67f6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d67fa:	4619      	mov	r1, r3
   d67fc:	4605      	mov	r5, r0
   d67fe:	bb14      	cbnz	r4, d6846 <scalbn+0x56>
   d6800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d6804:	4311      	orrs	r1, r2
   d6806:	d02a      	beq.n	d685e <scalbn+0x6e>
   d6808:	4619      	mov	r1, r3
   d680a:	2200      	movs	r2, #0
   d680c:	4b38      	ldr	r3, [pc, #224]	; (d68f0 <scalbn+0x100>)
   d680e:	4e39      	ldr	r6, [pc, #228]	; (d68f4 <scalbn+0x104>)
   d6810:	ee10 0a10 	vmov	r0, s0
   d6814:	f000 fa38 	bl	d6c88 <__aeabi_dmul>
   d6818:	42b5      	cmp	r5, r6
   d681a:	4602      	mov	r2, r0
   d681c:	460b      	mov	r3, r1
   d681e:	db1f      	blt.n	d6860 <scalbn+0x70>
   d6820:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d6824:	3c36      	subs	r4, #54	; 0x36
   d6826:	442c      	add	r4, r5
   d6828:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d682c:	4284      	cmp	r4, r0
   d682e:	dc1f      	bgt.n	d6870 <scalbn+0x80>
   d6830:	2c00      	cmp	r4, #0
   d6832:	dd2d      	ble.n	d6890 <scalbn+0xa0>
   d6834:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d6838:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d683c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d6840:	ec43 2b10 	vmov	d0, r2, r3
   d6844:	bd70      	pop	{r4, r5, r6, pc}
   d6846:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d684a:	4284      	cmp	r4, r0
   d684c:	d1eb      	bne.n	d6826 <scalbn+0x36>
   d684e:	ee10 0a10 	vmov	r0, s0
   d6852:	4619      	mov	r1, r3
   d6854:	f000 f866 	bl	d6924 <__adddf3>
   d6858:	ec41 0b10 	vmov	d0, r0, r1
   d685c:	bd70      	pop	{r4, r5, r6, pc}
   d685e:	bd70      	pop	{r4, r5, r6, pc}
   d6860:	a31f      	add	r3, pc, #124	; (adr r3, d68e0 <scalbn+0xf0>)
   d6862:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6866:	f000 fa0f 	bl	d6c88 <__aeabi_dmul>
   d686a:	ec41 0b10 	vmov	d0, r0, r1
   d686e:	bd70      	pop	{r4, r5, r6, pc}
   d6870:	ec43 2b11 	vmov	d1, r2, r3
   d6874:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d68e8 <scalbn+0xf8>
   d6878:	f000 f840 	bl	d68fc <copysign>
   d687c:	a31a      	add	r3, pc, #104	; (adr r3, d68e8 <scalbn+0xf8>)
   d687e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6882:	ec51 0b10 	vmov	r0, r1, d0
   d6886:	f000 f9ff 	bl	d6c88 <__aeabi_dmul>
   d688a:	ec41 0b10 	vmov	d0, r0, r1
   d688e:	bd70      	pop	{r4, r5, r6, pc}
   d6890:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d6894:	da13      	bge.n	d68be <scalbn+0xce>
   d6896:	f24c 3150 	movw	r1, #50000	; 0xc350
   d689a:	428d      	cmp	r5, r1
   d689c:	ec43 2b11 	vmov	d1, r2, r3
   d68a0:	dce8      	bgt.n	d6874 <scalbn+0x84>
   d68a2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d68e0 <scalbn+0xf0>
   d68a6:	f000 f829 	bl	d68fc <copysign>
   d68aa:	a30d      	add	r3, pc, #52	; (adr r3, d68e0 <scalbn+0xf0>)
   d68ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d68b0:	ec51 0b10 	vmov	r0, r1, d0
   d68b4:	f000 f9e8 	bl	d6c88 <__aeabi_dmul>
   d68b8:	ec41 0b10 	vmov	d0, r0, r1
   d68bc:	bd70      	pop	{r4, r5, r6, pc}
   d68be:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d68c2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d68c6:	3436      	adds	r4, #54	; 0x36
   d68c8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d68cc:	4610      	mov	r0, r2
   d68ce:	4619      	mov	r1, r3
   d68d0:	2200      	movs	r2, #0
   d68d2:	4b09      	ldr	r3, [pc, #36]	; (d68f8 <scalbn+0x108>)
   d68d4:	f000 f9d8 	bl	d6c88 <__aeabi_dmul>
   d68d8:	ec41 0b10 	vmov	d0, r0, r1
   d68dc:	bd70      	pop	{r4, r5, r6, pc}
   d68de:	bf00      	nop
   d68e0:	c2f8f359 	.word	0xc2f8f359
   d68e4:	01a56e1f 	.word	0x01a56e1f
   d68e8:	8800759c 	.word	0x8800759c
   d68ec:	7e37e43c 	.word	0x7e37e43c
   d68f0:	43500000 	.word	0x43500000
   d68f4:	ffff3cb0 	.word	0xffff3cb0
   d68f8:	3c900000 	.word	0x3c900000

000d68fc <copysign>:
   d68fc:	ec53 2b10 	vmov	r2, r3, d0
   d6900:	ee11 0a90 	vmov	r0, s3
   d6904:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d6908:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d690c:	ea41 0300 	orr.w	r3, r1, r0
   d6910:	ec43 2b10 	vmov	d0, r2, r3
   d6914:	4770      	bx	lr
   d6916:	bf00      	nop

000d6918 <__aeabi_drsub>:
   d6918:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d691c:	e002      	b.n	d6924 <__adddf3>
   d691e:	bf00      	nop

000d6920 <__aeabi_dsub>:
   d6920:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6924 <__adddf3>:
   d6924:	b530      	push	{r4, r5, lr}
   d6926:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d692a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d692e:	ea94 0f05 	teq	r4, r5
   d6932:	bf08      	it	eq
   d6934:	ea90 0f02 	teqeq	r0, r2
   d6938:	bf1f      	itttt	ne
   d693a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d693e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6942:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6946:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d694a:	f000 80e2 	beq.w	d6b12 <__adddf3+0x1ee>
   d694e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6952:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6956:	bfb8      	it	lt
   d6958:	426d      	neglt	r5, r5
   d695a:	dd0c      	ble.n	d6976 <__adddf3+0x52>
   d695c:	442c      	add	r4, r5
   d695e:	ea80 0202 	eor.w	r2, r0, r2
   d6962:	ea81 0303 	eor.w	r3, r1, r3
   d6966:	ea82 0000 	eor.w	r0, r2, r0
   d696a:	ea83 0101 	eor.w	r1, r3, r1
   d696e:	ea80 0202 	eor.w	r2, r0, r2
   d6972:	ea81 0303 	eor.w	r3, r1, r3
   d6976:	2d36      	cmp	r5, #54	; 0x36
   d6978:	bf88      	it	hi
   d697a:	bd30      	pophi	{r4, r5, pc}
   d697c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6980:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6984:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6988:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d698c:	d002      	beq.n	d6994 <__adddf3+0x70>
   d698e:	4240      	negs	r0, r0
   d6990:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6994:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6998:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d699c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d69a0:	d002      	beq.n	d69a8 <__adddf3+0x84>
   d69a2:	4252      	negs	r2, r2
   d69a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d69a8:	ea94 0f05 	teq	r4, r5
   d69ac:	f000 80a7 	beq.w	d6afe <__adddf3+0x1da>
   d69b0:	f1a4 0401 	sub.w	r4, r4, #1
   d69b4:	f1d5 0e20 	rsbs	lr, r5, #32
   d69b8:	db0d      	blt.n	d69d6 <__adddf3+0xb2>
   d69ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   d69be:	fa22 f205 	lsr.w	r2, r2, r5
   d69c2:	1880      	adds	r0, r0, r2
   d69c4:	f141 0100 	adc.w	r1, r1, #0
   d69c8:	fa03 f20e 	lsl.w	r2, r3, lr
   d69cc:	1880      	adds	r0, r0, r2
   d69ce:	fa43 f305 	asr.w	r3, r3, r5
   d69d2:	4159      	adcs	r1, r3
   d69d4:	e00e      	b.n	d69f4 <__adddf3+0xd0>
   d69d6:	f1a5 0520 	sub.w	r5, r5, #32
   d69da:	f10e 0e20 	add.w	lr, lr, #32
   d69de:	2a01      	cmp	r2, #1
   d69e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d69e4:	bf28      	it	cs
   d69e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d69ea:	fa43 f305 	asr.w	r3, r3, r5
   d69ee:	18c0      	adds	r0, r0, r3
   d69f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d69f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69f8:	d507      	bpl.n	d6a0a <__adddf3+0xe6>
   d69fa:	f04f 0e00 	mov.w	lr, #0
   d69fe:	f1dc 0c00 	rsbs	ip, ip, #0
   d6a02:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6a06:	eb6e 0101 	sbc.w	r1, lr, r1
   d6a0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6a0e:	d31b      	bcc.n	d6a48 <__adddf3+0x124>
   d6a10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6a14:	d30c      	bcc.n	d6a30 <__adddf3+0x10c>
   d6a16:	0849      	lsrs	r1, r1, #1
   d6a18:	ea5f 0030 	movs.w	r0, r0, rrx
   d6a1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6a20:	f104 0401 	add.w	r4, r4, #1
   d6a24:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6a28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6a2c:	f080 809a 	bcs.w	d6b64 <__adddf3+0x240>
   d6a30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6a34:	bf08      	it	eq
   d6a36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6a3a:	f150 0000 	adcs.w	r0, r0, #0
   d6a3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a42:	ea41 0105 	orr.w	r1, r1, r5
   d6a46:	bd30      	pop	{r4, r5, pc}
   d6a48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6a4c:	4140      	adcs	r0, r0
   d6a4e:	eb41 0101 	adc.w	r1, r1, r1
   d6a52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a56:	f1a4 0401 	sub.w	r4, r4, #1
   d6a5a:	d1e9      	bne.n	d6a30 <__adddf3+0x10c>
   d6a5c:	f091 0f00 	teq	r1, #0
   d6a60:	bf04      	itt	eq
   d6a62:	4601      	moveq	r1, r0
   d6a64:	2000      	moveq	r0, #0
   d6a66:	fab1 f381 	clz	r3, r1
   d6a6a:	bf08      	it	eq
   d6a6c:	3320      	addeq	r3, #32
   d6a6e:	f1a3 030b 	sub.w	r3, r3, #11
   d6a72:	f1b3 0220 	subs.w	r2, r3, #32
   d6a76:	da0c      	bge.n	d6a92 <__adddf3+0x16e>
   d6a78:	320c      	adds	r2, #12
   d6a7a:	dd08      	ble.n	d6a8e <__adddf3+0x16a>
   d6a7c:	f102 0c14 	add.w	ip, r2, #20
   d6a80:	f1c2 020c 	rsb	r2, r2, #12
   d6a84:	fa01 f00c 	lsl.w	r0, r1, ip
   d6a88:	fa21 f102 	lsr.w	r1, r1, r2
   d6a8c:	e00c      	b.n	d6aa8 <__adddf3+0x184>
   d6a8e:	f102 0214 	add.w	r2, r2, #20
   d6a92:	bfd8      	it	le
   d6a94:	f1c2 0c20 	rsble	ip, r2, #32
   d6a98:	fa01 f102 	lsl.w	r1, r1, r2
   d6a9c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6aa0:	bfdc      	itt	le
   d6aa2:	ea41 010c 	orrle.w	r1, r1, ip
   d6aa6:	4090      	lslle	r0, r2
   d6aa8:	1ae4      	subs	r4, r4, r3
   d6aaa:	bfa2      	ittt	ge
   d6aac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6ab0:	4329      	orrge	r1, r5
   d6ab2:	bd30      	popge	{r4, r5, pc}
   d6ab4:	ea6f 0404 	mvn.w	r4, r4
   d6ab8:	3c1f      	subs	r4, #31
   d6aba:	da1c      	bge.n	d6af6 <__adddf3+0x1d2>
   d6abc:	340c      	adds	r4, #12
   d6abe:	dc0e      	bgt.n	d6ade <__adddf3+0x1ba>
   d6ac0:	f104 0414 	add.w	r4, r4, #20
   d6ac4:	f1c4 0220 	rsb	r2, r4, #32
   d6ac8:	fa20 f004 	lsr.w	r0, r0, r4
   d6acc:	fa01 f302 	lsl.w	r3, r1, r2
   d6ad0:	ea40 0003 	orr.w	r0, r0, r3
   d6ad4:	fa21 f304 	lsr.w	r3, r1, r4
   d6ad8:	ea45 0103 	orr.w	r1, r5, r3
   d6adc:	bd30      	pop	{r4, r5, pc}
   d6ade:	f1c4 040c 	rsb	r4, r4, #12
   d6ae2:	f1c4 0220 	rsb	r2, r4, #32
   d6ae6:	fa20 f002 	lsr.w	r0, r0, r2
   d6aea:	fa01 f304 	lsl.w	r3, r1, r4
   d6aee:	ea40 0003 	orr.w	r0, r0, r3
   d6af2:	4629      	mov	r1, r5
   d6af4:	bd30      	pop	{r4, r5, pc}
   d6af6:	fa21 f004 	lsr.w	r0, r1, r4
   d6afa:	4629      	mov	r1, r5
   d6afc:	bd30      	pop	{r4, r5, pc}
   d6afe:	f094 0f00 	teq	r4, #0
   d6b02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6b06:	bf06      	itte	eq
   d6b08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6b0c:	3401      	addeq	r4, #1
   d6b0e:	3d01      	subne	r5, #1
   d6b10:	e74e      	b.n	d69b0 <__adddf3+0x8c>
   d6b12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6b16:	bf18      	it	ne
   d6b18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6b1c:	d029      	beq.n	d6b72 <__adddf3+0x24e>
   d6b1e:	ea94 0f05 	teq	r4, r5
   d6b22:	bf08      	it	eq
   d6b24:	ea90 0f02 	teqeq	r0, r2
   d6b28:	d005      	beq.n	d6b36 <__adddf3+0x212>
   d6b2a:	ea54 0c00 	orrs.w	ip, r4, r0
   d6b2e:	bf04      	itt	eq
   d6b30:	4619      	moveq	r1, r3
   d6b32:	4610      	moveq	r0, r2
   d6b34:	bd30      	pop	{r4, r5, pc}
   d6b36:	ea91 0f03 	teq	r1, r3
   d6b3a:	bf1e      	ittt	ne
   d6b3c:	2100      	movne	r1, #0
   d6b3e:	2000      	movne	r0, #0
   d6b40:	bd30      	popne	{r4, r5, pc}
   d6b42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6b46:	d105      	bne.n	d6b54 <__adddf3+0x230>
   d6b48:	0040      	lsls	r0, r0, #1
   d6b4a:	4149      	adcs	r1, r1
   d6b4c:	bf28      	it	cs
   d6b4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6b52:	bd30      	pop	{r4, r5, pc}
   d6b54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6b58:	bf3c      	itt	cc
   d6b5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6b5e:	bd30      	popcc	{r4, r5, pc}
   d6b60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6b64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6b68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6b6c:	f04f 0000 	mov.w	r0, #0
   d6b70:	bd30      	pop	{r4, r5, pc}
   d6b72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6b76:	bf1a      	itte	ne
   d6b78:	4619      	movne	r1, r3
   d6b7a:	4610      	movne	r0, r2
   d6b7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6b80:	bf1c      	itt	ne
   d6b82:	460b      	movne	r3, r1
   d6b84:	4602      	movne	r2, r0
   d6b86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6b8a:	bf06      	itte	eq
   d6b8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6b90:	ea91 0f03 	teqeq	r1, r3
   d6b94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6b98:	bd30      	pop	{r4, r5, pc}
   d6b9a:	bf00      	nop

000d6b9c <__aeabi_ui2d>:
   d6b9c:	f090 0f00 	teq	r0, #0
   d6ba0:	bf04      	itt	eq
   d6ba2:	2100      	moveq	r1, #0
   d6ba4:	4770      	bxeq	lr
   d6ba6:	b530      	push	{r4, r5, lr}
   d6ba8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6bac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6bb0:	f04f 0500 	mov.w	r5, #0
   d6bb4:	f04f 0100 	mov.w	r1, #0
   d6bb8:	e750      	b.n	d6a5c <__adddf3+0x138>
   d6bba:	bf00      	nop

000d6bbc <__aeabi_i2d>:
   d6bbc:	f090 0f00 	teq	r0, #0
   d6bc0:	bf04      	itt	eq
   d6bc2:	2100      	moveq	r1, #0
   d6bc4:	4770      	bxeq	lr
   d6bc6:	b530      	push	{r4, r5, lr}
   d6bc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6bcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6bd0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6bd4:	bf48      	it	mi
   d6bd6:	4240      	negmi	r0, r0
   d6bd8:	f04f 0100 	mov.w	r1, #0
   d6bdc:	e73e      	b.n	d6a5c <__adddf3+0x138>
   d6bde:	bf00      	nop

000d6be0 <__aeabi_f2d>:
   d6be0:	0042      	lsls	r2, r0, #1
   d6be2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6be6:	ea4f 0131 	mov.w	r1, r1, rrx
   d6bea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6bee:	bf1f      	itttt	ne
   d6bf0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6bf4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6bf8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6bfc:	4770      	bxne	lr
   d6bfe:	f092 0f00 	teq	r2, #0
   d6c02:	bf14      	ite	ne
   d6c04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6c08:	4770      	bxeq	lr
   d6c0a:	b530      	push	{r4, r5, lr}
   d6c0c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6c10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6c18:	e720      	b.n	d6a5c <__adddf3+0x138>
   d6c1a:	bf00      	nop

000d6c1c <__aeabi_ul2d>:
   d6c1c:	ea50 0201 	orrs.w	r2, r0, r1
   d6c20:	bf08      	it	eq
   d6c22:	4770      	bxeq	lr
   d6c24:	b530      	push	{r4, r5, lr}
   d6c26:	f04f 0500 	mov.w	r5, #0
   d6c2a:	e00a      	b.n	d6c42 <__aeabi_l2d+0x16>

000d6c2c <__aeabi_l2d>:
   d6c2c:	ea50 0201 	orrs.w	r2, r0, r1
   d6c30:	bf08      	it	eq
   d6c32:	4770      	bxeq	lr
   d6c34:	b530      	push	{r4, r5, lr}
   d6c36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6c3a:	d502      	bpl.n	d6c42 <__aeabi_l2d+0x16>
   d6c3c:	4240      	negs	r0, r0
   d6c3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c42:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6c46:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6c4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6c4e:	f43f aedc 	beq.w	d6a0a <__adddf3+0xe6>
   d6c52:	f04f 0203 	mov.w	r2, #3
   d6c56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6c5a:	bf18      	it	ne
   d6c5c:	3203      	addne	r2, #3
   d6c5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6c62:	bf18      	it	ne
   d6c64:	3203      	addne	r2, #3
   d6c66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6c6a:	f1c2 0320 	rsb	r3, r2, #32
   d6c6e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6c72:	fa20 f002 	lsr.w	r0, r0, r2
   d6c76:	fa01 fe03 	lsl.w	lr, r1, r3
   d6c7a:	ea40 000e 	orr.w	r0, r0, lr
   d6c7e:	fa21 f102 	lsr.w	r1, r1, r2
   d6c82:	4414      	add	r4, r2
   d6c84:	e6c1      	b.n	d6a0a <__adddf3+0xe6>
   d6c86:	bf00      	nop

000d6c88 <__aeabi_dmul>:
   d6c88:	b570      	push	{r4, r5, r6, lr}
   d6c8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6c8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6c92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6c96:	bf1d      	ittte	ne
   d6c98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6c9c:	ea94 0f0c 	teqne	r4, ip
   d6ca0:	ea95 0f0c 	teqne	r5, ip
   d6ca4:	f000 f8de 	bleq	d6e64 <__aeabi_dmul+0x1dc>
   d6ca8:	442c      	add	r4, r5
   d6caa:	ea81 0603 	eor.w	r6, r1, r3
   d6cae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6cb2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6cb6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6cba:	bf18      	it	ne
   d6cbc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6cc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6cc8:	d038      	beq.n	d6d3c <__aeabi_dmul+0xb4>
   d6cca:	fba0 ce02 	umull	ip, lr, r0, r2
   d6cce:	f04f 0500 	mov.w	r5, #0
   d6cd2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6cd6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6cda:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6cde:	f04f 0600 	mov.w	r6, #0
   d6ce2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6ce6:	f09c 0f00 	teq	ip, #0
   d6cea:	bf18      	it	ne
   d6cec:	f04e 0e01 	orrne.w	lr, lr, #1
   d6cf0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6cf4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6cf8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6cfc:	d204      	bcs.n	d6d08 <__aeabi_dmul+0x80>
   d6cfe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6d02:	416d      	adcs	r5, r5
   d6d04:	eb46 0606 	adc.w	r6, r6, r6
   d6d08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6d0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6d10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6d14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6d18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6d1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6d20:	bf88      	it	hi
   d6d22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6d26:	d81e      	bhi.n	d6d66 <__aeabi_dmul+0xde>
   d6d28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6d2c:	bf08      	it	eq
   d6d2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6d32:	f150 0000 	adcs.w	r0, r0, #0
   d6d36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d3a:	bd70      	pop	{r4, r5, r6, pc}
   d6d3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6d40:	ea46 0101 	orr.w	r1, r6, r1
   d6d44:	ea40 0002 	orr.w	r0, r0, r2
   d6d48:	ea81 0103 	eor.w	r1, r1, r3
   d6d4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6d50:	bfc2      	ittt	gt
   d6d52:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6d56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6d5a:	bd70      	popgt	{r4, r5, r6, pc}
   d6d5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d60:	f04f 0e00 	mov.w	lr, #0
   d6d64:	3c01      	subs	r4, #1
   d6d66:	f300 80ab 	bgt.w	d6ec0 <__aeabi_dmul+0x238>
   d6d6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6d6e:	bfde      	ittt	le
   d6d70:	2000      	movle	r0, #0
   d6d72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6d76:	bd70      	pople	{r4, r5, r6, pc}
   d6d78:	f1c4 0400 	rsb	r4, r4, #0
   d6d7c:	3c20      	subs	r4, #32
   d6d7e:	da35      	bge.n	d6dec <__aeabi_dmul+0x164>
   d6d80:	340c      	adds	r4, #12
   d6d82:	dc1b      	bgt.n	d6dbc <__aeabi_dmul+0x134>
   d6d84:	f104 0414 	add.w	r4, r4, #20
   d6d88:	f1c4 0520 	rsb	r5, r4, #32
   d6d8c:	fa00 f305 	lsl.w	r3, r0, r5
   d6d90:	fa20 f004 	lsr.w	r0, r0, r4
   d6d94:	fa01 f205 	lsl.w	r2, r1, r5
   d6d98:	ea40 0002 	orr.w	r0, r0, r2
   d6d9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6da0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6da4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6da8:	fa21 f604 	lsr.w	r6, r1, r4
   d6dac:	eb42 0106 	adc.w	r1, r2, r6
   d6db0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6db4:	bf08      	it	eq
   d6db6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6dba:	bd70      	pop	{r4, r5, r6, pc}
   d6dbc:	f1c4 040c 	rsb	r4, r4, #12
   d6dc0:	f1c4 0520 	rsb	r5, r4, #32
   d6dc4:	fa00 f304 	lsl.w	r3, r0, r4
   d6dc8:	fa20 f005 	lsr.w	r0, r0, r5
   d6dcc:	fa01 f204 	lsl.w	r2, r1, r4
   d6dd0:	ea40 0002 	orr.w	r0, r0, r2
   d6dd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6dd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6ddc:	f141 0100 	adc.w	r1, r1, #0
   d6de0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6de4:	bf08      	it	eq
   d6de6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6dea:	bd70      	pop	{r4, r5, r6, pc}
   d6dec:	f1c4 0520 	rsb	r5, r4, #32
   d6df0:	fa00 f205 	lsl.w	r2, r0, r5
   d6df4:	ea4e 0e02 	orr.w	lr, lr, r2
   d6df8:	fa20 f304 	lsr.w	r3, r0, r4
   d6dfc:	fa01 f205 	lsl.w	r2, r1, r5
   d6e00:	ea43 0302 	orr.w	r3, r3, r2
   d6e04:	fa21 f004 	lsr.w	r0, r1, r4
   d6e08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e0c:	fa21 f204 	lsr.w	r2, r1, r4
   d6e10:	ea20 0002 	bic.w	r0, r0, r2
   d6e14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6e18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6e1c:	bf08      	it	eq
   d6e1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6e22:	bd70      	pop	{r4, r5, r6, pc}
   d6e24:	f094 0f00 	teq	r4, #0
   d6e28:	d10f      	bne.n	d6e4a <__aeabi_dmul+0x1c2>
   d6e2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6e2e:	0040      	lsls	r0, r0, #1
   d6e30:	eb41 0101 	adc.w	r1, r1, r1
   d6e34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e38:	bf08      	it	eq
   d6e3a:	3c01      	subeq	r4, #1
   d6e3c:	d0f7      	beq.n	d6e2e <__aeabi_dmul+0x1a6>
   d6e3e:	ea41 0106 	orr.w	r1, r1, r6
   d6e42:	f095 0f00 	teq	r5, #0
   d6e46:	bf18      	it	ne
   d6e48:	4770      	bxne	lr
   d6e4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6e4e:	0052      	lsls	r2, r2, #1
   d6e50:	eb43 0303 	adc.w	r3, r3, r3
   d6e54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6e58:	bf08      	it	eq
   d6e5a:	3d01      	subeq	r5, #1
   d6e5c:	d0f7      	beq.n	d6e4e <__aeabi_dmul+0x1c6>
   d6e5e:	ea43 0306 	orr.w	r3, r3, r6
   d6e62:	4770      	bx	lr
   d6e64:	ea94 0f0c 	teq	r4, ip
   d6e68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6e6c:	bf18      	it	ne
   d6e6e:	ea95 0f0c 	teqne	r5, ip
   d6e72:	d00c      	beq.n	d6e8e <__aeabi_dmul+0x206>
   d6e74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e78:	bf18      	it	ne
   d6e7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e7e:	d1d1      	bne.n	d6e24 <__aeabi_dmul+0x19c>
   d6e80:	ea81 0103 	eor.w	r1, r1, r3
   d6e84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e88:	f04f 0000 	mov.w	r0, #0
   d6e8c:	bd70      	pop	{r4, r5, r6, pc}
   d6e8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e92:	bf06      	itte	eq
   d6e94:	4610      	moveq	r0, r2
   d6e96:	4619      	moveq	r1, r3
   d6e98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e9c:	d019      	beq.n	d6ed2 <__aeabi_dmul+0x24a>
   d6e9e:	ea94 0f0c 	teq	r4, ip
   d6ea2:	d102      	bne.n	d6eaa <__aeabi_dmul+0x222>
   d6ea4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6ea8:	d113      	bne.n	d6ed2 <__aeabi_dmul+0x24a>
   d6eaa:	ea95 0f0c 	teq	r5, ip
   d6eae:	d105      	bne.n	d6ebc <__aeabi_dmul+0x234>
   d6eb0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6eb4:	bf1c      	itt	ne
   d6eb6:	4610      	movne	r0, r2
   d6eb8:	4619      	movne	r1, r3
   d6eba:	d10a      	bne.n	d6ed2 <__aeabi_dmul+0x24a>
   d6ebc:	ea81 0103 	eor.w	r1, r1, r3
   d6ec0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ec4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ec8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6ecc:	f04f 0000 	mov.w	r0, #0
   d6ed0:	bd70      	pop	{r4, r5, r6, pc}
   d6ed2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ed6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6eda:	bd70      	pop	{r4, r5, r6, pc}

000d6edc <__aeabi_ddiv>:
   d6edc:	b570      	push	{r4, r5, r6, lr}
   d6ede:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ee2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ee6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6eea:	bf1d      	ittte	ne
   d6eec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ef0:	ea94 0f0c 	teqne	r4, ip
   d6ef4:	ea95 0f0c 	teqne	r5, ip
   d6ef8:	f000 f8a7 	bleq	d704a <__aeabi_ddiv+0x16e>
   d6efc:	eba4 0405 	sub.w	r4, r4, r5
   d6f00:	ea81 0e03 	eor.w	lr, r1, r3
   d6f04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6f08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6f0c:	f000 8088 	beq.w	d7020 <__aeabi_ddiv+0x144>
   d6f10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6f14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6f18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6f1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6f20:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6f24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6f28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6f2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6f30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6f34:	429d      	cmp	r5, r3
   d6f36:	bf08      	it	eq
   d6f38:	4296      	cmpeq	r6, r2
   d6f3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6f3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6f42:	d202      	bcs.n	d6f4a <__aeabi_ddiv+0x6e>
   d6f44:	085b      	lsrs	r3, r3, #1
   d6f46:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f4a:	1ab6      	subs	r6, r6, r2
   d6f4c:	eb65 0503 	sbc.w	r5, r5, r3
   d6f50:	085b      	lsrs	r3, r3, #1
   d6f52:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6f5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6f5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f66:	bf22      	ittt	cs
   d6f68:	1ab6      	subcs	r6, r6, r2
   d6f6a:	4675      	movcs	r5, lr
   d6f6c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6f70:	085b      	lsrs	r3, r3, #1
   d6f72:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f76:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f7e:	bf22      	ittt	cs
   d6f80:	1ab6      	subcs	r6, r6, r2
   d6f82:	4675      	movcs	r5, lr
   d6f84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6f88:	085b      	lsrs	r3, r3, #1
   d6f8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f96:	bf22      	ittt	cs
   d6f98:	1ab6      	subcs	r6, r6, r2
   d6f9a:	4675      	movcs	r5, lr
   d6f9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6fa0:	085b      	lsrs	r3, r3, #1
   d6fa2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6fa6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6faa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6fae:	bf22      	ittt	cs
   d6fb0:	1ab6      	subcs	r6, r6, r2
   d6fb2:	4675      	movcs	r5, lr
   d6fb4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6fb8:	ea55 0e06 	orrs.w	lr, r5, r6
   d6fbc:	d018      	beq.n	d6ff0 <__aeabi_ddiv+0x114>
   d6fbe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6fc2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6fc6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6fca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6fce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6fd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6fd6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6fda:	d1c0      	bne.n	d6f5e <__aeabi_ddiv+0x82>
   d6fdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6fe0:	d10b      	bne.n	d6ffa <__aeabi_ddiv+0x11e>
   d6fe2:	ea41 0100 	orr.w	r1, r1, r0
   d6fe6:	f04f 0000 	mov.w	r0, #0
   d6fea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6fee:	e7b6      	b.n	d6f5e <__aeabi_ddiv+0x82>
   d6ff0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ff4:	bf04      	itt	eq
   d6ff6:	4301      	orreq	r1, r0
   d6ff8:	2000      	moveq	r0, #0
   d6ffa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ffe:	bf88      	it	hi
   d7000:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7004:	f63f aeaf 	bhi.w	d6d66 <__aeabi_dmul+0xde>
   d7008:	ebb5 0c03 	subs.w	ip, r5, r3
   d700c:	bf04      	itt	eq
   d700e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7012:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7016:	f150 0000 	adcs.w	r0, r0, #0
   d701a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d701e:	bd70      	pop	{r4, r5, r6, pc}
   d7020:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7024:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7028:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d702c:	bfc2      	ittt	gt
   d702e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7032:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7036:	bd70      	popgt	{r4, r5, r6, pc}
   d7038:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d703c:	f04f 0e00 	mov.w	lr, #0
   d7040:	3c01      	subs	r4, #1
   d7042:	e690      	b.n	d6d66 <__aeabi_dmul+0xde>
   d7044:	ea45 0e06 	orr.w	lr, r5, r6
   d7048:	e68d      	b.n	d6d66 <__aeabi_dmul+0xde>
   d704a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d704e:	ea94 0f0c 	teq	r4, ip
   d7052:	bf08      	it	eq
   d7054:	ea95 0f0c 	teqeq	r5, ip
   d7058:	f43f af3b 	beq.w	d6ed2 <__aeabi_dmul+0x24a>
   d705c:	ea94 0f0c 	teq	r4, ip
   d7060:	d10a      	bne.n	d7078 <__aeabi_ddiv+0x19c>
   d7062:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7066:	f47f af34 	bne.w	d6ed2 <__aeabi_dmul+0x24a>
   d706a:	ea95 0f0c 	teq	r5, ip
   d706e:	f47f af25 	bne.w	d6ebc <__aeabi_dmul+0x234>
   d7072:	4610      	mov	r0, r2
   d7074:	4619      	mov	r1, r3
   d7076:	e72c      	b.n	d6ed2 <__aeabi_dmul+0x24a>
   d7078:	ea95 0f0c 	teq	r5, ip
   d707c:	d106      	bne.n	d708c <__aeabi_ddiv+0x1b0>
   d707e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7082:	f43f aefd 	beq.w	d6e80 <__aeabi_dmul+0x1f8>
   d7086:	4610      	mov	r0, r2
   d7088:	4619      	mov	r1, r3
   d708a:	e722      	b.n	d6ed2 <__aeabi_dmul+0x24a>
   d708c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7090:	bf18      	it	ne
   d7092:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7096:	f47f aec5 	bne.w	d6e24 <__aeabi_dmul+0x19c>
   d709a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d709e:	f47f af0d 	bne.w	d6ebc <__aeabi_dmul+0x234>
   d70a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d70a6:	f47f aeeb 	bne.w	d6e80 <__aeabi_dmul+0x1f8>
   d70aa:	e712      	b.n	d6ed2 <__aeabi_dmul+0x24a>

000d70ac <__gedf2>:
   d70ac:	f04f 3cff 	mov.w	ip, #4294967295
   d70b0:	e006      	b.n	d70c0 <__cmpdf2+0x4>
   d70b2:	bf00      	nop

000d70b4 <__ledf2>:
   d70b4:	f04f 0c01 	mov.w	ip, #1
   d70b8:	e002      	b.n	d70c0 <__cmpdf2+0x4>
   d70ba:	bf00      	nop

000d70bc <__cmpdf2>:
   d70bc:	f04f 0c01 	mov.w	ip, #1
   d70c0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d70c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d70c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d70cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d70d0:	bf18      	it	ne
   d70d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d70d6:	d01b      	beq.n	d7110 <__cmpdf2+0x54>
   d70d8:	b001      	add	sp, #4
   d70da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d70de:	bf0c      	ite	eq
   d70e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d70e4:	ea91 0f03 	teqne	r1, r3
   d70e8:	bf02      	ittt	eq
   d70ea:	ea90 0f02 	teqeq	r0, r2
   d70ee:	2000      	moveq	r0, #0
   d70f0:	4770      	bxeq	lr
   d70f2:	f110 0f00 	cmn.w	r0, #0
   d70f6:	ea91 0f03 	teq	r1, r3
   d70fa:	bf58      	it	pl
   d70fc:	4299      	cmppl	r1, r3
   d70fe:	bf08      	it	eq
   d7100:	4290      	cmpeq	r0, r2
   d7102:	bf2c      	ite	cs
   d7104:	17d8      	asrcs	r0, r3, #31
   d7106:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d710a:	f040 0001 	orr.w	r0, r0, #1
   d710e:	4770      	bx	lr
   d7110:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7114:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7118:	d102      	bne.n	d7120 <__cmpdf2+0x64>
   d711a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d711e:	d107      	bne.n	d7130 <__cmpdf2+0x74>
   d7120:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7124:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7128:	d1d6      	bne.n	d70d8 <__cmpdf2+0x1c>
   d712a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d712e:	d0d3      	beq.n	d70d8 <__cmpdf2+0x1c>
   d7130:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7134:	4770      	bx	lr
   d7136:	bf00      	nop

000d7138 <__aeabi_cdrcmple>:
   d7138:	4684      	mov	ip, r0
   d713a:	4610      	mov	r0, r2
   d713c:	4662      	mov	r2, ip
   d713e:	468c      	mov	ip, r1
   d7140:	4619      	mov	r1, r3
   d7142:	4663      	mov	r3, ip
   d7144:	e000      	b.n	d7148 <__aeabi_cdcmpeq>
   d7146:	bf00      	nop

000d7148 <__aeabi_cdcmpeq>:
   d7148:	b501      	push	{r0, lr}
   d714a:	f7ff ffb7 	bl	d70bc <__cmpdf2>
   d714e:	2800      	cmp	r0, #0
   d7150:	bf48      	it	mi
   d7152:	f110 0f00 	cmnmi.w	r0, #0
   d7156:	bd01      	pop	{r0, pc}

000d7158 <__aeabi_dcmpeq>:
   d7158:	f84d ed08 	str.w	lr, [sp, #-8]!
   d715c:	f7ff fff4 	bl	d7148 <__aeabi_cdcmpeq>
   d7160:	bf0c      	ite	eq
   d7162:	2001      	moveq	r0, #1
   d7164:	2000      	movne	r0, #0
   d7166:	f85d fb08 	ldr.w	pc, [sp], #8
   d716a:	bf00      	nop

000d716c <__aeabi_dcmplt>:
   d716c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7170:	f7ff ffea 	bl	d7148 <__aeabi_cdcmpeq>
   d7174:	bf34      	ite	cc
   d7176:	2001      	movcc	r0, #1
   d7178:	2000      	movcs	r0, #0
   d717a:	f85d fb08 	ldr.w	pc, [sp], #8
   d717e:	bf00      	nop

000d7180 <__aeabi_dcmple>:
   d7180:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7184:	f7ff ffe0 	bl	d7148 <__aeabi_cdcmpeq>
   d7188:	bf94      	ite	ls
   d718a:	2001      	movls	r0, #1
   d718c:	2000      	movhi	r0, #0
   d718e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7192:	bf00      	nop

000d7194 <__aeabi_dcmpge>:
   d7194:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7198:	f7ff ffce 	bl	d7138 <__aeabi_cdrcmple>
   d719c:	bf94      	ite	ls
   d719e:	2001      	movls	r0, #1
   d71a0:	2000      	movhi	r0, #0
   d71a2:	f85d fb08 	ldr.w	pc, [sp], #8
   d71a6:	bf00      	nop

000d71a8 <__aeabi_dcmpgt>:
   d71a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d71ac:	f7ff ffc4 	bl	d7138 <__aeabi_cdrcmple>
   d71b0:	bf34      	ite	cc
   d71b2:	2001      	movcc	r0, #1
   d71b4:	2000      	movcs	r0, #0
   d71b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d71ba:	bf00      	nop

000d71bc <__aeabi_dcmpun>:
   d71bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d71c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d71c4:	d102      	bne.n	d71cc <__aeabi_dcmpun+0x10>
   d71c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d71ca:	d10a      	bne.n	d71e2 <__aeabi_dcmpun+0x26>
   d71cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d71d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d71d4:	d102      	bne.n	d71dc <__aeabi_dcmpun+0x20>
   d71d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d71da:	d102      	bne.n	d71e2 <__aeabi_dcmpun+0x26>
   d71dc:	f04f 0000 	mov.w	r0, #0
   d71e0:	4770      	bx	lr
   d71e2:	f04f 0001 	mov.w	r0, #1
   d71e6:	4770      	bx	lr

000d71e8 <__aeabi_d2iz>:
   d71e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d71ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d71f0:	d215      	bcs.n	d721e <__aeabi_d2iz+0x36>
   d71f2:	d511      	bpl.n	d7218 <__aeabi_d2iz+0x30>
   d71f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d71f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d71fc:	d912      	bls.n	d7224 <__aeabi_d2iz+0x3c>
   d71fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7206:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d720a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d720e:	fa23 f002 	lsr.w	r0, r3, r2
   d7212:	bf18      	it	ne
   d7214:	4240      	negne	r0, r0
   d7216:	4770      	bx	lr
   d7218:	f04f 0000 	mov.w	r0, #0
   d721c:	4770      	bx	lr
   d721e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7222:	d105      	bne.n	d7230 <__aeabi_d2iz+0x48>
   d7224:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7228:	bf08      	it	eq
   d722a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d722e:	4770      	bx	lr
   d7230:	f04f 0000 	mov.w	r0, #0
   d7234:	4770      	bx	lr
   d7236:	bf00      	nop

000d7238 <__aeabi_d2uiz>:
   d7238:	004a      	lsls	r2, r1, #1
   d723a:	d211      	bcs.n	d7260 <__aeabi_d2uiz+0x28>
   d723c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7240:	d211      	bcs.n	d7266 <__aeabi_d2uiz+0x2e>
   d7242:	d50d      	bpl.n	d7260 <__aeabi_d2uiz+0x28>
   d7244:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7248:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d724c:	d40e      	bmi.n	d726c <__aeabi_d2uiz+0x34>
   d724e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7256:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d725a:	fa23 f002 	lsr.w	r0, r3, r2
   d725e:	4770      	bx	lr
   d7260:	f04f 0000 	mov.w	r0, #0
   d7264:	4770      	bx	lr
   d7266:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d726a:	d102      	bne.n	d7272 <__aeabi_d2uiz+0x3a>
   d726c:	f04f 30ff 	mov.w	r0, #4294967295
   d7270:	4770      	bx	lr
   d7272:	f04f 0000 	mov.w	r0, #0
   d7276:	4770      	bx	lr

000d7278 <__aeabi_d2f>:
   d7278:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d727c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7280:	bf24      	itt	cs
   d7282:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7286:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d728a:	d90d      	bls.n	d72a8 <__aeabi_d2f+0x30>
   d728c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7290:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7294:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7298:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d729c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d72a0:	bf08      	it	eq
   d72a2:	f020 0001 	biceq.w	r0, r0, #1
   d72a6:	4770      	bx	lr
   d72a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d72ac:	d121      	bne.n	d72f2 <__aeabi_d2f+0x7a>
   d72ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d72b2:	bfbc      	itt	lt
   d72b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d72b8:	4770      	bxlt	lr
   d72ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d72be:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d72c2:	f1c2 0218 	rsb	r2, r2, #24
   d72c6:	f1c2 0c20 	rsb	ip, r2, #32
   d72ca:	fa10 f30c 	lsls.w	r3, r0, ip
   d72ce:	fa20 f002 	lsr.w	r0, r0, r2
   d72d2:	bf18      	it	ne
   d72d4:	f040 0001 	orrne.w	r0, r0, #1
   d72d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d72dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d72e0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d72e4:	ea40 000c 	orr.w	r0, r0, ip
   d72e8:	fa23 f302 	lsr.w	r3, r3, r2
   d72ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d72f0:	e7cc      	b.n	d728c <__aeabi_d2f+0x14>
   d72f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d72f6:	d107      	bne.n	d7308 <__aeabi_d2f+0x90>
   d72f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d72fc:	bf1e      	ittt	ne
   d72fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7302:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7306:	4770      	bxne	lr
   d7308:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d730c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7310:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7314:	4770      	bx	lr
   d7316:	bf00      	nop

000d7318 <__cxa_atexit>:
   d7318:	b510      	push	{r4, lr}
   d731a:	4c05      	ldr	r4, [pc, #20]	; (d7330 <__cxa_atexit+0x18>)
   d731c:	4613      	mov	r3, r2
   d731e:	b12c      	cbz	r4, d732c <__cxa_atexit+0x14>
   d7320:	460a      	mov	r2, r1
   d7322:	4601      	mov	r1, r0
   d7324:	2002      	movs	r0, #2
   d7326:	f3af 8000 	nop.w
   d732a:	bd10      	pop	{r4, pc}
   d732c:	4620      	mov	r0, r4
   d732e:	bd10      	pop	{r4, pc}
   d7330:	00000000 	.word	0x00000000

000d7334 <memcpy>:
   d7334:	b510      	push	{r4, lr}
   d7336:	1e43      	subs	r3, r0, #1
   d7338:	440a      	add	r2, r1
   d733a:	4291      	cmp	r1, r2
   d733c:	d004      	beq.n	d7348 <memcpy+0x14>
   d733e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7342:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7346:	e7f8      	b.n	d733a <memcpy+0x6>
   d7348:	bd10      	pop	{r4, pc}

000d734a <memset>:
   d734a:	4402      	add	r2, r0
   d734c:	4603      	mov	r3, r0
   d734e:	4293      	cmp	r3, r2
   d7350:	d002      	beq.n	d7358 <memset+0xe>
   d7352:	f803 1b01 	strb.w	r1, [r3], #1
   d7356:	e7fa      	b.n	d734e <memset+0x4>
   d7358:	4770      	bx	lr
	...

000d735c <srand>:
   d735c:	b538      	push	{r3, r4, r5, lr}
   d735e:	4b12      	ldr	r3, [pc, #72]	; (d73a8 <srand+0x4c>)
   d7360:	681c      	ldr	r4, [r3, #0]
   d7362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7364:	4605      	mov	r5, r0
   d7366:	b9d3      	cbnz	r3, d739e <srand+0x42>
   d7368:	2018      	movs	r0, #24
   d736a:	f7fd f96d 	bl	d4648 <malloc>
   d736e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7372:	63a0      	str	r0, [r4, #56]	; 0x38
   d7374:	8003      	strh	r3, [r0, #0]
   d7376:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d737a:	8043      	strh	r3, [r0, #2]
   d737c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7380:	8083      	strh	r3, [r0, #4]
   d7382:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7386:	80c3      	strh	r3, [r0, #6]
   d7388:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d738c:	8103      	strh	r3, [r0, #8]
   d738e:	2305      	movs	r3, #5
   d7390:	8143      	strh	r3, [r0, #10]
   d7392:	230b      	movs	r3, #11
   d7394:	8183      	strh	r3, [r0, #12]
   d7396:	2201      	movs	r2, #1
   d7398:	2300      	movs	r3, #0
   d739a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d739e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d73a0:	2200      	movs	r2, #0
   d73a2:	611d      	str	r5, [r3, #16]
   d73a4:	615a      	str	r2, [r3, #20]
   d73a6:	bd38      	pop	{r3, r4, r5, pc}
   d73a8:	2003e3b0 	.word	0x2003e3b0

000d73ac <strlen>:
   d73ac:	4603      	mov	r3, r0
   d73ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   d73b2:	2a00      	cmp	r2, #0
   d73b4:	d1fb      	bne.n	d73ae <strlen+0x2>
   d73b6:	1a18      	subs	r0, r3, r0
   d73b8:	3801      	subs	r0, #1
   d73ba:	4770      	bx	lr

000d73bc <dynalib_user>:
   d73bc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d73cc:	0000 0000 002c 6176 7563 6d75 6f20 006e     ....,.vacuum on.
   d73dc:	6176 7563 6d75 6f20 6666 0000               vacuum off..

000d73e8 <_ZTVN5spark13EthernetClassE>:
	...
   d73f0:	46d7 000d 46cd 000d 46c3 000d 46b9 000d     .F...F...F...F..
   d7400:	46ad 000d 46a1 000d 4695 000d 468d 000d     .F...F...F...F..
   d7410:	4683 000d 4679 000d 5195 000d               .F..yF...Q..

000d741c <_ZTV8SPIClass>:
	...
   d7424:	46f5 000d 46f7 000d 616e 006e 766f 0066     .F...F..nan.ovf.
   d7434:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d7444:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d7454:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d7464:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d7474:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d7484:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d7494:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d74a4:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d74b4:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   d74c4:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d74d4:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d74e4:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d74f4:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d7504:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d7514:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d7524:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d7534:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d7544 <_ZTV9IPAddress>:
	...
   d754c:	4bc9 000d 4bb9 000d 4bbb 000d               .K...K...K..

000d7558 <_ZTV9USBSerial>:
	...
   d7560:	4ca1 000d 4cf1 000d 4cff 000d 47b1 000d     .L...L...L...G..
   d7570:	4cdd 000d 4ca3 000d 4cb9 000d 4ceb 000d     .L...L...L...L..
   d7580:	4ccf 000d 4c9d 000d                         .L...L..

000d7588 <_ZTV11USARTSerial>:
	...
   d7590:	4dad 000d 4dfd 000d 4e0b 000d 47b1 000d     .M...M...N...G..
   d75a0:	4dc1 000d 4de3 000d 4dcf 000d 4df7 000d     .M...M...M...M..
   d75b0:	4daf 000d 4db3 000d                         .M...M..

000d75b8 <_ZTV7TwoWire>:
	...
   d75c0:	4eb1 000d 4efb 000d 4ed3 000d 4eb3 000d     .N...N...N...N..
   d75d0:	4edb 000d 4ee3 000d 4eeb 000d 4ef3 000d     .N...N...N...N..

000d75e0 <_ZTVN5spark9MeshClassE>:
	...
   d75e8:	4f93 000d 4f89 000d 4f7f 000d 4f75 000d     .O...O...O..uO..
   d75f8:	4f69 000d 4f5d 000d 4f51 000d 4f49 000d     iO..]O..QO..IO..
   d7608:	4f3f 000d 4f35 000d 5195 000d               ?O..5O...Q..

000d7614 <_ZTVN5spark9WiFiClassE>:
	...
   d761c:	510f 000d 5105 000d 50fb 000d 50b1 000d     .Q...Q...P...P..
   d762c:	50ef 000d 50e3 000d 50d7 000d 50cf 000d     .P...P...P...P..
   d763c:	50c5 000d 50bb 000d 5195 000d               .P...P...Q..

000d7648 <_ZTVN5spark12NetworkClassE>:
	...
   d7650:	512d 000d 5137 000d 5141 000d 514b 000d     -Q..7Q..AQ..KQ..
   d7660:	5155 000d 5161 000d 516d 000d 5179 000d     UQ..aQ..mQ..yQ..
   d7670:	5181 000d 518b 000d 5195 000d               .Q...Q...Q..

000d767c <_ZSt7nothrow>:
   d767c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d7688 <TWO52>:
   d7688:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d7698 <__sf_fake_stdin>:
	...

000d76b8 <__sf_fake_stdout>:
	...

000d76d8 <__sf_fake_stderr>:
	...
   d76f8:	0043                                        C.

000d76fa <link_const_variable_data_end>:
	...

000d76fc <link_constructors_location>:
   d76fc:	000d42e9 	.word	0x000d42e9
   d7700:	000d42ed 	.word	0x000d42ed
   d7704:	000d46e1 	.word	0x000d46e1
   d7708:	000d4745 	.word	0x000d4745
   d770c:	000d4789 	.word	0x000d4789
   d7710:	000d4a49 	.word	0x000d4a49
   d7714:	000d4a59 	.word	0x000d4a59
   d7718:	000d4a8d 	.word	0x000d4a8d
   d771c:	000d5061 	.word	0x000d5061
   d7720:	000d5119 	.word	0x000d5119
   d7724:	000d5261 	.word	0x000d5261
   d7728:	000d5415 	.word	0x000d5415
   d772c:	000d5499 	.word	0x000d5499
   d7730:	000d555d 	.word	0x000d555d
   d7734:	000d5621 	.word	0x000d5621

000d7738 <link_constructors_end>:
	...
